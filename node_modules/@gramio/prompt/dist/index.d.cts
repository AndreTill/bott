import * as gramio from 'gramio';
import { Optional, SendMessageParams, Stringable, ContextType, AnyBot, MaybePromise, Plugin } from 'gramio';

type PromptsType<Data = never> = Map<number, PromptData<EventsUnion, Data>>;
declare const events: readonly ["message", "edited_message", "channel_post", "edited_channel_post", "callback_query"];
type EventsUnion = (typeof events)[number];
type IsNever<T> = [T] extends [never] ? true : false;
type PromptAnswer<Event extends EventsUnion, Data = never> = IsNever<Data> extends true ? ContextType<AnyBot, Event> & {
    /**
     * @example
     * ```ts
     * import { Bot, format, bold } from "gramio";
     * import { prompt } from "@gramio/prompt";
     *
     * const bot = new Bot(process.env.token!)
     *     .extend(prompt())
     *     .command("start", async (context) => {
     *         const answer = await context.prompt(
     *             "message",
     *             format`What's your ${bold`name`}?`
     *         );
     *
     *         return context.send(`✨ Your name is ${answer.text}`);
     *     })
     *     .onStart(console.log);
     *
     * bot.start();
     * ```
     */
    prompt: PromptFunction;
    /**
     * Wait for the next event from the user
     *
     * @example
     * ```ts
     * .command("start", async (context) => {
     *         const answer = await context.wait();
     *
     *         return context.send(`✨ Next message after /start command is ${answer.text}`);
     * })
     * ```
     *  */
    wait: WaitFunction;
} : Data;
type ValidateFunction<Event extends EventsUnion, Data> = (context: PromptAnswer<Event, Data>) => MaybePromise<boolean>;
type TransformFunction<Event extends EventsUnion, Data> = (context: PromptAnswer<Event, never>) => MaybePromise<Data>;
interface PromptData<Event extends EventsUnion, Data = never> {
    resolve: (context: PromptAnswer<Event, Data>) => void;
    event?: Event;
    validate?: ValidateFunction<Event, Data>;
    transform?: TransformFunction<Event, Data>;
    sendParams?: Optional<SendMessageParams, "chat_id" | "text">;
    text?: string;
}
interface PromptFunctionParams<Event extends EventsUnion, Data> extends Optional<SendMessageParams, "chat_id" | "text"> {
    validate?: ValidateFunction<Event, Data>;
    transform?: TransformFunction<Event, Data>;
}
interface PromptFunction {
    /** Send message and wait answer */
    <Data = never>(text: Stringable, params?: PromptFunctionParams<EventsUnion, Data>): Promise<PromptAnswer<EventsUnion, Data>>;
    /** Send message and wait answer ignoring events not listed */
    <Event extends EventsUnion, Data = never>(event: Event, text: Stringable, params?: PromptFunctionParams<Event, Data>): Promise<PromptAnswer<Event, Data>>;
}
interface WaitFunction {
    /** Wait for the next event from the user */
    <Data = never>(): Promise<PromptAnswer<EventsUnion, Data>>;
    /** Wait for the next event from the user ignoring events not listed */
    <Event extends EventsUnion, Data = never>(event: Event): Promise<PromptAnswer<Event, Data>>;
    /** Wait for the next event from the user ignoring non validated answers */
    <Data = never>(validate: ValidateFunction<EventsUnion, Data>): Promise<PromptAnswer<EventsUnion, Data>>;
    /** Wait for the next event from the user ignoring non validated answers and not listed events with transformer */
    <Event extends EventsUnion, Data = never>(event: Event, options: {
        validate?: ValidateFunction<Event, Data>;
        transform?: TransformFunction<Event, Data>;
    }): Promise<PromptAnswer<Event, Data>>;
    /** Wait for the next event from the user ignoring non validated answers and not listed events */
    <Event extends EventsUnion, Data = never>(event: Event, validate: ValidateFunction<Event, Data>): Promise<PromptAnswer<Event, Data>>;
}

/**
 * Prompt plugin
 * @example
 * ```ts
 * import { Bot, format, bold } from "gramio";
 * import { prompt } from "@gramio/prompt";
 *
 * const bot = new Bot(process.env.token!)
 *     .extend(prompt())
 *     .command("start", async (context) => {
 *         const answer = await context.prompt(
 *             "message",
 *             format`What's your ${bold`name`}?`
 *         );
 *
 *         return context.send(`✨ Your name is ${answer.text}`);
 *     })
 *     .onStart(console.log);
 *
 * bot.start();
 * ```
 */
declare function prompt(map?: PromptsType): Plugin<{}, gramio.DeriveDefinitions & {
    message: {
        /**
         * @example
         * ```ts
         * import { Bot, format, bold } from "gramio";
         * import { prompt } from "@gramio/prompt";
         *
         * const bot = new Bot(process.env.token!)
         *     .extend(prompt())
         *     .command("start", async (context) => {
         *         const answer = await context.prompt(
         *             "message",
         *             format`What's your ${bold`name`}?`
         *         );
         *
         *         return context.send(`✨ Your name is ${answer.text}`);
         *     })
         *     .onStart(console.log);
         *
         * bot.start();
         * ```
         */
        readonly prompt: PromptFunction;
        /**
         * Wait for the next event from the user
         *
         * @example
         * ```ts
         * .command("start", async (context) => {
         *         const answer = await context.wait();
         *
         *         return context.send(`✨ Next message after /start command is ${answer.text}`);
         * })
         * ```
         *  */
        readonly wait: WaitFunction;
    };
    edited_message: {
        /**
         * @example
         * ```ts
         * import { Bot, format, bold } from "gramio";
         * import { prompt } from "@gramio/prompt";
         *
         * const bot = new Bot(process.env.token!)
         *     .extend(prompt())
         *     .command("start", async (context) => {
         *         const answer = await context.prompt(
         *             "message",
         *             format`What's your ${bold`name`}?`
         *         );
         *
         *         return context.send(`✨ Your name is ${answer.text}`);
         *     })
         *     .onStart(console.log);
         *
         * bot.start();
         * ```
         */
        readonly prompt: PromptFunction;
        /**
         * Wait for the next event from the user
         *
         * @example
         * ```ts
         * .command("start", async (context) => {
         *         const answer = await context.wait();
         *
         *         return context.send(`✨ Next message after /start command is ${answer.text}`);
         * })
         * ```
         *  */
        readonly wait: WaitFunction;
    };
    channel_post: {
        /**
         * @example
         * ```ts
         * import { Bot, format, bold } from "gramio";
         * import { prompt } from "@gramio/prompt";
         *
         * const bot = new Bot(process.env.token!)
         *     .extend(prompt())
         *     .command("start", async (context) => {
         *         const answer = await context.prompt(
         *             "message",
         *             format`What's your ${bold`name`}?`
         *         );
         *
         *         return context.send(`✨ Your name is ${answer.text}`);
         *     })
         *     .onStart(console.log);
         *
         * bot.start();
         * ```
         */
        readonly prompt: PromptFunction;
        /**
         * Wait for the next event from the user
         *
         * @example
         * ```ts
         * .command("start", async (context) => {
         *         const answer = await context.wait();
         *
         *         return context.send(`✨ Next message after /start command is ${answer.text}`);
         * })
         * ```
         *  */
        readonly wait: WaitFunction;
    };
    edited_channel_post: {
        /**
         * @example
         * ```ts
         * import { Bot, format, bold } from "gramio";
         * import { prompt } from "@gramio/prompt";
         *
         * const bot = new Bot(process.env.token!)
         *     .extend(prompt())
         *     .command("start", async (context) => {
         *         const answer = await context.prompt(
         *             "message",
         *             format`What's your ${bold`name`}?`
         *         );
         *
         *         return context.send(`✨ Your name is ${answer.text}`);
         *     })
         *     .onStart(console.log);
         *
         * bot.start();
         * ```
         */
        readonly prompt: PromptFunction;
        /**
         * Wait for the next event from the user
         *
         * @example
         * ```ts
         * .command("start", async (context) => {
         *         const answer = await context.wait();
         *
         *         return context.send(`✨ Next message after /start command is ${answer.text}`);
         * })
         * ```
         *  */
        readonly wait: WaitFunction;
    };
    callback_query: {
        /**
         * @example
         * ```ts
         * import { Bot, format, bold } from "gramio";
         * import { prompt } from "@gramio/prompt";
         *
         * const bot = new Bot(process.env.token!)
         *     .extend(prompt())
         *     .command("start", async (context) => {
         *         const answer = await context.prompt(
         *             "message",
         *             format`What's your ${bold`name`}?`
         *         );
         *
         *         return context.send(`✨ Your name is ${answer.text}`);
         *     })
         *     .onStart(console.log);
         *
         * bot.start();
         * ```
         */
        readonly prompt: PromptFunction;
        /**
         * Wait for the next event from the user
         *
         * @example
         * ```ts
         * .command("start", async (context) => {
         *         const answer = await context.wait();
         *
         *         return context.send(`✨ Next message after /start command is ${answer.text}`);
         * })
         * ```
         *  */
        readonly wait: WaitFunction;
    };
}>;

export { prompt };
