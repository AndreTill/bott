import { Plugin } from 'gramio';

const events = [
  "message",
  "edited_message",
  "channel_post",
  "edited_channel_post",
  "callback_query"
];
function isEvent(maybeEvent) {
  return events.includes(maybeEvent.toString());
}
function getPrompt(prompts, id, context) {
  async function prompt(eventOrText, textOrParams, params) {
    const { validate, transform, ...sendParams } = params || (typeof textOrParams === "object" && !("toString" in textOrParams) ? textOrParams : {});
    const text = isEvent(eventOrText) && (typeof textOrParams === "string" || textOrParams && typeof textOrParams !== "string" && "toString" in textOrParams) ? textOrParams : eventOrText;
    await context.send(text, sendParams);
    return new Promise((resolve) => {
      prompts.set(id, {
        // @ts-expect-error
        resolve,
        event: isEvent(eventOrText) ? eventOrText : void 0,
        validate,
        // @ts-expect-error
        transform,
        sendParams,
        text: text.toString()
      });
    });
  }
  return prompt;
}
function getWait(prompts, id) {
  async function wait(eventOrValidate, validateOrOptions) {
    return new Promise((resolve) => {
      prompts.set(id, {
        // @ts-expect-error
        resolve,
        event: eventOrValidate && isEvent(eventOrValidate) ? eventOrValidate : void 0,
        validate: typeof eventOrValidate === "function" ? eventOrValidate : typeof validateOrOptions === "object" ? validateOrOptions.validate : void 0,
        // @ts-expect-error
        transform: typeof validateOrOptions === "object" ? validateOrOptions.transform : void 0
      });
    });
  }
  return wait;
}

function prompt(map) {
  const prompts = map ?? /* @__PURE__ */ new Map();
  return new Plugin("@gramio/prompt").derive(
    [
      "message",
      "edited_message",
      "channel_post",
      "edited_channel_post",
      "callback_query"
    ],
    (context) => {
      const id = context.senderId || 0;
      return {
        /**
         * Send message and wait answer
         * @example
         * ```ts
         * import { Bot, format, bold } from "gramio";
         * import { prompt } from "@gramio/prompt";
         *
         * const bot = new Bot(process.env.token!)
         *     .extend(prompt())
         *     .command("start", async (context) => {
         *         const answer = await context.prompt(
         *             "message",
         *             format`What's your ${bold`name`}?`
         *         );
         *
         *         return context.send(`✨ Your name is ${answer.text}`);
         *     })
         *     .onStart(console.log);
         *
         * bot.start();
         * ```
         */
        // @ts-expect-error
        prompt: getPrompt(prompts, id, context),
        /**
         * Wait for the next event from the user
         *
         * @example
         * ```ts
         * .command("start", async (context) => {
         *         const answer = await context.wait();
         *
         *         return context.send(`✨ Next message after /start command is ${answer.text}`);
         * })
         * ```
         *  */
        wait: getWait(prompts, id)
      };
    }
  ).on(
    [
      "message",
      "edited_message",
      "channel_post",
      "edited_channel_post",
      "callback_query"
    ],
    async (context, next) => {
      const id = context.senderId || 0;
      const prompt2 = prompts.get(id);
      if (prompt2) {
        if (prompt2?.event && !context.is(prompt2.event)) return next();
        if (prompt2.validate && !await prompt2.validate(context)) {
          if (prompt2.text)
            return context.send(prompt2.text, prompt2.sendParams);
          return;
        }
        prompt2.resolve(
          // @ts-expect-error
          prompt2.transform ? prompt2.transform(context) : context
        );
        return prompts.delete(id);
      }
      next();
    }
  );
}

export { prompt };
