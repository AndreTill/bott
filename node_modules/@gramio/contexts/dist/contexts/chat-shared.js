"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatSharedContext = void 0;
const tslib_1 = require("tslib");
const index_1 = require("../structures/index");
const utils_1 = require("../utils");
const inspectable_1 = require("inspectable");
const context_1 = require("./context");
const index_2 = require("./mixins/index");
/** This object contains information about the chat whose identifier was shared with the bot using a `KeyboardButtonRequestChat` button. */
let ChatSharedContext = (() => {
    let _classSuper = context_1.Context;
    let _instanceExtraInitializers = [];
    let _get_requestId_decorators;
    let _get_sharedChatId_decorators;
    let _get_title_decorators;
    let _get_username_decorators;
    let _get_photo_decorators;
    return class ChatSharedContext extends _classSuper {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _get_requestId_decorators = [(0, inspectable_1.Inspect)()];
            _get_sharedChatId_decorators = [(0, inspectable_1.Inspect)()];
            _get_title_decorators = [(0, inspectable_1.Inspect)()];
            _get_username_decorators = [(0, inspectable_1.Inspect)()];
            _get_photo_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_requestId_decorators, { kind: "getter", name: "requestId", static: false, private: false, access: { has: obj => "requestId" in obj, get: obj => obj.requestId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_sharedChatId_decorators, { kind: "getter", name: "sharedChatId", static: false, private: false, access: { has: obj => "sharedChatId" in obj, get: obj => obj.sharedChatId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_title_decorators, { kind: "getter", name: "title", static: false, private: false, access: { has: obj => "title" in obj, get: obj => obj.title }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_username_decorators, { kind: "getter", name: "username", static: false, private: false, access: { has: obj => "username" in obj, get: obj => obj.username }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_photo_decorators, { kind: "getter", name: "photo", static: false, private: false, access: { has: obj => "photo" in obj, get: obj => obj.photo }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        /** The raw data that is used for this Context */
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        event;
        constructor(options) {
            super({
                bot: options.bot,
                updateType: "chat_shared",
                updateId: options.updateId,
                update: options.update,
            });
            this.payload = options.payload;
            this.event = this.payload.chat_shared;
        }
        /** Identifier of the request */
        get requestId() {
            return this.event.request_id;
        }
        /** Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means. */
        get sharedChatId() {
            return this.event.chat_id;
        }
        /** Title of the chat, if the title was requested by the bot. */
        get title() {
            return this.event.title;
        }
        /** Username of the chat, if the username was requested by the bot and available. */
        get username() {
            return this.event.username;
        }
        /** Available sizes of the chat photo, if the photo was requested by the bot. */
        get photo() {
            return this.event.photo?.map((size) => new index_1.PhotoSize(size));
        }
    };
})();
exports.ChatSharedContext = ChatSharedContext;
(0, utils_1.applyMixins)(ChatSharedContext, [
    index_1.Message,
    index_2.TargetMixin,
    index_2.SendMixin,
    index_2.ChatActionMixin,
    index_2.NodeMixin,
    index_2.PinsMixin,
    index_2.CloneMixin,
]);
(0, inspectable_1.inspectable)(ChatSharedContext, {
    serialize(context) {
        return {
            requestId: context.requestId,
            sharedChatId: context.sharedChatId,
        };
    },
});
