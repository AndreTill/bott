"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChosenInlineResultContext = void 0;
const inspectable_1 = require("inspectable");
const index_1 = require("../structures/index");
const utils_1 = require("../utils");
const context_1 = require("./context");
const index_2 = require("./mixins/index");
/**
 * The result of an inline query that was chosen by
 * a user and sent to their chat partner
 */
class ChosenInlineResultContext extends context_1.Context {
    /** The raw data that is used for this Context */
    payload;
    constructor(options) {
        super({
            bot: options.bot,
            updateType: "chosen_inline_result",
            updateId: options.updateId,
            update: options.update,
        });
        this.payload = options.payload;
    }
    /** Checks if the result has `location` property */
    hasLocation() {
        return this.location !== undefined;
    }
    /** Checks if the query has `inlineMessageId` property */
    hasInlineMessageId() {
        return this.inlineMessageId !== undefined;
    }
    /** Edits a callback query messages text */
    editText(text, params = {}) {
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without an `inlineMessageId` property");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageText({
            inline_message_id: this.inlineMessageId,
            text,
            ...params,
        });
    }
    /** Edits a callback query messages caption */
    editCaption(caption, params = {}) {
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without an `inlineMessageId` property");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageCaption({
            inline_message_id: this.inlineMessageId,
            caption,
            ...params,
        });
    }
    /** Edits a callback query messages media */
    editMedia(media, params = {}) {
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without an `inlineMessageId` property");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageMedia({
            inline_message_id: this.inlineMessageId,
            media,
            ...params,
        });
    }
    /** Edits a callback query messages live location */
    editLiveLocation(params) {
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without an `inlineMessageId` property");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageLiveLocation({
            inline_message_id: this.inlineMessageId,
            ...params,
        });
    }
    /** Stops a callback query messages live location */
    stopLiveLocation(params) {
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without an `inlineMessageId` property");
        }
        return this.bot.api.stopMessageLiveLocation({
            inline_message_id: this.inlineMessageId,
            ...params,
        });
    }
    /** Edits a callback query messages reply markup */
    editReplyMarkup(replyMarkup, params = {}) {
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without an `inlineMessageId` property");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageReplyMarkup({
            inline_message_id: this.inlineMessageId,
            reply_markup: replyMarkup,
            ...params,
        });
    }
}
exports.ChosenInlineResultContext = ChosenInlineResultContext;
(0, utils_1.applyMixins)(ChosenInlineResultContext, [
    index_1.ChosenInlineResult,
    index_2.SendMixin,
    index_2.ChatActionMixin,
    index_2.CloneMixin,
]);
(0, inspectable_1.inspectable)(ChosenInlineResultContext, {
    serialize(result) {
        const payload = {
            resultId: result.resultId,
            from: result.from,
            senderId: result.senderId,
            location: result.location,
            inlineMessageId: result.inlineMessageId,
            query: result.query,
        };
        return (0, utils_1.filterPayload)(payload);
    },
});
