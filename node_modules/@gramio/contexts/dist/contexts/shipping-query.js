"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShippingQueryContext = void 0;
const inspectable_1 = require("inspectable");
const index_1 = require("../structures/index");
const utils_1 = require("../utils");
const context_1 = require("./context");
const index_2 = require("./mixins/index");
/**
 * This object contains information about an incoming shipping query.
 *
 * [Documentation](https://core.telegram.org/bots/api/#shippingquery)
 */
class ShippingQueryContext extends context_1.Context {
    /** The raw data that is used for this Context */
    payload;
    constructor(options) {
        super({
            bot: options.bot,
            updateType: "shipping_query",
            updateId: options.updateId,
            update: options.update,
        });
        this.payload = options.payload;
    }
    /** Replies to shipping queries */
    answerShippingQuery(ok = true, params) {
        return this.bot.api.answerShippingQuery({
            shipping_query_id: this.id,
            ok,
            ...params,
        });
    }
    /** Replies to shipping queries. An alias for `answerShippingQuery` */
    answer(ok = true, params) {
        return this.answerShippingQuery(ok, params);
    }
}
exports.ShippingQueryContext = ShippingQueryContext;
(0, utils_1.applyMixins)(ShippingQueryContext, [
    index_1.ShippingQuery,
    index_2.SendMixin,
    index_2.ChatActionMixin,
    index_2.CloneMixin,
]);
(0, inspectable_1.inspectable)(ShippingQueryContext, {
    serialize(context) {
        const payload = {
            id: context.id,
            from: context.from,
            senderId: context.senderId,
            invoicePayload: context.invoicePayload,
            shippingAddress: context.shippingAddress,
        };
        return (0, utils_1.filterPayload)(payload);
    },
});
