import type { TelegramMessage } from "@gramio/types";
import { Chat, User } from "../../structures/index";
import { ChatType, type Require, type RequireValue } from "../../types";
/** This object represents a mixin which has sender data (e.g. `senderId`, `from` etc.) */
declare class TargetMixin {
    payload: Record<string, any>;
    /** Checks if the instance has `from` and `senderId` properties */
    hasFrom(): this is Require<this, "from" | "senderId">;
    /** Sender, empty for messages sent to channels */
    get from(): User | undefined;
    /** Checks if the instance has `senderChat` property */
    hasSenderChat(): this is Require<this, "senderChat">;
    /**
     * Sender of the message, sent on behalf of a chat.
     * The channel itself for channel messages.
     * The supergroup itself for messages from anonymous group administrators.
     * The linked channel for messages automatically forwarded to the discussion group
     */
    get senderChat(): Chat | undefined;
    /**
     * *Optional*. If the sender of the message boosted the chat, the number of boosts added by the user
     */
    get senderBoostCount(): TelegramMessage["sender_boost_count"];
    /** Conversation the message belongs to */
    get chat(): Chat;
    /** Sender's ID */
    get senderId(): number | undefined;
    /** Chat ID */
    get chatId(): number;
    /** Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier. */
    get businessConnectionId(): string | undefined;
    /** Chat type */
    get chatType(): import("@gramio/types").TelegramChatType;
    /** Is this chat a private one? */
    isPM(): this is RequireValue<this, "chatType", ChatType.Private>;
    /** Is this chat a group? */
    isGroup(): this is RequireValue<this, "chatType", ChatType.Group>;
    /** Is this chat a supergroup? */
    isSupergroup(): this is RequireValue<this, "chatType", ChatType.Supergroup>;
    /** Is this chat a channel? */
    isChannel(): this is RequireValue<this, "chatType", ChatType.Channel>;
}
export { TargetMixin };
