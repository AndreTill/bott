import type { TelegramParams } from "@gramio/types";
import type { Optional } from "../../types";
import type { Context } from "../context";
import type { BotLike } from "../../types";
import type { SendMixin } from "./send";
export declare function sleep(ms: number): Promise<unknown>;
interface CreateActionControllerParams {
    /**
     * Interval between `sendChatAction` calls, in milliseconds
     * @default 5000
     */
    interval?: number;
    /**
     * Initial wait before the first cycle of `sendChatAction` calls, in milliseconds
     * @default 0
     */
    wait?: number;
    /**
     * Timeout for `sendChatAction` calls, in milliseconds. `0` to disable
     * @default 0
     */
    timeout?: number;
}
interface ControllerOptions<Bot extends BotLike> {
    action: TelegramParams.SendChatActionParams["action"];
    params: Optional<TelegramParams.SendChatActionParams, "chat_id" | "action"> & CreateActionControllerParams;
    context: Context<Bot> & SendMixin<Bot>;
}
/**
 * This object represent ChatAction mixin
 *
 * @example
 * ```typescript
 * bot.on("message", (context) => {
 * 		const controller = context.createActionController('typing');
 *
 *		controller.start();
 *
 *		await sleep(10_000)
 *
 *		controller.stop();
 *
 *		return context.send("soo sleepy...")
 * });
 * ```
 *
 *  */
declare class ChatActionController<Bot extends BotLike> {
    private abortController;
    action: TelegramParams.SendChatActionParams["action"];
    interval: number;
    wait: number;
    timeout: number;
    private context;
    constructor(options: ControllerOptions<Bot>);
    started: boolean;
    /** Starts the `sendChatAction(action)` loop until `stop()` is called */
    start(): void;
    /** Stops the loop */
    stop(): void;
}
declare class ChatActionMixin<Bot extends BotLike> {
    /** Creates a controller that when `start()`ed executes `sendChatAction(action)` every `interval` milliseconds until `stop()`ped */
    createActionController(action: TelegramParams.SendChatActionParams["action"], params?: Optional<TelegramParams.SendChatActionParams, "chat_id" | "action"> & CreateActionControllerParams): ChatActionController<Bot>;
}
interface ChatActionMixin<Bot extends BotLike> extends Context<Bot>, SendMixin<Bot> {
}
export { ChatActionMixin };
