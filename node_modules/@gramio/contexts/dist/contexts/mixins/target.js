"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetMixin = void 0;
const index_1 = require("../../structures/index");
const types_1 = require("../../types");
const utils_1 = require("../../utils");
/** This object represents a mixin which has sender data (e.g. `senderId`, `from` etc.) */
class TargetMixin {
    // biome-ignore lint/suspicious/noExplicitAny: <explanation>
    payload;
    /** Checks if the instance has `from` and `senderId` properties */
    hasFrom() {
        return this.payload.from !== undefined;
    }
    /** Sender, empty for messages sent to channels */
    get from() {
        const { from } = this.payload;
        if (!from)
            return undefined;
        return new index_1.User(from);
    }
    /** Checks if the instance has `senderChat` property */
    hasSenderChat() {
        return this.payload.sender_chat !== undefined;
    }
    /**
     * Sender of the message, sent on behalf of a chat.
     * The channel itself for channel messages.
     * The supergroup itself for messages from anonymous group administrators.
     * The linked channel for messages automatically forwarded to the discussion group
     */
    get senderChat() {
        const { sender_chat } = this.payload;
        if (!sender_chat)
            return undefined;
        return new index_1.Chat(sender_chat);
    }
    /**
     * *Optional*. If the sender of the message boosted the chat, the number of boosts added by the user
     */
    get senderBoostCount() {
        return this.payload
            .sender_boost_count;
    }
    /** Conversation the message belongs to */
    get chat() {
        return new index_1.Chat(this.payload.chat);
    }
    /** Sender's ID */
    get senderId() {
        return this.from?.id;
    }
    /** Chat ID */
    get chatId() {
        return this.chat.id;
    }
    /** Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier. */
    get businessConnectionId() {
        return this.payload.business_connection_id;
    }
    /** Chat type */
    get chatType() {
        return this.chat.type;
    }
    /** Is this chat a private one? */
    isPM() {
        return this.chatType === types_1.ChatType.Private;
    }
    /** Is this chat a group? */
    isGroup() {
        return this.chatType === types_1.ChatType.Group;
    }
    /** Is this chat a supergroup? */
    isSupergroup() {
        return this.chatType === types_1.ChatType.Supergroup;
    }
    /** Is this chat a channel? */
    isChannel() {
        return this.chatType === types_1.ChatType.Channel;
    }
}
exports.TargetMixin = TargetMixin;
(0, utils_1.memoizeGetters)(TargetMixin, ["from", "senderChat", "chat"]);
