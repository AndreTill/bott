import type { TelegramParams } from "@gramio/types";
import { Poll } from "../../structures/index";
import type { Optional, tSendMethods } from "../../types";
import type { BotLike } from "../../types";
import type { Context } from "../context";
import { MessageContext } from "../message";
interface SendMixinMetadata {
    get chatId(): number;
    get businessConnectionId(): string | undefined;
    get senderId(): number | undefined;
    get threadId(): number | undefined;
    isTopicMessage: () => boolean | undefined;
}
/** This object represents a mixin which can invoke `chatId`/`senderId`-dependent methods */
declare class SendMixin<Bot extends BotLike> {
    /** Sends message to current chat */
    send(text: TelegramParams.SendMessageParams["text"], params?: Optional<TelegramParams.SendMessageParams, "chat_id" | "text">): Promise<MessageContext<Bot>>;
    /** Sends photo to current chat */
    sendPhoto(photo: TelegramParams.SendPhotoParams["photo"], params?: Optional<TelegramParams.SendPhotoParams, "chat_id" | "photo">): Promise<MessageContext<Bot>>;
    /** Sends document to current chat */
    sendDocument(document: TelegramParams.SendDocumentParams["document"], params?: Optional<TelegramParams.SendDocumentParams, "chat_id" | "document">): Promise<MessageContext<Bot>>;
    /** Sends audio to current chat */
    sendAudio(audio: TelegramParams.SendAudioParams["audio"], params?: Optional<TelegramParams.SendAudioParams, "chat_id" | "audio">): Promise<MessageContext<Bot>>;
    /** Sends video to current chat */
    sendVideo(video: TelegramParams.SendVideoParams["video"], params?: Optional<TelegramParams.SendVideoParams, "chat_id" | "video">): Promise<MessageContext<Bot>>;
    /** Sends animation to current chat */
    sendAnimation(animation: TelegramParams.SendAnimationParams["animation"], params?: Optional<TelegramParams.SendAnimationParams, "chat_id" | "animation">): Promise<MessageContext<Bot>>;
    /** Sends video note to current chat */
    sendVideoNote(videoNote: TelegramParams.SendVideoNoteParams["video_note"], params?: Optional<TelegramParams.SendVideoNoteParams, "chat_id" | "video_note">): Promise<MessageContext<Bot>>;
    /** Sends voice to current chat */
    sendVoice(voice: TelegramParams.SendVoiceParams["voice"], params?: Optional<TelegramParams.SendVoiceParams, "chat_id" | "voice">): Promise<MessageContext<Bot>>;
    /** Sends location to current chat */
    sendLocation(latitude: number, longitude: number, params?: Optional<TelegramParams.SendLocationParams, "chat_id" | "latitude" | "longitude">): Promise<MessageContext<Bot>>;
    /** Sends invoice to current user */
    sendInvoice(params: Optional<TelegramParams.SendInvoiceParams, "chat_id">): Promise<MessageContext<Bot>>;
    /** Sends venue to current chat */
    sendVenue(params: Optional<TelegramParams.SendVenueParams, "chat_id">): Promise<MessageContext<Bot>>;
    /** Sends contact to current chat */
    sendContact(params: Optional<TelegramParams.SendContactParams, "chat_id">): Promise<MessageContext<Bot>>;
    /** Sends poll to current chat */
    sendPoll(params: Optional<TelegramParams.SendPollParams, "chat_id">): Promise<MessageContext<Bot>>;
    /** Sends sticker */
    sendSticker(sticker: TelegramParams.SendStickerParams["sticker"], params?: Optional<TelegramParams.SendStickerParams, "sticker" | "chat_id">): Promise<MessageContext<Bot>>;
    /** Stops poll in current chat */
    stopPoll(messageId: number, params?: Partial<TelegramParams.StopPollParams>): Promise<Poll>;
    /** Sends chat action to current chat */
    sendChatAction(action: TelegramParams.SendChatActionParams["action"], params?: Optional<TelegramParams.SendChatActionParams, "chat_id" | "action">): Promise<true>;
    /** Sends dice */
    sendDice(emoji: TelegramParams.SendDiceParams["emoji"], params?: Partial<TelegramParams.SendDiceParams>): Promise<MessageContext<Bot>>;
    /** Sends media group to current chat */
    sendMediaGroup(mediaGroup: TelegramParams.SendMediaGroupParams["media"], params?: Optional<TelegramParams.SendMediaGroupParams, "chat_id" | "media">): Promise<MessageContext<Bot>[]>;
    /**
     * Automatically uses correct media method to send media
     *
     * @example
     * ```js
     * context.sendMedia({
     *   type: 'photo',
     *   photo: MediaUpload.path('./image.png'),
     *   caption: 'good image yes yes'
     * })
     * ```
     */
    sendMedia<T extends string>(query: {
        type: T;
    } & tSendMethods): ReturnType<T extends "animation" ? typeof this.sendAnimation : T extends "audio" ? typeof this.sendAudio : T extends "document" ? typeof this.sendDocument : T extends "photo" ? typeof this.sendPhoto : T extends "sticker" ? typeof this.sendSticker : T extends "video_note" ? typeof this.sendVideoNote : T extends "video" ? typeof this.sendVideo : T extends "voice" ? typeof this.sendVoice : () => never>;
    /** Returns chat boosts by the user */
    getChatBoosts(userId: number): Promise<import("@gramio/types").TelegramUserChatBoosts>;
}
interface SendMixin<Bot extends BotLike> extends Context<Bot>, SendMixinMetadata {
}
export { SendMixin };
