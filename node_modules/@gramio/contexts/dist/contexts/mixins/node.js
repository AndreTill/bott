"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeMixin = void 0;
const index_1 = require("../../structures/index");
const message_1 = require("../message");
/** This object represents a mixin which has `id` field and can invoke `id`-dependent methods */
class NodeMixin {
    /** Replies to current message */
    reply(text, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.send(text, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with photo */
    replyWithPhoto(photo, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendPhoto(photo, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with document */
    replyWithDocument(document, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendDocument(document, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with audio */
    replyWithAudio(audio, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendAudio(audio, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with video */
    replyWithVideo(video, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendVideo(video, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with animation */
    replyWithAnimation(animation, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendAnimation(animation, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with video note */
    replyWithVideoNote(videoNote, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendVideoNote(videoNote, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with voice */
    replyWithVoice(voice, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendVoice(voice, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with media group */
    replyWithMediaGroup(mediaGroup, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendMediaGroup(mediaGroup, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with location */
    replyWithLocation(latitude, longitude, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendLocation(latitude, longitude, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with invoice */
    // TODO:
    replyWithInvoice(params) {
        const { reply_parameters, ...rest } = params;
        return this.sendInvoice({
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with venue */
    replyWithVenue(params) {
        const { reply_parameters, ...rest } = params;
        return this.sendVenue({
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with contact */
    replyWithContact(params) {
        const { reply_parameters, ...rest } = params;
        return this.sendContact({
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with poll */
    replyWithPoll(params) {
        const { reply_parameters, ...rest } = params;
        return this.sendPoll({
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with sticker */
    replyWithSticker(sticker, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendSticker(sticker, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a dice */
    replyWithDice(emoji, params = {}) {
        const { reply_parameters, ...rest } = params;
        return this.sendDice(emoji, {
            reply_parameters: {
                message_id: this.id,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote */
    replyWithQuote(params) {
        const { text, quote, reply_parameters, ...rest } = params;
        return this.reply(text, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a photo */
    quoteWithPhoto(params) {
        const { photo, quote, reply_parameters, ...rest } = params;
        return this.replyWithPhoto(photo, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a document */
    quoteWithDocument(params) {
        const { document, quote, reply_parameters, ...rest } = params;
        return this.replyWithDocument(document, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and an audio */
    quoteWithAudio(params) {
        const { audio, quote, reply_parameters, ...rest } = params;
        return this.replyWithAudio(audio, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a video */
    quoteWithVideo(params) {
        const { video, quote, reply_parameters, ...rest } = params;
        return this.replyWithVideo(video, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and an animation */
    quoteWithAnimation(params) {
        const { animation, quote, reply_parameters, ...rest } = params;
        return this.replyWithAnimation(animation, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a video note */
    quoteWithVideoNote(params) {
        const { videoNote, quote, reply_parameters, ...rest } = params;
        return this.replyWithVideoNote(videoNote, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a voice */
    quoteWithVoice(params) {
        const { voice, quote, reply_parameters, ...rest } = params;
        return this.replyWithVoice(voice, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a media group */
    quoteWithMediaGroup(params) {
        const { mediaGroup, quote, reply_parameters, ...rest } = params;
        return this.replyWithMediaGroup(mediaGroup, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a location */
    quoteWithLocation(params) {
        const { latitude, longitude, quote, reply_parameters, ...rest } = params;
        return this.replyWithLocation(latitude, longitude, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and an invoice */
    quoteWithInvoice(params) {
        const { quote, reply_parameters, ...rest } = params;
        return this.replyWithInvoice({
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a venue */
    quoteWithVenue(params) {
        const { quote, reply_parameters, ...rest } = params;
        return this.replyWithVenue({
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a contact */
    quoteWithContact(params) {
        const { quote, reply_parameters, ...rest } = params;
        return this.replyWithContact({
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a poll */
    quoteWithPoll(params) {
        const { quote, reply_parameters, ...rest } = params;
        return this.replyWithPoll({
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a sticker */
    quoteWithSticker(params) {
        const { sticker, quote, reply_parameters, ...rest } = params;
        return this.replyWithSticker(sticker, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Replies to current message with a quote and a dice */
    quoteWithDice(params) {
        const { emoji, quote, reply_parameters, ...rest } = params;
        return this.replyWithDice(emoji, {
            reply_parameters: {
                message_id: this.id,
                quote,
                ...reply_parameters,
            },
            ...rest,
        });
    }
    /** Deletes current message */
    delete(params = {}) {
        return this.bot.api.deleteMessage({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            ...params,
        });
    }
    /** Deletes messages in current chat */
    deleteMessages(ids) {
        return this.bot.api.deleteMessages({
            chat_id: this.chatId || this.senderId || 0,
            message_ids: ids,
        });
    }
    /** Edits current message live location */
    async editMessageLiveLocation(params) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        const response = await this.bot.api.editMessageLiveLocation({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            ...params,
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Edits current message live location. An alias for `editMessageLiveLocation` */
    editLiveLocation(params) {
        return this.editMessageLiveLocation(params);
    }
    /** Stops current message live location */
    async stopMessageLiveLocation(params) {
        const response = await this.bot.api.stopMessageLiveLocation({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            ...params,
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Stops current message live location. An alias for `stopMessageLiveLocation` */
    stopLiveLocation(params) {
        return this.stopMessageLiveLocation(params);
    }
    /** Edits current message text */
    async editMessageText(text, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        const response = await this.bot.api.editMessageText({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            text,
            ...params,
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Edits current message text. An alias for `editMessageText` */
    editText(text, params) {
        return this.editMessageText(text, params);
    }
    /** Edits current message caption */
    async editMessageCaption(caption, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        const response = await this.bot.api.editMessageCaption({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            caption,
            ...params,
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Edits current message caption. An alias for `editMessageCaption` */
    editCaption(caption, params) {
        return this.editMessageCaption(caption, params);
    }
    /** Edits current message media */
    async editMessageMedia(media, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        const response = await this.bot.api.editMessageMedia({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            media,
            ...params,
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Edits current message media. An alias for `editMessageMedia` */
    editMedia(media, params) {
        return this.editMessageMedia(media, params);
    }
    /** Edits current message reply markup */
    async editMessageReplyMarkup(replyMarkup, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        const response = await this.bot.api.editMessageReplyMarkup({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            reply_markup: replyMarkup,
            ...params,
        });
        if (response === true) {
            return true;
        }
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Edits current message reply markup. An alias for `editMessageReplyMarkup` */
    editReplyMarkup(replyMarkup, params) {
        return this.editMessageReplyMarkup(replyMarkup, params);
    }
    /** Copies current message [into other chat if `chatId` is provided] */
    async copy(params = {}) {
        const response = await this.bot.api.copyMessage({
            chat_id: this.chatId || this.senderId || 0,
            from_chat_id: this.chatId || 0,
            message_id: this.id,
            ...params,
        });
        return new index_1.MessageId(response);
    }
    /** Copies messages from current chat and sends to another */
    async copyMessages(chatId, ids, params = {}) {
        const response = await this.bot.api.copyMessages({
            chat_id: chatId,
            from_chat_id: this.chatId || this.senderId || 0,
            message_ids: ids,
            ...params,
        });
        return response.map((x) => new index_1.MessageId(x));
    }
    /** Forwards current message [into other chat if `chatId` is provided] */
    async forward(params = {}) {
        const response = await this.bot.api.forwardMessage({
            chat_id: this.chatId || this.senderId || 0,
            from_chat_id: this.chatId || 0,
            message_id: this.id,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Forwards messages from current chat to another */
    async forwardMessages(chatId, ids, params = {}) {
        const messages = await this.bot.api.forwardMessages({
            chat_id: chatId,
            from_chat_id: this.chatId || this.senderId || 0,
            message_ids: ids,
            ...params,
        });
        return messages.map((x) => new index_1.MessageId(x));
    }
    /** Sets a reaction on a message */
    setReaction(reaction, params = {}) {
        return this.bot.api.setMessageReaction({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            reaction: [
                typeof reaction === "string"
                    ? {
                        type: "emoji",
                        emoji: reaction,
                    }
                    : reaction,
            ],
            ...params,
        });
    }
    /** Sets multiple amount of reactions on a message */
    setReactions(rawReactions, params = {}) {
        const reactions = rawReactions.map((r) => typeof r === "string"
            ? {
                type: "emoji",
                emoji: r,
            }
            : r);
        return this.bot.api.setMessageReaction({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            reaction: reactions,
            ...params,
        });
    }
    /** Reacts to a message */
    react(rawReactions, params = {}) {
        const reactions = (Array.isArray(rawReactions) ? rawReactions : [rawReactions]).map((r) => typeof r === "string"
            ? {
                type: "emoji",
                emoji: r,
            }
            : r);
        return this.bot.api.setMessageReaction({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            reaction: reactions,
            ...params,
        });
    }
    /** Clears reactions from the message */
    clearReactions(params = {}) {
        return this.bot.api.setMessageReaction({
            chat_id: this.chatId || this.senderId || 0,
            message_id: this.id,
            ...params,
        });
    }
}
exports.NodeMixin = NodeMixin;
