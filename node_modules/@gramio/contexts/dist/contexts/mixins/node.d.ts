import type { TelegramParams } from "@gramio/types";
import type { TelegramObjects } from "@gramio/types";
import { MessageId } from "../../structures/index";
import type { MaybeArray, Optional } from "../../types";
import type { BotLike } from "../../types";
import type { Context } from "../context";
import { MessageContext } from "../message";
import type { SendMixin } from "./send";
interface NodeMixinMetadata {
    get id(): number;
}
/** Construct a type that has `reply_parameters` `Partial` */
type WithPartialReplyParameters<T> = T & {
    reply_parameters?: Partial<TelegramObjects.TelegramReplyParameters>;
};
type WithQuote<T = {}> = {
    quote: string;
} & T;
/** This object represents a mixin which has `id` field and can invoke `id`-dependent methods */
declare class NodeMixin<Bot extends BotLike> {
    /** Replies to current message */
    reply(text: TelegramParams.SendMessageParams["text"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendMessageParams, "chat_id" | "text">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with photo */
    replyWithPhoto(photo: TelegramParams.SendPhotoParams["photo"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendPhotoParams, "chat_id" | "photo">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with document */
    replyWithDocument(document: TelegramParams.SendDocumentParams["document"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendDocumentParams, "chat_id" | "document">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with audio */
    replyWithAudio(audio: TelegramParams.SendAudioParams["audio"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendAudioParams, "chat_id" | "audio">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with video */
    replyWithVideo(video: TelegramParams.SendVideoParams["video"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendVideoParams, "chat_id" | "video">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with animation */
    replyWithAnimation(animation: TelegramParams.SendAnimationParams["animation"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendAnimationParams, "chat_id" | "animation">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with video note */
    replyWithVideoNote(videoNote: TelegramParams.SendVideoNoteParams["video_note"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendVideoNoteParams, "chat_id" | "video_note">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with voice */
    replyWithVoice(voice: TelegramParams.SendVoiceParams["voice"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendVoiceParams, "chat_id" | "voice">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with media group */
    replyWithMediaGroup(mediaGroup: TelegramParams.SendMediaGroupParams["media"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendMediaGroupParams, "chat_id" | "media">>): Promise<MessageContext<Bot>[]>;
    /** Replies to current message with location */
    replyWithLocation(latitude: number, longitude: number, params?: WithPartialReplyParameters<Optional<TelegramParams.SendLocationParams, "chat_id" | "latitude" | "longitude">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with invoice */
    replyWithInvoice(params: WithPartialReplyParameters<Optional<TelegramParams.SendInvoiceParams, "chat_id">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with venue */
    replyWithVenue(params: WithPartialReplyParameters<Optional<TelegramParams.SendVenueParams, "chat_id">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with contact */
    replyWithContact(params: WithPartialReplyParameters<Optional<TelegramParams.SendContactParams, "chat_id">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with poll */
    replyWithPoll(params: WithPartialReplyParameters<Optional<TelegramParams.SendPollParams, "chat_id">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with sticker */
    replyWithSticker(sticker: TelegramParams.SendStickerParams["sticker"], params?: WithPartialReplyParameters<Optional<TelegramParams.SendStickerParams, "chat_id" | "sticker">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a dice */
    replyWithDice(emoji: TelegramParams.SendDiceParams["emoji"], params?: WithPartialReplyParameters<Partial<TelegramParams.SendDiceParams>>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote */
    replyWithQuote(params: WithQuote<{
        text: string;
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendMessageParams, "chat_id" | "text">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a photo */
    quoteWithPhoto(params: WithQuote<{
        photo: TelegramParams.SendPhotoParams["photo"];
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendPhotoParams, "chat_id" | "photo">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a document */
    quoteWithDocument(params: WithQuote<{
        document: TelegramParams.SendDocumentParams["document"];
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendDocumentParams, "chat_id" | "document">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and an audio */
    quoteWithAudio(params: WithQuote<{
        audio: TelegramParams.SendAudioParams["audio"];
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendAudioParams, "chat_id" | "audio">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a video */
    quoteWithVideo(params: WithQuote<{
        video: TelegramParams.SendVideoParams["video"];
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendVideoParams, "chat_id" | "video">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and an animation */
    quoteWithAnimation(params: WithQuote<{
        animation: TelegramParams.SendAnimationParams["animation"];
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendAnimationParams, "chat_id" | "animation">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a video note */
    quoteWithVideoNote(params: WithQuote<{
        videoNote: TelegramParams.SendVideoNoteParams["video_note"];
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendVideoNoteParams, "chat_id" | "video_note">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a voice */
    quoteWithVoice(params: WithQuote<{
        voice: TelegramParams.SendVoiceParams["voice"];
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendVoiceParams, "chat_id" | "voice">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a media group */
    quoteWithMediaGroup(params: WithQuote<{
        mediaGroup: TelegramParams.SendMediaGroupParams["media"];
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendMediaGroupParams, "chat_id" | "media">>): Promise<MessageContext<Bot>[]>;
    /** Replies to current message with a quote and a location */
    quoteWithLocation(params: WithQuote<{
        latitude: number;
        longitude: number;
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendLocationParams, "chat_id" | "latitude" | "longitude">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and an invoice */
    quoteWithInvoice(params: WithQuote & WithPartialReplyParameters<Optional<TelegramParams.SendInvoiceParams, "chat_id">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a venue */
    quoteWithVenue(params: WithQuote & WithPartialReplyParameters<Optional<TelegramParams.SendVenueParams, "chat_id">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a contact */
    quoteWithContact(params: WithQuote & WithPartialReplyParameters<Optional<TelegramParams.SendContactParams, "chat_id">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a poll */
    quoteWithPoll(params: WithQuote & WithPartialReplyParameters<Optional<TelegramParams.SendPollParams, "chat_id">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a sticker */
    quoteWithSticker(params: WithQuote<{
        sticker: TelegramParams.SendStickerParams["sticker"];
    }> & WithPartialReplyParameters<Optional<TelegramParams.SendStickerParams, "chat_id" | "sticker">>): Promise<MessageContext<Bot>>;
    /** Replies to current message with a quote and a dice */
    quoteWithDice(params: WithQuote<{
        emoji: TelegramParams.SendDiceParams["emoji"];
    }> & WithPartialReplyParameters<Partial<TelegramParams.SendDiceParams>>): Promise<MessageContext<Bot>>;
    /** Deletes current message */
    delete(params?: Optional<TelegramParams.DeleteMessageParams, "chat_id" | "message_id">): Promise<true>;
    /** Deletes messages in current chat */
    deleteMessages(ids: TelegramParams.DeleteMessagesParams["message_ids"]): Promise<true>;
    /** Edits current message live location */
    editMessageLiveLocation(params: TelegramParams.EditMessageLiveLocationParams): Promise<true | MessageContext<Bot>>;
    /** Edits current message live location. An alias for `editMessageLiveLocation` */
    editLiveLocation(params: TelegramParams.EditMessageLiveLocationParams): Promise<true | MessageContext<Bot>>;
    /** Stops current message live location */
    stopMessageLiveLocation(params?: TelegramParams.StopMessageLiveLocationParams): Promise<true | MessageContext<Bot>>;
    /** Stops current message live location. An alias for `stopMessageLiveLocation` */
    stopLiveLocation(params?: TelegramParams.StopMessageLiveLocationParams): Promise<true | MessageContext<Bot>>;
    /** Edits current message text */
    editMessageText(text: TelegramParams.EditMessageTextParams["text"], params?: Partial<TelegramParams.EditMessageTextParams>): Promise<true | MessageContext<Bot>>;
    /** Edits current message text. An alias for `editMessageText` */
    editText(text: TelegramParams.EditMessageTextParams["text"], params?: Partial<TelegramParams.EditMessageTextParams>): Promise<true | MessageContext<Bot>>;
    /** Edits current message caption */
    editMessageCaption(caption: NonNullable<TelegramParams.EditMessageCaptionParams["caption"]>, params?: Partial<TelegramParams.EditMessageCaptionParams>): Promise<true | MessageContext<Bot>>;
    /** Edits current message caption. An alias for `editMessageCaption` */
    editCaption(caption: NonNullable<TelegramParams.EditMessageCaptionParams["caption"]>, params?: Partial<TelegramParams.EditMessageCaptionParams>): Promise<true | MessageContext<Bot>>;
    /** Edits current message media */
    editMessageMedia(media: TelegramParams.EditMessageMediaParams["media"], params?: Partial<TelegramParams.EditMessageMediaParams>): Promise<true | MessageContext<Bot>>;
    /** Edits current message media. An alias for `editMessageMedia` */
    editMedia(media: TelegramParams.EditMessageMediaParams["media"], params?: Partial<TelegramParams.EditMessageMediaParams>): Promise<true | MessageContext<Bot>>;
    /** Edits current message reply markup */
    editMessageReplyMarkup(replyMarkup: TelegramParams.EditMessageReplyMarkupParams["reply_markup"], params?: Partial<TelegramParams.EditMessageReplyMarkupParams>): Promise<true | MessageContext<Bot>>;
    /** Edits current message reply markup. An alias for `editMessageReplyMarkup` */
    editReplyMarkup(replyMarkup: TelegramParams.EditMessageReplyMarkupParams["reply_markup"], params?: Partial<TelegramParams.EditMessageReplyMarkupParams>): Promise<true | MessageContext<Bot>>;
    /** Copies current message [into other chat if `chatId` is provided] */
    copy(params?: Optional<TelegramParams.CopyMessageParams, "chat_id" | "from_chat_id" | "message_id">): Promise<MessageId>;
    /** Copies messages from current chat and sends to another */
    copyMessages(chatId: TelegramParams.CopyMessagesParams["chat_id"], ids: TelegramParams.CopyMessagesParams["message_ids"], params?: Optional<TelegramParams.CopyMessagesParams, "chat_id" | "from_chat_id" | "message_ids">): Promise<MessageId[]>;
    /** Forwards current message [into other chat if `chatId` is provided] */
    forward(params?: Optional<TelegramParams.ForwardMessageParams, "chat_id" | "from_chat_id" | "message_id">): Promise<MessageContext<Bot>>;
    /** Forwards messages from current chat to another */
    forwardMessages(chatId: TelegramParams.ForwardMessagesParams["chat_id"], ids: TelegramParams.ForwardMessagesParams["message_ids"], params?: Optional<TelegramParams.ForwardMessagesParams, "chat_id" | "from_chat_id" | "message_ids">): Promise<MessageId[]>;
    /** Sets a reaction on a message */
    setReaction(reaction: TelegramObjects.TelegramReactionTypeEmoji["emoji"] | TelegramObjects.TelegramReactionType, params?: Optional<TelegramParams.SetMessageReactionParams, "chat_id" | "message_id">): Promise<true>;
    /** Sets multiple amount of reactions on a message */
    setReactions(rawReactions: (TelegramObjects.TelegramReactionTypeEmoji["emoji"] | TelegramObjects.TelegramReactionType)[], params?: Optional<TelegramParams.SetMessageReactionParams, "chat_id" | "message_id">): Promise<true>;
    /** Reacts to a message */
    react(rawReactions: MaybeArray<TelegramObjects.TelegramReactionTypeEmoji["emoji"] | TelegramObjects.TelegramReactionType>, params?: Optional<TelegramParams.SetMessageReactionParams, "chat_id" | "message_id">): Promise<true>;
    /** Clears reactions from the message */
    clearReactions(params?: Optional<TelegramParams.SetMessageReactionParams, "chat_id" | "message_id">): Promise<true>;
}
interface NodeMixin<Bot extends BotLike> extends Context<Bot>, NodeMixinMetadata, SendMixin<Bot> {
}
export { NodeMixin };
