import type { TelegramParams } from "@gramio/types";
import type { TelegramObjects } from "@gramio/types";
import type { Optional } from "../../types";
import type { BotLike } from "../../types";
import type { Context } from "../context";
import type { NodeMixin } from "./node";
import type { TargetMixin } from "./target";
/** This object represents a mixin that is responsible for all the chat management methods */
declare class ChatControlMixin<Bot extends BotLike> {
    /** Sets a custom title */
    setCustomTitle(title: string, params?: Optional<TelegramParams.SetChatAdministratorCustomTitleParams, "chat_id" | "user_id">): Promise<true>;
    /** Sets default chat permissions */
    setChatDefaultPermissions(permissions: TelegramObjects.TelegramChatPermissions, params?: Optional<TelegramParams.SetChatPermissionsParams, "chat_id" | "permissions">): Promise<true>;
    /** Sets a new profile photo for the chat */
    setChatPhoto(photo: TelegramParams.SetChatPhotoParams["photo"], params?: Optional<TelegramParams.SetChatPhotoParams, "chat_id" | "photo">): Promise<true>;
    /** Deletes a chat photo */
    removeChatPhoto(params?: Optional<TelegramParams.DeleteChatPhotoParams, "chat_id">): Promise<true>;
    /** Changes chat title */
    setChatTitle(title: string, params?: Optional<TelegramParams.SetChatTitleParams, "chat_id" | "title">): Promise<true>;
    /** Changes chat description */
    setChatDescription(description: string, params?: Optional<TelegramParams.SetChatDescriptionParams, "chat_id" | "description">): Promise<true>;
    /** Sets new group stickerset */
    setChatStickerSet(name: string, params?: Optional<TelegramParams.SetChatStickerSetParams, "chat_id" | "sticker_set_name">): Promise<true>;
    /** Deletes group stickerset */
    deleteChatStickerSet(params?: Optional<TelegramParams.DeleteChatStickerSetParams, "chat_id">): Promise<true>;
}
interface ChatControlMixin<Bot extends BotLike> extends Context<Bot>, TargetMixin, NodeMixin<Bot> {
}
export { ChatControlMixin };
