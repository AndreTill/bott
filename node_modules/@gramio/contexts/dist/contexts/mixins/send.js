"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendMixin = void 0;
const index_1 = require("../../structures/index");
const message_1 = require("../message");
/** This object represents a mixin which can invoke `chatId`/`senderId`-dependent methods */
class SendMixin {
    /** Sends message to current chat */
    async send(text, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendMessage({
            chat_id: this.chatId || this.senderId || 0,
            text,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends photo to current chat */
    async sendPhoto(photo, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendPhoto({
            chat_id: this.chatId || this.senderId || 0,
            photo,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends document to current chat */
    async sendDocument(document, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendDocument({
            chat_id: this.chatId || this.senderId || 0,
            document,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends audio to current chat */
    async sendAudio(audio, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendAudio({
            chat_id: this.chatId || this.senderId || 0,
            audio,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends video to current chat */
    async sendVideo(video, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendVideo({
            chat_id: this.chatId || this.senderId || 0,
            video,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends animation to current chat */
    async sendAnimation(animation, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendAnimation({
            chat_id: this.chatId || this.senderId || 0,
            animation,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends video note to current chat */
    async sendVideoNote(videoNote, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendVideoNote({
            chat_id: this.chatId || this.senderId || 0,
            video_note: videoNote,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends voice to current chat */
    async sendVoice(voice, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendVoice({
            chat_id: this.chatId || this.senderId || 0,
            voice,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends location to current chat */
    async sendLocation(latitude, longitude, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendLocation({
            chat_id: this.chatId || this.senderId || 0,
            latitude,
            longitude,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends invoice to current user */
    async sendInvoice(params) {
        const response = await this.bot.api.sendInvoice({
            chat_id: this.chatId || this.senderId || 0,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends venue to current chat */
    async sendVenue(params) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendVenue({
            chat_id: this.chatId || this.senderId || 0,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends contact to current chat */
    async sendContact(params) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendContact({
            chat_id: this.chatId || this.senderId || 0,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends poll to current chat */
    async sendPoll(params) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendPoll({
            chat_id: this.chatId || this.senderId || 0,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends sticker */
    async sendSticker(sticker, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendSticker({
            chat_id: this.chatId || this.senderId || 0,
            sticker,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Stops poll in current chat */
    async stopPoll(messageId, params = {}) {
        if (this.businessConnectionId && !params?.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        const response = await this.bot.api.stopPoll({
            chat_id: this.chatId || this.senderId || 0,
            message_id: messageId,
            ...params,
        });
        return new index_1.Poll(response);
    }
    /** Sends chat action to current chat */
    sendChatAction(action, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        return this.bot.api.sendChatAction({
            chat_id: this.chatId || this.senderId || 0,
            action,
            ...params,
        });
    }
    /** Sends dice */
    async sendDice(emoji, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendDice({
            chat_id: this.chatId || this.senderId || 0,
            emoji,
            ...params,
        });
        return new message_1.MessageContext({
            bot: this.bot,
            payload: response,
        });
    }
    /** Sends media group to current chat */
    async sendMediaGroup(mediaGroup, params = {}) {
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        if (this.threadId && this.isTopicMessage?.() && !params.message_thread_id)
            params.message_thread_id = this.threadId;
        const response = await this.bot.api.sendMediaGroup({
            chat_id: this.chatId || this.senderId || 0,
            media: mediaGroup,
            ...params,
        });
        return response.map((message) => new message_1.MessageContext({
            bot: this.bot,
            payload: message,
        }));
    }
    sendMedia(query) {
        // INFO: kind of a hack for interoperability between TelegramInputMedia objects and sendMedia
        if ("media" in query) {
            query[query.type] = query.media;
            //delete
            query.media = undefined;
        }
        if (query.type === "animation") {
            return this.sendAnimation(query.animation, query);
        }
        if (query.type === "audio") {
            return this.sendAudio(query.audio, query);
        }
        if (query.type === "document") {
            return this.sendDocument(query.document, query);
        }
        if (query.type === "photo") {
            return this.sendPhoto(query.photo, query);
        }
        if (query.type === "sticker") {
            return this.sendSticker(query.sticker, query);
        }
        if (query.type === "video_note") {
            return this.sendVideoNote(query.video_note, query);
        }
        if (query.type === "video") {
            return this.sendVideo(query.video, query);
        }
        if (query.type === "voice") {
            return this.sendVoice(query.voice, query);
        }
        throw new TypeError("[sendMedia] unhandled media type");
    }
    /** Returns chat boosts by the user */
    getChatBoosts(userId) {
        return this.bot.api.getUserChatBoosts({
            chat_id: this.chatId || this.senderId || 0,
            user_id: userId,
        });
    }
}
exports.SendMixin = SendMixin;
