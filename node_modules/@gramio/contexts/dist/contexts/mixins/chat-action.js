"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatActionMixin = void 0;
exports.sleep = sleep;
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
/**
 * This object represent ChatAction mixin
 *
 * @example
 * ```typescript
 * bot.on("message", (context) => {
 * 		const controller = context.createActionController('typing');
 *
 *		controller.start();
 *
 *		await sleep(10_000)
 *
 *		controller.stop();
 *
 *		return context.send("soo sleepy...")
 * });
 * ```
 *
 *  */
class ChatActionController {
    abortController = new AbortController();
    action;
    interval;
    wait;
    timeout;
    context;
    constructor(options) {
        const { interval = 5_000, wait = 0, timeout = 0 } = options.params;
        this.action = options.action;
        this.interval = interval;
        this.wait = wait;
        this.timeout = timeout;
        this.context = options.context;
    }
    started = false;
    /** Starts the `sendChatAction(action)` loop until `stop()` is called */
    start() {
        if (this.started) {
            return;
        }
        this.started = true;
        setImmediate(async () => {
            const start = Date.now();
            if (this.wait > 0) {
                await sleep(this.wait);
            }
            while (!this.abortController.signal.aborted) {
                try {
                    await this.context.sendChatAction(this.action, {
                        suppress: true,
                    });
                    await sleep(this.interval);
                    // stop if we hit the timeout mark
                    if (this.timeout !== 0 && Date.now() - start > this.timeout) {
                        break;
                    }
                }
                catch (err) {
                    // stop if we hit an error
                    break;
                }
            }
        });
    }
    /** Stops the loop */
    stop() {
        this.started = false;
        this.abortController.abort();
    }
}
class ChatActionMixin {
    /** Creates a controller that when `start()`ed executes `sendChatAction(action)` every `interval` milliseconds until `stop()`ped */
    createActionController(action, params = {}) {
        return new ChatActionController({
            action,
            params,
            context: this,
        });
    }
}
exports.ChatActionMixin = ChatActionMixin;
