import type { TelegramObjects } from "@gramio/types";
import type { BotLike } from "../types";
import type { ContextType, MaybeArray, SoftString, UpdateName } from "../types";
interface ContextOptions<Bot extends BotLike> {
    bot: Bot;
    update?: TelegramObjects.TelegramUpdate;
    updateType: UpdateName;
    updateId?: number;
}
/** Main base context */
declare class Context<Bot extends BotLike> {
    bot: Bot;
    updateId?: number;
    update?: TelegramObjects.TelegramUpdate;
    protected updateType: UpdateName;
    constructor(options: ContextOptions<Bot>);
    /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
    get [Symbol.toStringTag](): string;
}
interface Context<Bot extends BotLike> {
    is<T extends UpdateName>(rawTypes: MaybeArray<SoftString<T>>): this is ContextType<Bot, T> & (Bot["__Derives"] extends {} ? Bot["__Derives"]["global"] & Bot["__Derives"][T] : {});
}
export { Context };
