import type { TelegramParams } from "@gramio/types";
import type { TelegramObjects } from "@gramio/types";
import { ChosenInlineResult } from "../structures/index";
import type { Constructor, Require } from "../types";
import type { BotLike } from "../types";
import { Context } from "./context";
import { ChatActionMixin, CloneMixin, SendMixin } from "./mixins/index";
interface ChosenInlineResultContextOptions<Bot extends BotLike> {
    bot: Bot;
    update: TelegramObjects.TelegramUpdate;
    payload: TelegramObjects.TelegramChosenInlineResult;
    updateId: number;
}
/**
 * The result of an inline query that was chosen by
 * a user and sent to their chat partner
 */
declare class ChosenInlineResultContext<Bot extends BotLike> extends Context<Bot> {
    /** The raw data that is used for this Context */
    payload: TelegramObjects.TelegramChosenInlineResult;
    constructor(options: ChosenInlineResultContextOptions<Bot>);
    /** Checks if the result has `location` property */
    hasLocation(): this is Require<this, "location">;
    /** Checks if the query has `inlineMessageId` property */
    hasInlineMessageId(): this is Require<this, "inlineMessageId">;
    /** Edits a callback query messages text */
    editText(text: TelegramParams.EditMessageTextParams["text"], params?: Partial<TelegramParams.EditMessageTextParams>): Promise<true | TelegramObjects.TelegramMessage>;
    /** Edits a callback query messages caption */
    editCaption(caption: NonNullable<TelegramParams.EditMessageCaptionParams["caption"]>, params?: Partial<TelegramParams.EditMessageCaptionParams>): Promise<true | TelegramObjects.TelegramMessage>;
    /** Edits a callback query messages media */
    editMedia(media: TelegramParams.EditMessageMediaParams["media"], params?: Partial<TelegramParams.EditMessageMediaParams>): Promise<true | TelegramObjects.TelegramMessage>;
    /** Edits a callback query messages live location */
    editLiveLocation(params: TelegramParams.EditMessageLiveLocationParams): Promise<true | TelegramObjects.TelegramMessage>;
    /** Stops a callback query messages live location */
    stopLiveLocation(params?: TelegramParams.StopMessageLiveLocationParams): Promise<true | TelegramObjects.TelegramMessage>;
    /** Edits a callback query messages reply markup */
    editReplyMarkup(replyMarkup: TelegramParams.EditMessageReplyMarkupParams["reply_markup"], params?: Partial<TelegramParams.EditMessageReplyMarkupParams>): Promise<true | TelegramObjects.TelegramMessage>;
}
interface ChosenInlineResultContext<Bot extends BotLike> extends Constructor<ChosenInlineResultContext<Bot>>, ChosenInlineResult, SendMixin<Bot>, ChatActionMixin<Bot>, CloneMixin<Bot, ChosenInlineResultContext<Bot>, ChosenInlineResultContextOptions<Bot>> {
}
export { ChosenInlineResultContext };
