import type { TelegramParams } from "@gramio/types";
import type { TelegramObjects } from "@gramio/types";
import { PreCheckoutQuery } from "../structures/index";
import type { Constructor, Optional, Require } from "../types";
import type { BotLike } from "../types";
import { Context } from "./context";
import { ChatActionMixin, CloneMixin, SendMixin } from "./mixins/index";
interface PreCheckoutQueryContextOptions<Bot extends BotLike> {
    bot: Bot;
    update: TelegramObjects.TelegramUpdate;
    payload: TelegramObjects.TelegramPreCheckoutQuery;
    updateId: number;
}
/**
 * This object contains information about an incoming pre-checkout query.
 *
 * [Documentation](https://core.telegram.org/bots/api/#precheckoutquery)
 */
declare class PreCheckoutQueryContext<Bot extends BotLike> extends Context<Bot> {
    /** The raw data that is used for this Context */
    payload: TelegramObjects.TelegramPreCheckoutQuery;
    constructor(options: PreCheckoutQueryContextOptions<Bot>);
    /** Checks if the query has `shippingOptionId` property */
    hasShippingOptionId(): this is Require<this, "shippingOptionId">;
    /** Checks if the query has `orderInfo` property */
    hasOrderInfo(): this is Require<this, "orderInfo">;
    /** Answers to the pending pre-checkout query */
    answerPreCheckoutQuery(params: Optional<TelegramParams.AnswerPreCheckoutQueryParams, "pre_checkout_query_id">): Promise<true>;
    /** Answers to the pending pre-checkout query. An alias for `answerPreCheckoutQuery` */
    answer(params: Optional<TelegramParams.AnswerPreCheckoutQueryParams, "pre_checkout_query_id">): Promise<true>;
}
interface PreCheckoutQueryContext<Bot extends BotLike> extends Constructor<PreCheckoutQueryContext<Bot>>, PreCheckoutQuery, SendMixin<Bot>, ChatActionMixin<Bot>, CloneMixin<Bot, PreCheckoutQueryContext<Bot>, PreCheckoutQueryContextOptions<Bot>> {
}
export { PreCheckoutQueryContext };
