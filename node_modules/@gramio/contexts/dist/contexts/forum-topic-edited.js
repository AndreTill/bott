"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForumTopicEditedContext = void 0;
const index_1 = require("../structures/index");
const utils_1 = require("../utils");
const inspectable_1 = require("inspectable");
const context_1 = require("./context");
const index_2 = require("./mixins/index");
/** This object represents a service message about an edited forum topic. */
class ForumTopicEditedContext extends context_1.Context {
    /** The raw data that is used for this Context */
    payload;
    event;
    constructor(options) {
        super({
            bot: options.bot,
            updateType: "forum_topic_edited",
            updateId: options.updateId,
            update: options.update,
        });
        this.payload = options.payload;
        this.event = this.payload
            .forum_topic_edited;
    }
    /** New name of the topic, if it was edited */
    get name() {
        return this.event.name;
    }
    /** Checks whether the `name` property has been edited */
    hasName() {
        return this.name !== undefined;
    }
    /** New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed */
    get iconCustomEmojiId() {
        return this.event.icon_custom_emoji_id;
    }
    /** Checks whether the `iconCustomEmojiId` property has been edited */
    hasIconCustomEmojiId() {
        return this.iconCustomEmojiId !== undefined;
    }
}
exports.ForumTopicEditedContext = ForumTopicEditedContext;
(0, utils_1.applyMixins)(ForumTopicEditedContext, [
    index_1.Message,
    index_2.TargetMixin,
    index_2.SendMixin,
    index_2.ChatActionMixin,
    index_2.NodeMixin,
    index_2.ForumMixin,
    index_2.ChatInviteControlMixin,
    index_2.ChatControlMixin,
    index_2.ChatSenderControlMixin,
    index_2.ChatMemberControlMixin,
    index_2.PinsMixin,
    index_2.CloneMixin,
]);
(0, inspectable_1.inspectable)(ForumTopicEditedContext, {
    serialize(context) {
        const payload = {
            name: context.name,
            iconCustomEmojiId: context.iconCustomEmojiId,
        };
        return (0, utils_1.filterPayload)(payload);
    },
});
