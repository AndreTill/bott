"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinnedMessageContext = void 0;
const inspectable_1 = require("inspectable");
const index_1 = require("../structures/index");
const utils_1 = require("../utils");
const context_1 = require("./context");
const message_1 = require("./message");
const index_2 = require("./mixins/index");
/** Specified message was pinned. Note that the Message object in this field will not contain further *reply\_to\_message* fields even if it itself is a reply. */
class PinnedMessageContext extends context_1.Context {
    /** The raw data that is used for this Context */
    payload;
    constructor(options) {
        super({
            bot: options.bot,
            updateType: "pinned_message",
            updateId: options.updateId,
            update: options.update,
        });
        this.payload = options.payload;
    }
    /** Pinned message */
    get eventMessage() {
        return new message_1.MessageContext({
            bot: this.bot,
            payload: this.payload.pinned_message,
        });
    }
}
exports.PinnedMessageContext = PinnedMessageContext;
(0, utils_1.applyMixins)(PinnedMessageContext, [
    index_1.Message,
    index_2.TargetMixin,
    index_2.SendMixin,
    index_2.ChatActionMixin,
    index_2.NodeMixin,
    index_2.ChatInviteControlMixin,
    index_2.ChatControlMixin,
    index_2.ChatSenderControlMixin,
    index_2.ChatMemberControlMixin,
    index_2.PinsMixin,
    index_2.CloneMixin,
]);
(0, utils_1.memoizeGetters)(PinnedMessageContext, ["eventMessage"]);
(0, inspectable_1.inspectable)(PinnedMessageContext, {
    serialize(context) {
        return {
            id: context.id,
            from: context.from,
            senderId: context.senderId,
            createdAt: context.createdAt,
            chat: context.chat,
            chatId: context.chatId,
            chatType: context.chatType,
            eventMessage: context.eventMessage,
        };
    },
});
