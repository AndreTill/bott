import { AnimationAttachment, AudioAttachment, ContactAttachment, DocumentAttachment, LocationAttachment, PhotoAttachment, PollAttachment, StickerAttachment, StoryAttachment, VenueAttachment, VideoAttachment, VideoNoteAttachment, VoiceAttachment } from "../structures/attachments/index";
import { Message, type MessageEntity } from "../structures/index";
import type { TelegramObjects } from "@gramio/types";
import type { AttachmentType, AttachmentType as AttachmentTypeEnum, AttachmentsMapping, Constructor, EntityType, Require, RequireValue, UpdateName } from "../types";
import { PaidMediaInfo } from "../structures/paid-media-info";
import type { BotLike } from "../types";
import { Context } from "./context";
import { ChatActionMixin, ChatControlMixin, ChatInviteControlMixin, ChatMemberControlMixin, ChatSenderControlMixin, CloneMixin, DownloadMixin, NodeMixin, PinsMixin, SendMixin, TargetMixin } from "./mixins/index";
interface MessageContextOptions<Bot extends BotLike> {
    bot: Bot;
    update?: TelegramObjects.TelegramUpdate;
    payload: TelegramObjects.TelegramMessage;
    updateId?: number;
    type?: UpdateName;
}
/** Called when `message` event occurs */
declare class MessageContext<Bot extends BotLike> extends Context<Bot> {
    #private;
    /** The raw data that is used for this Context */
    payload: TelegramObjects.TelegramMessage;
    constructor(options: MessageContextOptions<Bot>);
    /**
     * For text messages, the actual UTF-8 text of the message, 0-4096 characters
     */
    get text(): string | undefined;
    set text(text: string | undefined);
    /** Checks if the message has `text` property */
    hasText(): this is Require<this, "text">;
    /**
     * Caption for the animation, audio, document, photo, video or voice,
     * 0-1024 characters
     */
    get caption(): string | undefined;
    set caption(caption: string | undefined);
    /** Checks if the message has `caption` property */
    hasCaption(): this is Require<this, "caption">;
    /** Checks if the message has `dice` property */
    hasDice(): this is Require<this, "dice">;
    /** Value after the `/start` command */
    get rawStartPayload(): string | undefined;
    /** Parsed value after the `/start` command */
    get startPayload(): string | number | undefined;
    /** Does this message have start payload? */
    hasStartPayload(): this is Require<this, "startPayload">;
    /** Checks if the message has `author_signature` property */
    hasAuthorSignature(): this is Require<this, "authorSignature">;
    /** Checks if there are any entities (with specified type) */
    hasEntities(type?: EntityType | MessageEntity["type"]): this is Require<this, "entities">;
    /** Checks if there are any caption entities (with specified type) */
    hasCaptionEntities(type?: EntityType | MessageEntity["type"]): this is Require<this, "captionEntities">;
    get paidMedia(): PaidMediaInfo | undefined;
    /** Message attachment */
    get attachment(): AnimationAttachment | AudioAttachment | ContactAttachment | DocumentAttachment | LocationAttachment | PhotoAttachment | PollAttachment | StickerAttachment | StoryAttachment | VenueAttachment | VideoNoteAttachment | VideoAttachment | VoiceAttachment | undefined;
    /** Does this message have an attachment with a specific type `type`? */
    hasAttachmentType<T extends AttachmentType>(type: T): this is RequireValue<this, "attachment", AttachmentsMapping[T]>;
    /** Does this message even have an attachment? */
    hasAttachment(): this is Require<this, "attachment">;
    /** Is this message a giveaway */
    isGiveaway(): this is Require<this, "giveaway">;
    /** Is this message an event? */
    isEvent(): boolean;
    /** Event type */
    get eventType(): import("../types").MessageEventName | undefined;
    /** Is this message a service one? */
    isServiceMessage(): boolean;
    /** Is this message in topic */
    isTopicMessage(): boolean;
    /** Does this message have a forward origin? */
    hasForwardOrigin(): this is Require<this, "forwardOrigin">;
    /** Does this message have a quote? */
    hasQuote(): this is Require<this, "quote">;
    /** Does this message have link preview options? */
    hasLinkPreviewOptions(): this is Require<this, "linkPreviewOptions">;
    /** Does this message have external reply info? */
    hasReplyInfo(): this is Require<this, "externalReply">;
    /** Does this message have reply message? */
    hasReplyMessage(): this is Require<this, "replyMessage">;
    /** Checks if the sent message has `via_bot` property */
    hasViaBot(): this is Require<this, "viaBot">;
    /** @deprecated use `hasAttachmentType(type)` and `hasAttachment` instead */
    hasAttachments(type?: AttachmentType | AttachmentTypeEnum): boolean;
}
interface MessageContext<Bot extends BotLike> extends Constructor<MessageContext<Bot>>, Message, TargetMixin, SendMixin<Bot>, ChatActionMixin<Bot>, NodeMixin<Bot>, DownloadMixin<Bot>, ChatInviteControlMixin<Bot>, ChatControlMixin<Bot>, ChatSenderControlMixin<Bot>, ChatMemberControlMixin<Bot>, PinsMixin<Bot>, CloneMixin<Bot, MessageContext<Bot>, MessageContextOptions<Bot>> {
}
export { MessageContext };
