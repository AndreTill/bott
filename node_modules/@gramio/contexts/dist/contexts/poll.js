"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PollContext = void 0;
const inspectable_1 = require("inspectable");
const index_1 = require("../structures/index");
const types_1 = require("../types");
const utils_1 = require("../utils");
const context_1 = require("./context");
const index_2 = require("./mixins/index");
/**
 * This object contains information about a poll.
 *
 * [Documentation](https://core.telegram.org/bots/api/#poll)
 */
class PollContext extends context_1.Context {
    /** The raw data that is used for this Context */
    payload;
    constructor(options) {
        super({
            bot: options.bot,
            updateType: "poll",
            updateId: options.updateId,
            update: options.update,
        });
        this.payload = options.payload;
    }
    /** Returns `true` if current poll is a regular one */
    isRegular() {
        return this.type === types_1.PollType.Regular;
    }
    /** Returns `true` if current poll is a quiz */
    isQuiz() {
        return this.type === types_1.PollType.Quiz;
    }
    /** Checks if poll has `correctOptionId` property */
    hasCorrectOptionId() {
        return this.correctOptionId !== undefined;
    }
    /** Checks if poll has `explanation` property */
    hasExplanation() {
        return this.explanation !== undefined;
    }
    /** Checks if poll has `explanationEntities` property */
    hasExplanationEntities() {
        return this.explanationEntities !== undefined;
    }
    /** Checks if poll has `openPeriod` property */
    hasOpenPeriod() {
        return this.openPeriod !== undefined;
    }
    /** Checks if poll has `closeDate` property */
    hasCloseDate() {
        return this.closeDate !== undefined;
    }
}
exports.PollContext = PollContext;
(0, utils_1.applyMixins)(PollContext, [index_1.Poll, index_2.CloneMixin]);
(0, inspectable_1.inspectable)(PollContext, {
    serialize(context) {
        const payload = {
            id: context.id,
            question: context.question,
            options: context.options,
            totalVoterCount: context.totalVoterCount,
            isClosed: context.isClosed,
            isAnonymous: context.isAnonymous,
            type: context.type,
            allowsMultipleAnswers: context.allowsMultipleAnswers,
            correctOptionId: context.correctOptionId,
            explanation: context.explanation,
            explanationEntities: context.explanationEntities,
            openPeriod: context.openPeriod,
            closeDate: context.closeDate,
        };
        return (0, utils_1.filterPayload)(payload);
    },
});
