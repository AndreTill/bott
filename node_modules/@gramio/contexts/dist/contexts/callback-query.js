"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallbackQueryContext = void 0;
// eslint-disable-next-line max-classes-per-file
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const index_1 = require("../structures/index");
const context_1 = require("./context");
const message_1 = require("./message");
const index_2 = require("./mixins/index");
/** Called when `callback_query` event occurs */
class CallbackQueryContext extends context_1.Context {
    /** The raw data that is used for this Context */
    payload;
    constructor(options) {
        super({
            bot: options.bot,
            updateType: "callback_query",
            updateId: options.updateId,
            update: options.update,
        });
        this.payload = options.payload;
    }
    /** Checks if the query has `message` property */
    hasMessage() {
        return this.payload.message !== undefined;
    }
    /**
     * Message with the callback button that originated the query.
     * Note that message content and message date will not be available
     * if the message is too old
     */
    get message() {
        if (this.payload.message === undefined)
            return undefined;
        return new message_1.MessageContext({
            bot: this.bot,
            update: this.update,
            payload: this.payload.message,
            updateId: this.update?.update_id,
        });
    }
    /** Checks if the query has `queryPayload` property */
    hasQueryPayload() {
        return this.payload.data !== undefined;
    }
    /**
     * Data associated with the callback button.
     * Be aware that a bad client can send arbitrary data in this field.
     */
    get queryPayload() {
        const { data } = this.payload;
        if (data === undefined)
            return undefined;
        if ((0, utils_1.isParsable)(data)) {
            return JSON.parse(data);
        }
        return data;
    }
    /** Checks if the query has `inlineMessageId` property */
    hasInlineMessageId() {
        return this.inlineMessageId !== undefined;
    }
    /** Checks if the query has `data` property */
    hasData() {
        return this.data !== undefined;
    }
    /** Checks if the query has `gameShortName` property */
    hasGameShortName() {
        return this.gameShortName !== undefined;
    }
    /** Answers to current callback query */
    answerCallbackQuery(params) {
        if (typeof params === "string") {
            // biome-ignore lint/style/noParameterAssign:
            params = { text: params };
        }
        return this.bot.api.answerCallbackQuery({
            callback_query_id: this.id,
            ...params,
        });
    }
    /** Sets the result of an interaction with a Web App and sends a corresponding message  */
    answerWebAppQuery(params) {
        return this.bot.api.answerWebAppQuery(params);
    }
    /** Answers to current callback query. An alias for `answerCallbackQuery` */
    answer(params) {
        return this.answerCallbackQuery(params);
    }
    /** Edits a callback query messages text */
    editText(text, params = {}) {
        if (this.hasMessage()) {
            return this.message.editText(text, params);
        }
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without `message` and `inlineMessageId` properties");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageText({
            inline_message_id: this.inlineMessageId,
            text,
            ...params,
        });
    }
    /** Edits a callback query messages caption */
    editCaption(caption, params = {}) {
        if (this.hasMessage()) {
            return this.message.editCaption(caption, params);
        }
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without `message` and `inlineMessageId` properties");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageCaption({
            inline_message_id: this.inlineMessageId,
            caption,
            ...params,
        });
    }
    /** Edits a callback query messages media */
    editMedia(media, params = {}) {
        if (this.hasMessage()) {
            return this.message.editMedia(media, params);
        }
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without `message` and `inlineMessageId` properties");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageMedia({
            inline_message_id: this.inlineMessageId,
            media,
            ...params,
        });
    }
    /** Edits a callback query messages live location */
    editLiveLocation(params) {
        if (this.hasMessage()) {
            return this.message.editLiveLocation(params);
        }
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without `message` and `inlineMessageId` properties");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageLiveLocation({
            inline_message_id: this.inlineMessageId,
            ...params,
        });
    }
    /** Stops a callback query messages live location */
    stopLiveLocation(params) {
        if (this.hasMessage()) {
            return this.message.stopLiveLocation(params);
        }
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without `message` and `inlineMessageId` properties");
        }
        return this.bot.api.stopMessageLiveLocation({
            inline_message_id: this.inlineMessageId,
            ...params,
        });
    }
    /** Edits a callback query messages reply markup */
    editReplyMarkup(replyMarkup, params = {}) {
        if (this.hasMessage()) {
            return this.message.editReplyMarkup(replyMarkup, params);
        }
        if (!this.hasInlineMessageId()) {
            throw new TypeError("cannot edit a message without `message` and `inlineMessageId` properties");
        }
        if (this.businessConnectionId && !params.business_connection_id)
            params.business_connection_id = this.businessConnectionId;
        return this.bot.api.editMessageReplyMarkup({
            inline_message_id: this.inlineMessageId,
            reply_markup: replyMarkup,
            ...params,
        });
    }
}
exports.CallbackQueryContext = CallbackQueryContext;
(0, utils_1.applyMixins)(CallbackQueryContext, [index_1.CallbackQuery, index_2.SendMixin, index_2.CloneMixin]);
(0, utils_1.memoizeGetters)(CallbackQueryContext, ["message"]);
(0, inspectable_1.inspectable)(CallbackQueryContext, {
    serialize(context) {
        const payload = {
            id: context.id,
            senderId: context.senderId,
            from: context.from,
            message: context.message,
            inlineMessageId: context.inlineMessageId,
            chatInstance: context.chatInstance,
            queryPayload: context.queryPayload,
            gameShortName: context.gameShortName,
        };
        return (0, utils_1.filterPayload)(payload);
    },
});
