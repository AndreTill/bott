"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineQueryContext = void 0;
const inspectable_1 = require("inspectable");
const index_1 = require("../structures/index");
const utils_1 = require("../utils");
const context_1 = require("./context");
const index_2 = require("./mixins/index");
/**
 * This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
 *
 * [Documentation](https://core.telegram.org/bots/api/#inlinequery)
 */
class InlineQueryContext extends context_1.Context {
    /** The raw data that is used for this Context */
    payload;
    constructor(options) {
        super({
            bot: options.bot,
            updateType: "inline_query",
            updateId: options.updateId,
            update: options.update,
        });
        this.payload = options.payload;
    }
    /** Sender's ID */
    get senderId() {
        return this.from.id;
    }
    /** Checks if query has `location` property */
    hasLocation() {
        return this.location !== undefined;
    }
    /** Answers to inline query */
    answerInlineQuery(results, params) {
        return this.bot.api.answerInlineQuery({
            inline_query_id: this.id,
            results,
            ...params,
        });
    }
    /** Answers to inline query. An alias for `answerInlineQuery` */
    answer(results, params) {
        return this.answerInlineQuery(results, params);
    }
}
exports.InlineQueryContext = InlineQueryContext;
(0, utils_1.applyMixins)(InlineQueryContext, [index_1.InlineQuery, index_2.CloneMixin]);
(0, inspectable_1.inspectable)(InlineQueryContext, {
    serialize(context) {
        const payload = {
            id: context.id,
            senderId: context.senderId,
            from: context.from,
            location: context.location,
            query: context.query,
            offset: context.offset,
        };
        return (0, utils_1.filterPayload)(payload);
    },
});
