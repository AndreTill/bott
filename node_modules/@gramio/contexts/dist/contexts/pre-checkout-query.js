"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreCheckoutQueryContext = void 0;
const inspectable_1 = require("inspectable");
const index_1 = require("../structures/index");
const utils_1 = require("../utils");
const context_1 = require("./context");
const index_2 = require("./mixins/index");
/**
 * This object contains information about an incoming pre-checkout query.
 *
 * [Documentation](https://core.telegram.org/bots/api/#precheckoutquery)
 */
class PreCheckoutQueryContext extends context_1.Context {
    /** The raw data that is used for this Context */
    payload;
    constructor(options) {
        super({
            bot: options.bot,
            updateType: "pre_checkout_query",
            updateId: options.updateId,
            update: options.update,
        });
        this.payload = options.payload;
    }
    /** Checks if the query has `shippingOptionId` property */
    hasShippingOptionId() {
        return this.shippingOptionId !== undefined;
    }
    /** Checks if the query has `orderInfo` property */
    hasOrderInfo() {
        return this.orderInfo !== undefined;
    }
    /** Answers to the pending pre-checkout query */
    answerPreCheckoutQuery(params) {
        return this.bot.api.answerPreCheckoutQuery({
            pre_checkout_query_id: this.id,
            ...params,
        });
    }
    /** Answers to the pending pre-checkout query. An alias for `answerPreCheckoutQuery` */
    answer(params) {
        return this.answerPreCheckoutQuery(params);
    }
}
exports.PreCheckoutQueryContext = PreCheckoutQueryContext;
(0, utils_1.applyMixins)(PreCheckoutQueryContext, [
    index_1.PreCheckoutQuery,
    index_2.SendMixin,
    index_2.ChatActionMixin,
    index_2.CloneMixin,
]);
(0, inspectable_1.inspectable)(PreCheckoutQueryContext, {
    serialize(context) {
        const payload = {
            id: context.id,
            from: context.from,
            senderId: context.senderId,
            currency: context.currency,
            totalAmount: context.totalAmount,
            invoicePayload: context.invoicePayload,
            shippingOptionId: context.shippingOptionId,
            orderInfo: context.orderInfo,
        };
        return (0, utils_1.filterPayload)(payload);
    },
});
