"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageReactionContext = void 0;
const message_reaction_updated_1 = require("../structures/message-reaction-updated");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const context_1 = require("./context");
const index_1 = require("./mixins/index");
/** This object represents a change of a reaction on a message performed by a user. */
class MessageReactionContext extends context_1.Context {
    /** The raw data that is used for this Context */
    payload;
    constructor(options) {
        super({
            bot: options.bot,
            updateType: "message_reaction",
            updateId: options.updateId,
            update: options.update,
        });
        this.payload = options.payload;
    }
    /** Checks if context has the `user` property */
    hasUser() {
        return this.user !== undefined;
    }
    /** Checks if context has the `actorChat` property */
    hasActorChat() {
        return this.actorChat !== undefined;
    }
}
exports.MessageReactionContext = MessageReactionContext;
(0, utils_1.applyMixins)(MessageReactionContext, [
    message_reaction_updated_1.MessageReactionUpdated,
    index_1.SendMixin,
    index_1.NodeMixin,
    index_1.CloneMixin,
]);
(0, inspectable_1.inspectable)(MessageReactionContext, {
    // biome-ignore lint/suspicious/noExplicitAny: <explanation>
    serialize(context) {
        const payload = {
            id: context.id,
            chat: context.chat,
            user: context.user,
            actorChat: context.actorChat,
            date: context.date,
            oldReactions: context.oldReactions,
            newReactions: context.newReactions,
        };
        return (0, utils_1.filterPayload)(payload);
    },
});
