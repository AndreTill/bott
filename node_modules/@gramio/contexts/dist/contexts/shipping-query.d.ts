import type { TelegramParams } from "@gramio/types";
import type { TelegramObjects } from "@gramio/types";
import { ShippingQuery } from "../structures/index";
import type { Constructor, Optional } from "../types";
import type { BotLike } from "../types";
import { Context } from "./context";
import { ChatActionMixin, CloneMixin, SendMixin } from "./mixins/index";
interface ShippingQueryContextOptions<Bot extends BotLike> {
    bot: Bot;
    update: TelegramObjects.TelegramUpdate;
    payload: TelegramObjects.TelegramShippingQuery;
    updateId: number;
}
/**
 * This object contains information about an incoming shipping query.
 *
 * [Documentation](https://core.telegram.org/bots/api/#shippingquery)
 */
declare class ShippingQueryContext<Bot extends BotLike> extends Context<Bot> {
    /** The raw data that is used for this Context */
    payload: TelegramObjects.TelegramShippingQuery;
    constructor(options: ShippingQueryContextOptions<Bot>);
    /** Replies to shipping queries */
    answerShippingQuery<Ok extends boolean>(ok?: Ok, params?: Optional<TelegramParams.AnswerShippingQueryParams, "shipping_query_id" | "ok"> & Required<Pick<TelegramParams.AnswerShippingQueryParams, true extends Ok ? "shipping_options" : "error_message">>): Promise<true>;
    /** Replies to shipping queries. An alias for `answerShippingQuery` */
    answer<Ok extends boolean>(ok?: Ok, params?: Optional<TelegramParams.AnswerShippingQueryParams, "shipping_query_id" | "ok"> & Required<Pick<TelegramParams.AnswerShippingQueryParams, true extends Ok ? "shipping_options" : "error_message">>): Promise<true>;
}
interface ShippingQueryContext<Bot extends BotLike> extends Constructor<ShippingQueryContext<Bot>>, ShippingQuery, SendMixin<Bot>, ChatActionMixin<Bot>, CloneMixin<Bot, ShippingQueryContext<Bot>, ShippingQueryContextOptions<Bot>> {
}
export { ShippingQueryContext };
