import { CallbackQuery } from "../structures/index";
import type { Constructor, Require } from "../types";
import type { TelegramParams } from "@gramio/types";
import type { TelegramObjects } from "@gramio/types";
import type { BotLike } from "../types";
import { Context } from "./context";
import { MessageContext } from "./message";
import { CloneMixin, SendMixin } from "./mixins/index";
interface CallbackQueryContextOptions<Bot extends BotLike> {
    bot: Bot;
    update: TelegramObjects.TelegramUpdate;
    payload: TelegramObjects.TelegramCallbackQuery;
    updateId: number;
}
/** Called when `callback_query` event occurs */
declare class CallbackQueryContext<Bot extends BotLike> extends Context<Bot> {
    /** The raw data that is used for this Context */
    payload: TelegramObjects.TelegramCallbackQuery;
    constructor(options: CallbackQueryContextOptions<Bot>);
    /** Checks if the query has `message` property */
    hasMessage(): this is Require<this, "message">;
    /**
     * Message with the callback button that originated the query.
     * Note that message content and message date will not be available
     * if the message is too old
     */
    get message(): MessageContext<Bot> | undefined;
    /** Checks if the query has `queryPayload` property */
    hasQueryPayload(): this is Require<this, "queryPayload">;
    /**
     * Data associated with the callback button.
     * Be aware that a bad client can send arbitrary data in this field.
     */
    get queryPayload(): unknown;
    /** Checks if the query has `inlineMessageId` property */
    hasInlineMessageId(): this is Require<this, "inlineMessageId">;
    /** Checks if the query has `data` property */
    hasData(): this is Require<this, "data">;
    /** Checks if the query has `gameShortName` property */
    hasGameShortName(): this is Require<this, "gameShortName">;
    /** Answers to current callback query */
    answerCallbackQuery(params?: string | Partial<TelegramParams.AnswerCallbackQueryParams>): Promise<true>;
    /** Sets the result of an interaction with a Web App and sends a corresponding message  */
    answerWebAppQuery(params: TelegramParams.AnswerWebAppQueryParams): Promise<TelegramObjects.TelegramSentWebAppMessage>;
    /** Answers to current callback query. An alias for `answerCallbackQuery` */
    answer(params?: string | Partial<TelegramParams.AnswerCallbackQueryParams>): Promise<true>;
    /** Edits a callback query messages text */
    editText(text: TelegramParams.EditMessageTextParams["text"], params?: Partial<TelegramParams.EditMessageTextParams>): Promise<true | TelegramObjects.TelegramMessage> | Promise<true | MessageContext<Bot>>;
    /** Edits a callback query messages caption */
    editCaption(caption: NonNullable<TelegramParams.EditMessageCaptionParams["caption"]>, params?: Partial<TelegramParams.EditMessageCaptionParams>): Promise<true | TelegramObjects.TelegramMessage> | Promise<true | MessageContext<Bot>>;
    /** Edits a callback query messages media */
    editMedia(media: TelegramParams.EditMessageMediaParams["media"], params?: Partial<TelegramParams.EditMessageMediaParams>): Promise<true | TelegramObjects.TelegramMessage> | Promise<true | MessageContext<Bot>>;
    /** Edits a callback query messages live location */
    editLiveLocation(params: TelegramParams.EditMessageLiveLocationParams): Promise<true | TelegramObjects.TelegramMessage> | Promise<true | MessageContext<Bot>>;
    /** Stops a callback query messages live location */
    stopLiveLocation(params?: TelegramParams.StopMessageLiveLocationParams): Promise<true | TelegramObjects.TelegramMessage> | Promise<true | MessageContext<Bot>>;
    /** Edits a callback query messages reply markup */
    editReplyMarkup(replyMarkup: TelegramParams.EditMessageReplyMarkupParams["reply_markup"], params?: Partial<TelegramParams.EditMessageReplyMarkupParams>): Promise<true | TelegramObjects.TelegramMessage> | Promise<true | MessageContext<Bot>>;
}
interface CallbackQueryContext<Bot extends BotLike> extends Constructor<CallbackQueryContext<Bot>>, CallbackQuery, SendMixin<Bot>, CloneMixin<Bot, CallbackQueryContext<Bot>, CallbackQueryContextOptions<Bot>> {
}
export { CallbackQueryContext };
