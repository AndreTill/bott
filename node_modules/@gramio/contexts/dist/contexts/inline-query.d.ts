import type { TelegramParams } from "@gramio/types";
import type { TelegramObjects } from "@gramio/types";
import { InlineQuery } from "../structures/index";
import type { Constructor, Require } from "../types";
import type { BotLike } from "../types";
import { Context } from "./context";
import { CloneMixin } from "./mixins/index";
interface InlineQueryContextOptions<Bot extends BotLike> {
    bot: Bot;
    update: TelegramObjects.TelegramUpdate;
    payload: TelegramObjects.TelegramInlineQuery;
    updateId: number;
}
/**
 * This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
 *
 * [Documentation](https://core.telegram.org/bots/api/#inlinequery)
 */
declare class InlineQueryContext<Bot extends BotLike> extends Context<Bot> {
    /** The raw data that is used for this Context */
    payload: TelegramObjects.TelegramInlineQuery;
    constructor(options: InlineQueryContextOptions<Bot>);
    /** Sender's ID */
    get senderId(): number;
    /** Checks if query has `location` property */
    hasLocation(): this is Require<this, "location">;
    /** Answers to inline query */
    answerInlineQuery(results: TelegramObjects.TelegramInlineQueryResult[], params?: Partial<TelegramParams.AnswerInlineQueryParams>): Promise<true>;
    /** Answers to inline query. An alias for `answerInlineQuery` */
    answer(results: TelegramObjects.TelegramInlineQueryResult[], params?: Partial<TelegramParams.AnswerInlineQueryParams>): Promise<true>;
}
interface InlineQueryContext<Bot extends BotLike> extends Constructor<InlineQueryContext<Bot>>, InlineQuery, CloneMixin<Bot, InlineQueryContext<Bot>, InlineQueryContextOptions<Bot>> {
}
export { InlineQueryContext };
