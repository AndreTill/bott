"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PollAnswer = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const chat_1 = require("./chat");
const user_1 = require("./user");
/** This object represents an answer of a user in a non-anonymous poll. */
let PollAnswer = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_pollId_decorators;
    let _get_voterChat_decorators;
    let _get_user_decorators;
    let _get_senderId_decorators;
    let _get_optionIds_decorators;
    var PollAnswer = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_pollId_decorators = [(0, inspectable_1.Inspect)()];
            _get_voterChat_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_user_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_senderId_decorators = [(0, inspectable_1.Inspect)()];
            _get_optionIds_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_pollId_decorators, { kind: "getter", name: "pollId", static: false, private: false, access: { has: obj => "pollId" in obj, get: obj => obj.pollId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_voterChat_decorators, { kind: "getter", name: "voterChat", static: false, private: false, access: { has: obj => "voterChat" in obj, get: obj => obj.voterChat }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_user_decorators, { kind: "getter", name: "user", static: false, private: false, access: { has: obj => "user" in obj, get: obj => obj.user }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_senderId_decorators, { kind: "getter", name: "senderId", static: false, private: false, access: { has: obj => "senderId" in obj, get: obj => obj.senderId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_optionIds_decorators, { kind: "getter", name: "optionIds", static: false, private: false, access: { has: obj => "optionIds" in obj, get: obj => obj.optionIds }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            PollAnswer = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Unique poll identifier */
        get pollId() {
            return this.payload.poll_id;
        }
        /** The chat that changed the answer to the poll, if the voter is anonymous */
        get voterChat() {
            const { voter_chat } = this.payload;
            if (!voter_chat)
                return undefined;
            return new chat_1.Chat(voter_chat);
        }
        /** The user, who changed the answer to the poll */
        get user() {
            const { user } = this.payload;
            if (!user)
                return undefined;
            return new user_1.User(user);
        }
        /** Sender ID. Since `user` and `voterChat` are mutually exclusive, this field will either contain `user.id` or `voterChat.id` as a shortcut =) */
        get senderId() {
            return this.user?.id ?? this.voterChat?.id;
        }
        /**
         * 0-based identifiers of answer options, chosen by the user.
         * May be empty if the user retracted their vote.
         */
        get optionIds() {
            return this.payload.option_ids;
        }
    };
    return PollAnswer = _classThis;
})();
exports.PollAnswer = PollAnswer;
(0, utils_1.memoizeGetters)(PollAnswer, ["voterChat", "user"]);
