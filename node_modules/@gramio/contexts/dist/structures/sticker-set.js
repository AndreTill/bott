"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StickerSet = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const index_1 = require("./attachments/index");
const utils_1 = require("../utils");
const photo_size_1 = require("./photo-size");
/** This object represents a sticker set. */
let StickerSet = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_name_decorators;
    let _get_title_decorators;
    let _get_stickerType_decorators;
    let _get_stickers_decorators;
    let _get_thumbnail_decorators;
    var StickerSet = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_name_decorators = [(0, inspectable_1.Inspect)()];
            _get_title_decorators = [(0, inspectable_1.Inspect)()];
            _get_stickerType_decorators = [(0, inspectable_1.Inspect)()];
            _get_stickers_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_thumbnail_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_name_decorators, { kind: "getter", name: "name", static: false, private: false, access: { has: obj => "name" in obj, get: obj => obj.name }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_title_decorators, { kind: "getter", name: "title", static: false, private: false, access: { has: obj => "title" in obj, get: obj => obj.title }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_stickerType_decorators, { kind: "getter", name: "stickerType", static: false, private: false, access: { has: obj => "stickerType" in obj, get: obj => obj.stickerType }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_stickers_decorators, { kind: "getter", name: "stickers", static: false, private: false, access: { has: obj => "stickers" in obj, get: obj => obj.stickers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_thumbnail_decorators, { kind: "getter", name: "thumbnail", static: false, private: false, access: { has: obj => "thumbnail" in obj, get: obj => obj.thumbnail }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            StickerSet = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Sticker set name */
        get name() {
            return this.payload.name;
        }
        /** Sticker set title */
        get title() {
            return this.payload.title;
        }
        /** Type of stickers in the set, currently one of `regular`, `mask`, `custom_emoji` */
        get stickerType() {
            return this.payload.sticker_type;
        }
        /** List of all set stickers */
        get stickers() {
            const { stickers } = this.payload;
            if (!stickers.length)
                return undefined;
            return stickers.map((sticker) => new index_1.StickerAttachment(sticker));
        }
        /** Sticker set thumbnail in the .WEBP or .TGS format */
        get thumbnail() {
            const { thumbnail } = this.payload;
            if (!thumbnail)
                return undefined;
            return new photo_size_1.PhotoSize(thumbnail);
        }
    };
    return StickerSet = _classThis;
})();
exports.StickerSet = StickerSet;
(0, utils_1.memoizeGetters)(StickerSet, ["thumbnail"]);
