"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatMember = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const user_1 = require("./user");
/**
 * This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported:
 * - `ChatMemberOwner`
 * - `ChatMemberAdministrator`
 * - `ChatMemberMember`
 * - `ChatMemberRestricted`
 * - `ChatMemberLeft`
 * - `ChatMemberBanned`
 */
let ChatMember = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_user_decorators;
    let _get_status_decorators;
    let _get_customTitle_decorators;
    let _isAnonymous_decorators;
    let _get_untilDate_decorators;
    let _canBeEdited_decorators;
    let _canManageChat_decorators;
    let _canPostMessages_decorators;
    let _canEditMessages_decorators;
    let _canDeleteMessages_decorators;
    let _canManageVideoChats_decorators;
    let _canRestrictMembers_decorators;
    let _canPromoteMembers_decorators;
    let _canChangeInfo_decorators;
    let _canInviteUsers_decorators;
    let _canPinMessages_decorators;
    let _canPostStories_decorators;
    let _canEditStories_decorators;
    let _canDeleteStories_decorators;
    let _canManageTopics_decorators;
    let _isMember_decorators;
    let _canSendMessages_decorators;
    let _canSendAudios_decorators;
    let _canSendDocuments_decorators;
    let _canSendPhotos_decorators;
    let _canSendVideos_decorators;
    let _canSendVideoNotes_decorators;
    let _canSendVoiceNotes_decorators;
    let _canSendOtherMessages_decorators;
    let _canAddWebPagePreviews_decorators;
    var ChatMember = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_user_decorators = [(0, inspectable_1.Inspect)()];
            _get_status_decorators = [(0, inspectable_1.Inspect)()];
            _get_customTitle_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _isAnonymous_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _get_untilDate_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _canBeEdited_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canManageChat_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canPostMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canEditMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canDeleteMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canManageVideoChats_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canRestrictMembers_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canPromoteMembers_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canChangeInfo_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canInviteUsers_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canPinMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canPostStories_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canEditStories_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canDeleteStories_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canManageTopics_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _isMember_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canSendMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canSendAudios_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canSendDocuments_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canSendPhotos_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canSendVideos_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canSendVideoNotes_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canSendVoiceNotes_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canSendOtherMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _canAddWebPagePreviews_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            tslib_1.__esDecorate(this, null, _get_user_decorators, { kind: "getter", name: "user", static: false, private: false, access: { has: obj => "user" in obj, get: obj => obj.user }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_status_decorators, { kind: "getter", name: "status", static: false, private: false, access: { has: obj => "status" in obj, get: obj => obj.status }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_customTitle_decorators, { kind: "getter", name: "customTitle", static: false, private: false, access: { has: obj => "customTitle" in obj, get: obj => obj.customTitle }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isAnonymous_decorators, { kind: "method", name: "isAnonymous", static: false, private: false, access: { has: obj => "isAnonymous" in obj, get: obj => obj.isAnonymous }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_untilDate_decorators, { kind: "getter", name: "untilDate", static: false, private: false, access: { has: obj => "untilDate" in obj, get: obj => obj.untilDate }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canBeEdited_decorators, { kind: "method", name: "canBeEdited", static: false, private: false, access: { has: obj => "canBeEdited" in obj, get: obj => obj.canBeEdited }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canManageChat_decorators, { kind: "method", name: "canManageChat", static: false, private: false, access: { has: obj => "canManageChat" in obj, get: obj => obj.canManageChat }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canPostMessages_decorators, { kind: "method", name: "canPostMessages", static: false, private: false, access: { has: obj => "canPostMessages" in obj, get: obj => obj.canPostMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canEditMessages_decorators, { kind: "method", name: "canEditMessages", static: false, private: false, access: { has: obj => "canEditMessages" in obj, get: obj => obj.canEditMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canDeleteMessages_decorators, { kind: "method", name: "canDeleteMessages", static: false, private: false, access: { has: obj => "canDeleteMessages" in obj, get: obj => obj.canDeleteMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canManageVideoChats_decorators, { kind: "method", name: "canManageVideoChats", static: false, private: false, access: { has: obj => "canManageVideoChats" in obj, get: obj => obj.canManageVideoChats }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canRestrictMembers_decorators, { kind: "method", name: "canRestrictMembers", static: false, private: false, access: { has: obj => "canRestrictMembers" in obj, get: obj => obj.canRestrictMembers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canPromoteMembers_decorators, { kind: "method", name: "canPromoteMembers", static: false, private: false, access: { has: obj => "canPromoteMembers" in obj, get: obj => obj.canPromoteMembers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canChangeInfo_decorators, { kind: "method", name: "canChangeInfo", static: false, private: false, access: { has: obj => "canChangeInfo" in obj, get: obj => obj.canChangeInfo }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canInviteUsers_decorators, { kind: "method", name: "canInviteUsers", static: false, private: false, access: { has: obj => "canInviteUsers" in obj, get: obj => obj.canInviteUsers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canPinMessages_decorators, { kind: "method", name: "canPinMessages", static: false, private: false, access: { has: obj => "canPinMessages" in obj, get: obj => obj.canPinMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canPostStories_decorators, { kind: "method", name: "canPostStories", static: false, private: false, access: { has: obj => "canPostStories" in obj, get: obj => obj.canPostStories }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canEditStories_decorators, { kind: "method", name: "canEditStories", static: false, private: false, access: { has: obj => "canEditStories" in obj, get: obj => obj.canEditStories }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canDeleteStories_decorators, { kind: "method", name: "canDeleteStories", static: false, private: false, access: { has: obj => "canDeleteStories" in obj, get: obj => obj.canDeleteStories }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canManageTopics_decorators, { kind: "method", name: "canManageTopics", static: false, private: false, access: { has: obj => "canManageTopics" in obj, get: obj => obj.canManageTopics }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isMember_decorators, { kind: "method", name: "isMember", static: false, private: false, access: { has: obj => "isMember" in obj, get: obj => obj.isMember }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canSendMessages_decorators, { kind: "method", name: "canSendMessages", static: false, private: false, access: { has: obj => "canSendMessages" in obj, get: obj => obj.canSendMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canSendAudios_decorators, { kind: "method", name: "canSendAudios", static: false, private: false, access: { has: obj => "canSendAudios" in obj, get: obj => obj.canSendAudios }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canSendDocuments_decorators, { kind: "method", name: "canSendDocuments", static: false, private: false, access: { has: obj => "canSendDocuments" in obj, get: obj => obj.canSendDocuments }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canSendPhotos_decorators, { kind: "method", name: "canSendPhotos", static: false, private: false, access: { has: obj => "canSendPhotos" in obj, get: obj => obj.canSendPhotos }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canSendVideos_decorators, { kind: "method", name: "canSendVideos", static: false, private: false, access: { has: obj => "canSendVideos" in obj, get: obj => obj.canSendVideos }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canSendVideoNotes_decorators, { kind: "method", name: "canSendVideoNotes", static: false, private: false, access: { has: obj => "canSendVideoNotes" in obj, get: obj => obj.canSendVideoNotes }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canSendVoiceNotes_decorators, { kind: "method", name: "canSendVoiceNotes", static: false, private: false, access: { has: obj => "canSendVoiceNotes" in obj, get: obj => obj.canSendVoiceNotes }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canSendOtherMessages_decorators, { kind: "method", name: "canSendOtherMessages", static: false, private: false, access: { has: obj => "canSendOtherMessages" in obj, get: obj => obj.canSendOtherMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canAddWebPagePreviews_decorators, { kind: "method", name: "canAddWebPagePreviews", static: false, private: false, access: { has: obj => "canAddWebPagePreviews" in obj, get: obj => obj.canAddWebPagePreviews }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ChatMember = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Information about the user */
        get user() {
            return new user_1.User(this.payload.user);
        }
        /** The member's status in the chat */
        get status() {
            return this.payload.status;
        }
        /** Owner and administrators only. Custom title for this user */
        get customTitle() {
            return this.payload.custom_title;
        }
        /** Owner and administrators only. `true`, if the user's presence in the chat is hidden */
        isAnonymous() {
            return this.payload.is_anonymous;
        }
        /**
         * Restricted and kicked only.
         * Date when restrictions will be lifted for this user;
         * unix time
         */
        get untilDate() {
            return this.payload.until_date;
        }
        /**
         * Administrators only.
         * `true`, if the bot is allowed to edit administrator privileges of that
         * user
         */
        canBeEdited() {
            return this.payload.can_be_edited;
        }
        /**
         * Administrators only.
         * `true`, if the administrator can access the chat event log, chat statistics,
         * message statistics in channels, see channel members, see anonymous administrators
         * in supergroups and ignore slow mode.
         * Implied by any other administrator privilege
         */
        canManageChat() {
            return this.payload.can_manage_chat;
        }
        /**
         * Administrators only.
         * `true`, if the administrator can post in the channel;
         * channels only
         */
        canPostMessages() {
            return this.payload.can_post_messages;
        }
        /**
         * Administrators only.
         * `true`, if the administrator can edit messages of other users
         * and can pin messages; channels only
         */
        canEditMessages() {
            return this.payload.can_edit_messages;
        }
        /**
         * Administrators only.
         * `true`, if the administrator can delete messages of other users
         */
        canDeleteMessages() {
            return this.payload.can_delete_messages;
        }
        /**
         * Administrators only.
         * `true`, if the administrator can manage video chats
         */
        canManageVideoChats() {
            return this.payload.can_manage_video_chats;
        }
        /**
         * Administrators only.
         * `true`, if the administrator can restrict, ban or unban chat members
         */
        canRestrictMembers() {
            return this.payload.can_restrict_members;
        }
        /**
         * Administrators only.
         * `true`, if the administrator can add new administrators with a subset o
         * their own privileges or demote administrators that he has promoted,
         * directly or indirectly (promoted by administrators that were appointed by
         * the user)
         */
        canPromoteMembers() {
            return this.payload.can_promote_members;
        }
        /**
         * Administrators and restricted only.
         * `true`, if the user is allowed to change the chat title,
         * photo and other settings
         */
        canChangeInfo() {
            return this.payload.can_change_info;
        }
        /**
         * Administrators and restricted only.
         * `true`, if the user is allowed to invite new users to the chat
         */
        canInviteUsers() {
            return this.payload.can_invite_users;
        }
        /**
         * Administrators and restricted only.
         * `true`, if the user is allowed to pin messages;
         * groups and supergroups only
         */
        canPinMessages() {
            return this.payload.can_pin_messages;
        }
        /** `true`, if the administrator can post stories in the channel; channels only */
        canPostStories() {
            return this.payload.can_post_stories;
        }
        /** `true`, if the administrator can edit stories posted by other users; channels only */
        canEditStories() {
            return this.payload.can_edit_stories;
        }
        /** `true`, if the administrator can delete stories posted by other users; channels only */
        canDeleteStories() {
            return this.payload.can_delete_stories;
        }
        /** `true`, if the user is allowed to create, rename, close, and reopen forum topics; supergroups only */
        canManageTopics() {
            return this.payload.can_manage_topics;
        }
        /**
         * Restricted only.
         * `true`, if the user is a member of the chat at the moment of the request
         */
        isMember() {
            return this.payload.is_member;
        }
        /**
         * Restricted only.
         * `true`, if the user is allowed to send text messages,
         * contacts, locations and venues
         */
        canSendMessages() {
            return this.payload.can_send_messages;
        }
        /** `true`, if the user is allowed to send audios */
        canSendAudios() {
            return this.payload.can_send_audios;
        }
        /** `true`, if the user is allowed to send documents */
        canSendDocuments() {
            return this.payload.can_send_documents;
        }
        /** `true`, if the user is allowed to send photos */
        canSendPhotos() {
            return this.payload.can_send_photos;
        }
        /** `true`, if the user is allowed to send videos */
        canSendVideos() {
            return this.payload.can_send_videos;
        }
        /** `true`, if the user is allowed to send video notes */
        canSendVideoNotes() {
            return this.payload.can_send_video_notes;
        }
        /** `true`, if the user is allowed to send voice notes */
        canSendVoiceNotes() {
            return this.payload.can_send_voice_notes;
        }
        /** Restricted only. `true`, if the user is allowed to send polls */
        canSendPolls() {
            return this.payload.can_send_polls;
        }
        /**
         * Restricted only.
         * `true`, if the user is allowed to send animations, games,
         * stickers and use inline bots
         */
        canSendOtherMessages() {
            return this.payload.can_send_other_messages;
        }
        /**
         * Restricted only
         * `true`, if the user is allowed to add web page previews to their messages
         */
        canAddWebPagePreviews() {
            return this.payload.can_add_web_page_previews;
        }
    };
    return ChatMember = _classThis;
})();
exports.ChatMember = ChatMember;
(0, utils_1.memoizeGetters)(ChatMember, ["user"]);
