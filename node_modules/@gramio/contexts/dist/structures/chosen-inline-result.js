"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChosenInlineResult = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const location_1 = require("./location");
const user_1 = require("./user");
/** Represents a result of an inline query that was chosen by the user and sent to their chat partner. */
let ChosenInlineResult = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_resultId_decorators;
    let _get_from_decorators;
    let _get_senderId_decorators;
    let _get_location_decorators;
    let _get_inlineMessageId_decorators;
    let _get_query_decorators;
    var ChosenInlineResult = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_resultId_decorators = [(0, inspectable_1.Inspect)()];
            _get_from_decorators = [(0, inspectable_1.Inspect)()];
            _get_senderId_decorators = [(0, inspectable_1.Inspect)()];
            _get_location_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_inlineMessageId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_query_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_resultId_decorators, { kind: "getter", name: "resultId", static: false, private: false, access: { has: obj => "resultId" in obj, get: obj => obj.resultId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_from_decorators, { kind: "getter", name: "from", static: false, private: false, access: { has: obj => "from" in obj, get: obj => obj.from }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_senderId_decorators, { kind: "getter", name: "senderId", static: false, private: false, access: { has: obj => "senderId" in obj, get: obj => obj.senderId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_location_decorators, { kind: "getter", name: "location", static: false, private: false, access: { has: obj => "location" in obj, get: obj => obj.location }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_inlineMessageId_decorators, { kind: "getter", name: "inlineMessageId", static: false, private: false, access: { has: obj => "inlineMessageId" in obj, get: obj => obj.inlineMessageId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_query_decorators, { kind: "getter", name: "query", static: false, private: false, access: { has: obj => "query" in obj, get: obj => obj.query }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ChosenInlineResult = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** The unique identifier for the result that was chosen */
        get resultId() {
            return this.payload.result_id;
        }
        /** The user that chose the result */
        get from() {
            return new user_1.User(this.payload.from);
        }
        /** Sender ID */
        get senderId() {
            return this.from.id;
        }
        /** Sender location, only for bots that require user location */
        get location() {
            const { location } = this.payload;
            if (!location)
                return undefined;
            return new location_1.Location(location);
        }
        /**
         * Identifier of the sent inline message. Available only if there is an
         * inline keyboard attached to the message. Will be also received in callback
         * queries and can be used to edit the message.
         */
        get inlineMessageId() {
            return this.payload.inline_message_id;
        }
        /** The query that was used to obtain the result */
        get query() {
            return this.payload.query;
        }
    };
    return ChosenInlineResult = _classThis;
})();
exports.ChosenInlineResult = ChosenInlineResult;
(0, utils_1.memoizeGetters)(ChosenInlineResult, ["from", "location"]);
