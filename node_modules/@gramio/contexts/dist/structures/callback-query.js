"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallbackQuery = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const inaccessible_message_1 = require("./inaccessible-message");
const message_1 = require("./message");
const user_1 = require("./user");
/**
 * This object represents an incoming callback query from a callback button in
 * an inline keyboard. If the button that originated the query was attached to
 * a message sent by the bot, the field message will be present.
 * If the button was attached to a message sent via the bot (in inline mode),
 * the field inline_message_id will be present.
 * Exactly one of the fields `data` or `game_short_name` will be present.
 */
let CallbackQuery = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_id_decorators;
    let _get_from_decorators;
    let _get_message_decorators;
    let _get_inlineMessageId_decorators;
    let _get_chatInstance_decorators;
    let _get_data_decorators;
    let _get_gameShortName_decorators;
    var CallbackQuery = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_id_decorators = [(0, inspectable_1.Inspect)()];
            _get_from_decorators = [(0, inspectable_1.Inspect)()];
            _get_message_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_inlineMessageId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_chatInstance_decorators = [(0, inspectable_1.Inspect)()];
            _get_data_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_gameShortName_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_id_decorators, { kind: "getter", name: "id", static: false, private: false, access: { has: obj => "id" in obj, get: obj => obj.id }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_from_decorators, { kind: "getter", name: "from", static: false, private: false, access: { has: obj => "from" in obj, get: obj => obj.from }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_message_decorators, { kind: "getter", name: "message", static: false, private: false, access: { has: obj => "message" in obj, get: obj => obj.message }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_inlineMessageId_decorators, { kind: "getter", name: "inlineMessageId", static: false, private: false, access: { has: obj => "inlineMessageId" in obj, get: obj => obj.inlineMessageId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_chatInstance_decorators, { kind: "getter", name: "chatInstance", static: false, private: false, access: { has: obj => "chatInstance" in obj, get: obj => obj.chatInstance }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_data_decorators, { kind: "getter", name: "data", static: false, private: false, access: { has: obj => "data" in obj, get: obj => obj.data }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_gameShortName_decorators, { kind: "getter", name: "gameShortName", static: false, private: false, access: { has: obj => "gameShortName" in obj, get: obj => obj.gameShortName }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            CallbackQuery = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Unique identifier for this query */
        get id() {
            return this.payload.id;
        }
        /** Sender */
        get from() {
            return new user_1.User(this.payload.from);
        }
        /** Sender ID */
        get senderId() {
            return this.from.id;
        }
        /**
         * Message sent by the bot with the callback button that originated the query
         */
        get message() {
            const { message } = this.payload;
            if (!message)
                return undefined;
            if (message.date === 0) {
                return new inaccessible_message_1.InaccessibleMessage(message);
            }
            return new message_1.Message(message);
        }
        /**
         * Identifier of the message sent via the bot in inline mode,
         * that originated the query.
         */
        get inlineMessageId() {
            return this.payload.inline_message_id;
        }
        /**
         * Global identifier, uniquely corresponding to the chat to which the message
         * with the callback button was sent. Useful for high scores in games.
         */
        get chatInstance() {
            return this.payload.chat_instance;
        }
        /**
         * Data associated with the callback button.
         * Be aware that a bad client can send arbitrary data in this field.
         */
        get data() {
            return this.payload.data;
        }
        /**
         * Short name of a Game to be returned,
         * serves as the unique identifier for the game
         */
        get gameShortName() {
            return this.payload.game_short_name;
        }
    };
    return CallbackQuery = _classThis;
})();
exports.CallbackQuery = CallbackQuery;
(0, utils_1.memoizeGetters)(CallbackQuery, ["from", "message"]);
