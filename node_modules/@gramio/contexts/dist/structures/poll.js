"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Poll = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const message_entity_1 = require("./message-entity");
const poll_option_1 = require("./poll-option");
/** This object contains information about a poll. */
let Poll = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_id_decorators;
    let _get_question_decorators;
    let _get_questionEntities_decorators;
    let _get_options_decorators;
    let _get_totalVoterCount_decorators;
    let _isClosed_decorators;
    let _isAnonymous_decorators;
    let _get_type_decorators;
    let _get_allowsMultipleAnswers_decorators;
    let _get_correctOptionId_decorators;
    let _get_explanation_decorators;
    let _get_explanationEntities_decorators;
    let _get_openPeriod_decorators;
    let _get_closeDate_decorators;
    var Poll = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_id_decorators = [(0, inspectable_1.Inspect)()];
            _get_question_decorators = [(0, inspectable_1.Inspect)()];
            _get_questionEntities_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_options_decorators = [(0, inspectable_1.Inspect)()];
            _get_totalVoterCount_decorators = [(0, inspectable_1.Inspect)()];
            _isClosed_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _isAnonymous_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _get_type_decorators = [(0, inspectable_1.Inspect)()];
            _get_allowsMultipleAnswers_decorators = [(0, inspectable_1.Inspect)()];
            _get_correctOptionId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_explanation_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_explanationEntities_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_openPeriod_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_closeDate_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_id_decorators, { kind: "getter", name: "id", static: false, private: false, access: { has: obj => "id" in obj, get: obj => obj.id }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_question_decorators, { kind: "getter", name: "question", static: false, private: false, access: { has: obj => "question" in obj, get: obj => obj.question }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_questionEntities_decorators, { kind: "getter", name: "questionEntities", static: false, private: false, access: { has: obj => "questionEntities" in obj, get: obj => obj.questionEntities }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_options_decorators, { kind: "getter", name: "options", static: false, private: false, access: { has: obj => "options" in obj, get: obj => obj.options }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_totalVoterCount_decorators, { kind: "getter", name: "totalVoterCount", static: false, private: false, access: { has: obj => "totalVoterCount" in obj, get: obj => obj.totalVoterCount }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isClosed_decorators, { kind: "method", name: "isClosed", static: false, private: false, access: { has: obj => "isClosed" in obj, get: obj => obj.isClosed }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isAnonymous_decorators, { kind: "method", name: "isAnonymous", static: false, private: false, access: { has: obj => "isAnonymous" in obj, get: obj => obj.isAnonymous }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_type_decorators, { kind: "getter", name: "type", static: false, private: false, access: { has: obj => "type" in obj, get: obj => obj.type }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_allowsMultipleAnswers_decorators, { kind: "getter", name: "allowsMultipleAnswers", static: false, private: false, access: { has: obj => "allowsMultipleAnswers" in obj, get: obj => obj.allowsMultipleAnswers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_correctOptionId_decorators, { kind: "getter", name: "correctOptionId", static: false, private: false, access: { has: obj => "correctOptionId" in obj, get: obj => obj.correctOptionId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_explanation_decorators, { kind: "getter", name: "explanation", static: false, private: false, access: { has: obj => "explanation" in obj, get: obj => obj.explanation }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_explanationEntities_decorators, { kind: "getter", name: "explanationEntities", static: false, private: false, access: { has: obj => "explanationEntities" in obj, get: obj => obj.explanationEntities }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_openPeriod_decorators, { kind: "getter", name: "openPeriod", static: false, private: false, access: { has: obj => "openPeriod" in obj, get: obj => obj.openPeriod }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_closeDate_decorators, { kind: "getter", name: "closeDate", static: false, private: false, access: { has: obj => "closeDate" in obj, get: obj => obj.closeDate }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            Poll = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Unique poll identifier */
        get id() {
            return this.payload.id;
        }
        /** Poll question, `1-300` characters */
        get question() {
            return this.payload.question;
        }
        /**
         * *Optional*. Special entities that appear in the *question*. Currently, only custom emoji entities are allowed in poll questions
         */
        get questionEntities() {
            return this.payload.question_entities
                ? this.payload.question_entities.map((x) => new message_entity_1.MessageEntity(x))
                : undefined;
        }
        /** List of poll options */
        get options() {
            return this.payload.options.map((option) => new poll_option_1.PollOption(option));
        }
        /** Total number of users that voted in the poll */
        get totalVoterCount() {
            return this.payload.total_voter_count;
        }
        /** `true`, if the poll is closed */
        isClosed() {
            return this.payload.is_closed;
        }
        /** `true`, if the poll is anonymous */
        isAnonymous() {
            return this.payload.is_anonymous;
        }
        /** Poll type, currently can be `regular` or `quiz` */
        get type() {
            return this.payload.type;
        }
        /** `true`, if the poll allows multiple answers */
        get allowsMultipleAnswers() {
            return this.payload.allows_multiple_answers;
        }
        /**
         * 0-based identifier of the correct answer option. Available only for polls
         * in the quiz mode, which are closed, or was sent (not forwarded) by the bot
         * or to the private chat with the bot.
         */
        get correctOptionId() {
            return this.payload.correct_option_id;
        }
        /**
         * Text that is shown when a user chooses an incorrect answer or taps on the
         * lamp icon in a quiz-style poll, 0-200 characters
         */
        get explanation() {
            return this.payload.explanation;
        }
        /**
         * Special entities like usernames, URLs, bot commands, etc. that appear in
         * the explanation
         */
        get explanationEntities() {
            const { explanation_entities } = this.payload;
            if (!explanation_entities)
                return undefined;
            return explanation_entities.map((entity) => new message_entity_1.MessageEntity(entity));
        }
        /** Amount of time in seconds the poll will be active after creation */
        get openPeriod() {
            return this.payload.open_period;
        }
        /**
         * Point in time (Unix timestamp) when the poll will be automatically closed
         */
        get closeDate() {
            return this.payload.close_date;
        }
    };
    return Poll = _classThis;
})();
exports.Poll = Poll;
(0, utils_1.memoizeGetters)(Poll, ["explanationEntities"]);
