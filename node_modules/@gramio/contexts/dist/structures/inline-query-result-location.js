"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineQueryResultLocation = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const inline_keyboard_markup_1 = require("./inline-keyboard-markup");
/**
 * Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the location.
 *
 * [Documentation](https://core.telegram.org/bots/api/#inlinequeryresultlocation)
 */
let InlineQueryResultLocation = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_type_decorators;
    let _get_id_decorators;
    let _get_latitude_decorators;
    let _get_longitude_decorators;
    let _get_title_decorators;
    let _get_horizontalAccuracy_decorators;
    let _get_livePeriod_decorators;
    let _get_heading_decorators;
    let _get_proximityAlertRadius_decorators;
    let _get_replyMarkup_decorators;
    let _get_inputMessageContent_decorators;
    let _get_thumbnailUrl_decorators;
    let _get_thumbnailWidth_decorators;
    let _get_thumbnailHeight_decorators;
    var InlineQueryResultLocation = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_type_decorators = [(0, inspectable_1.Inspect)()];
            _get_id_decorators = [(0, inspectable_1.Inspect)()];
            _get_latitude_decorators = [(0, inspectable_1.Inspect)()];
            _get_longitude_decorators = [(0, inspectable_1.Inspect)()];
            _get_title_decorators = [(0, inspectable_1.Inspect)()];
            _get_horizontalAccuracy_decorators = [(0, inspectable_1.Inspect)()];
            _get_livePeriod_decorators = [(0, inspectable_1.Inspect)()];
            _get_heading_decorators = [(0, inspectable_1.Inspect)()];
            _get_proximityAlertRadius_decorators = [(0, inspectable_1.Inspect)()];
            _get_replyMarkup_decorators = [(0, inspectable_1.Inspect)()];
            _get_inputMessageContent_decorators = [(0, inspectable_1.Inspect)()];
            _get_thumbnailUrl_decorators = [(0, inspectable_1.Inspect)()];
            _get_thumbnailWidth_decorators = [(0, inspectable_1.Inspect)()];
            _get_thumbnailHeight_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_type_decorators, { kind: "getter", name: "type", static: false, private: false, access: { has: obj => "type" in obj, get: obj => obj.type }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_id_decorators, { kind: "getter", name: "id", static: false, private: false, access: { has: obj => "id" in obj, get: obj => obj.id }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_latitude_decorators, { kind: "getter", name: "latitude", static: false, private: false, access: { has: obj => "latitude" in obj, get: obj => obj.latitude }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_longitude_decorators, { kind: "getter", name: "longitude", static: false, private: false, access: { has: obj => "longitude" in obj, get: obj => obj.longitude }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_title_decorators, { kind: "getter", name: "title", static: false, private: false, access: { has: obj => "title" in obj, get: obj => obj.title }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_horizontalAccuracy_decorators, { kind: "getter", name: "horizontalAccuracy", static: false, private: false, access: { has: obj => "horizontalAccuracy" in obj, get: obj => obj.horizontalAccuracy }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_livePeriod_decorators, { kind: "getter", name: "livePeriod", static: false, private: false, access: { has: obj => "livePeriod" in obj, get: obj => obj.livePeriod }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_heading_decorators, { kind: "getter", name: "heading", static: false, private: false, access: { has: obj => "heading" in obj, get: obj => obj.heading }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_proximityAlertRadius_decorators, { kind: "getter", name: "proximityAlertRadius", static: false, private: false, access: { has: obj => "proximityAlertRadius" in obj, get: obj => obj.proximityAlertRadius }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_replyMarkup_decorators, { kind: "getter", name: "replyMarkup", static: false, private: false, access: { has: obj => "replyMarkup" in obj, get: obj => obj.replyMarkup }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_inputMessageContent_decorators, { kind: "getter", name: "inputMessageContent", static: false, private: false, access: { has: obj => "inputMessageContent" in obj, get: obj => obj.inputMessageContent }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_thumbnailUrl_decorators, { kind: "getter", name: "thumbnailUrl", static: false, private: false, access: { has: obj => "thumbnailUrl" in obj, get: obj => obj.thumbnailUrl }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_thumbnailWidth_decorators, { kind: "getter", name: "thumbnailWidth", static: false, private: false, access: { has: obj => "thumbnailWidth" in obj, get: obj => obj.thumbnailWidth }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_thumbnailHeight_decorators, { kind: "getter", name: "thumbnailHeight", static: false, private: false, access: { has: obj => "thumbnailHeight" in obj, get: obj => obj.thumbnailHeight }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            InlineQueryResultLocation = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * Type of the result, must be *location*
         */
        get type() {
            return this.payload.type;
        }
        /**
         * Unique identifier for this result, 1-64 Bytes
         */
        get id() {
            return this.payload.id;
        }
        /**
         * Location latitude in degrees
         */
        get latitude() {
            return this.payload.latitude;
        }
        /**
         * Location longitude in degrees
         */
        get longitude() {
            return this.payload.longitude;
        }
        /**
         * Location title
         */
        get title() {
            return this.payload.title;
        }
        /**
         * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
         */
        get horizontalAccuracy() {
            return this.payload.horizontal_accuracy;
        }
        /**
         * *Optional*. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
         */
        get livePeriod() {
            return this.payload.live_period;
        }
        /**
         * *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         */
        get heading() {
            return this.payload.heading;
        }
        /**
         * *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         */
        get proximityAlertRadius() {
            return this.payload.proximity_alert_radius;
        }
        /**
         * *Optional*. [Inline keyboard](https://core.telegram.org/bots/features#inline-keyboards) attached to the message
         */
        get replyMarkup() {
            return this.payload.reply_markup
                ? new inline_keyboard_markup_1.InlineKeyboardMarkup("toJSON" in this.payload.reply_markup
                    ? this.payload.reply_markup.toJSON()
                    : this.payload.reply_markup)
                : undefined;
        }
        /**
         * *Optional*. Content of the message to be sent instead of the location
         */
        get inputMessageContent() {
            return this.payload.input_message_content;
        }
        /**
         * *Optional*. Url of the thumbnail for the result
         */
        get thumbnailUrl() {
            return this.payload.thumbnail_url;
        }
        /**
         * *Optional*. Thumbnail width
         */
        get thumbnailWidth() {
            return this.payload.thumbnail_width;
        }
        /**
         * *Optional*. Thumbnail height
         */
        get thumbnailHeight() {
            return this.payload.thumbnail_height;
        }
    };
    return InlineQueryResultLocation = _classThis;
})();
exports.InlineQueryResultLocation = InlineQueryResultLocation;
(0, utils_1.memoizeGetters)(InlineQueryResultLocation, ["replyMarkup"]);
