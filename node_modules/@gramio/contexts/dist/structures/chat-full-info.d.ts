import type { TelegramObjects } from "@gramio/types";
import { Birthdate } from "./birthdate";
import { BusinessIntro } from "./business-intro";
import { BusinessLocation } from "./business-location";
import { BusinessOpeningHours } from "./business-opening-hours";
import { Chat } from "./chat";
import { ChatLocation } from "./chat-location";
import { ChatPermissions } from "./chat-permissions";
import { ChatPhoto } from "./chat-photo";
import { Message } from "./message";
/**
 * This object contains full information about a chat.
 *
 * [Documentation](https://core.telegram.org/bots/api/#chatfullinfo)
 */
export declare class ChatFullInfo {
    payload: TelegramObjects.TelegramChatFullInfo;
    constructor(payload: TelegramObjects.TelegramChatFullInfo);
    /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
    get [Symbol.toStringTag](): string;
    /**
     * Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
     */
    get id(): number;
    /**
     * Type of the chat, can be either “private”, “group”, “supergroup” or “channel”
     */
    get type(): TelegramObjects.TelegramChatFullInfoType;
    /**
     * *Optional*. Title, for supergroups, channels and group chats
     */
    get title(): string | undefined;
    /**
     * *Optional*. Username, for private chats, supergroups and channels if available
     */
    get username(): string | undefined;
    /**
     * *Optional*. First name of the other party in a private chat
     */
    get firstName(): string | undefined;
    /**
     * *Optional*. Last name of the other party in a private chat
     */
    get lastName(): string | undefined;
    /**
     * *Optional*. *True*, if the supergroup chat is a forum (has [topics](https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-in-groups) enabled)
     */
    get isForum(): boolean | undefined;
    /**
     * Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See [accent colors](https://core.telegram.org/bots/api/#accent-colors) for more details.
     */
    get accentColorId(): number;
    /**
     * The maximum number of reactions that can be set on a message in the chat
     */
    get maxReactionCount(): number;
    /**
     * *Optional*. Chat photo
     */
    get photo(): ChatPhoto | undefined;
    /**
     * *Optional*. If non-empty, the list of all [active chat usernames](https://telegram.org/blog/topics-in-groups-collectible-usernames#collectible-usernames); for private chats, supergroups and channels
     */
    get activeUsernames(): string[] | undefined;
    /**
     * *Optional*. For private chats, the date of birth of the user
     */
    get birthdate(): Birthdate | undefined;
    /**
     * *Optional*. For private chats with business accounts, the intro of the business
     */
    get businessIntro(): BusinessIntro | undefined;
    /**
     * *Optional*. For private chats with business accounts, the location of the business
     */
    get businessLocation(): BusinessLocation | undefined;
    /**
     * *Optional*. For private chats with business accounts, the opening hours of the business
     */
    get businessOpeningHours(): BusinessOpeningHours | undefined;
    /**
     * *Optional*. For private chats, the personal channel of the user
     */
    get personalChat(): Chat | undefined;
    /**
     * *Optional*. List of available reactions allowed in the chat. If omitted, then all [emoji reactions](https://core.telegram.org/bots/api/#reactiontypeemoji) are allowed.
     */
    get availableReactions(): TelegramObjects.TelegramReactionType[] | undefined;
    /**
     * *Optional*. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background
     */
    get backgroundCustomEmojiId(): string | undefined;
    /**
     * *Optional*. Identifier of the accent color for the chat's profile background. See [profile accent colors](https://core.telegram.org/bots/api/#profile-accent-colors) for more details.
     */
    get profileAccentColorId(): number | undefined;
    /**
     * *Optional*. Custom emoji identifier of the emoji chosen by the chat for its profile background
     */
    get profileBackgroundCustomEmojiId(): string | undefined;
    /**
     * *Optional*. Custom emoji identifier of the emoji status of the chat or the other party in a private chat
     */
    get emojiStatusCustomEmojiId(): string | undefined;
    /**
     * *Optional*. Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any
     */
    get emojiStatusExpirationDate(): number | undefined;
    /**
     * *Optional*. Bio of the other party in a private chat
     */
    get bio(): string | undefined;
    /**
     * *Optional*. *True*, if privacy settings of the other party in the private chat allows to use `tg://user?id=<user_id>` links only in chats with the user
     */
    get hasPrivateForwards(): boolean | undefined;
    /**
     * *Optional*. *True*, if the privacy settings of the other party restrict sending voice and video note messages in the private chat
     */
    get hasRestrictedVoiceAndVideoMessages(): boolean | undefined;
    /**
     * *Optional*. *True*, if users need to join the supergroup before they can send messages
     */
    get joinToSendMessages(): boolean | undefined;
    /**
     * *Optional*. *True*, if all users directly joining the supergroup need to be approved by supergroup administrators
     */
    get joinByRequest(): boolean | undefined;
    /**
     * *Optional*. Description, for groups, supergroups and channel chats
     */
    get description(): string | undefined;
    /**
     * *Optional*. Primary invite link, for groups, supergroups and channel chats
     */
    get inviteLink(): string | undefined;
    /**
     * *Optional*. The most recent pinned message (by sending date)
     */
    get pinnedMessage(): Message | undefined;
    /**
     * *Optional*. Default chat member permissions, for groups and supergroups
     */
    get permissions(): ChatPermissions | undefined;
    /**
     * *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds
     */
    get slowModeDelay(): number | undefined;
    /**
     * *Optional*. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions
     */
    get unrestrictBoostCount(): number | undefined;
    /**
     * *Optional*. The time after which all messages sent to the chat will be automatically deleted; in seconds
     */
    get messageAutoDeleteTime(): number | undefined;
    /**
     * *Optional*. *True*, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.
     */
    get hasAggressiveAntiSpamEnabled(): boolean | undefined;
    /**
     * *Optional*. *True*, if non-administrators can only get the list of bots and administrators in the chat
     */
    get hasHiddenMembers(): boolean | undefined;
    /**
     * *Optional*. *True*, if messages from the chat can't be forwarded to other chats
     */
    get hasProtectedContent(): boolean | undefined;
    /**
     * *Optional*. *True*, if new chat members will have access to old messages; available only to chat administrators
     */
    get hasVisibleHistory(): boolean | undefined;
    /**
     * *Optional*. For supergroups, name of the group sticker set
     */
    get stickerSetName(): string | undefined;
    /**
     * *Optional*. *True*, if the bot can change the group sticker set
     */
    get canSendPaidMedia(): boolean | undefined;
    /**
     * *Optional*. *True*, if the bot can change the group sticker set
     */
    get canSetStickerSet(): boolean | undefined;
    /**
     * *Optional*. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group.
     */
    get customEmojiStickerSetName(): string | undefined;
    /**
     * *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
     */
    get linkedChatId(): number | undefined;
    /**
     * *Optional*. For supergroups, the location to which the supergroup is connected
     */
    get location(): ChatLocation | undefined;
}
