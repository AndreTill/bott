"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dice = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/** This object represents an animated emoji that displays a random value. */
let Dice = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_emoji_decorators;
    let _get_value_decorators;
    var Dice = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_emoji_decorators = [(0, inspectable_1.Inspect)()];
            _get_value_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_emoji_decorators, { kind: "getter", name: "emoji", static: false, private: false, access: { has: obj => "emoji" in obj, get: obj => obj.emoji }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_value_decorators, { kind: "getter", name: "value", static: false, private: false, access: { has: obj => "value" in obj, get: obj => obj.value }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            Dice = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Emoji on which the dice throw animation is based */
        get emoji() {
            return this.payload.emoji;
        }
        /**
         * Value of the dice,
         * `1-6` for `🎲`, `🎯` and `🎳` base emoji,
         * `1-5` for `🏀` and `⚽️` base emoji,
         * `1-64` for `🎰` base emoji
         */
        get value() {
            return this.payload.value;
        }
    };
    return Dice = _classThis;
})();
exports.Dice = Dice;
