"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginUrl = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/**
 * This object represents a parameter of the inline keyboard button used to
 * automatically authorize a user.
 */
let LoginUrl = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_url_decorators;
    let _get_forwardText_decorators;
    let _get_botUsername_decorators;
    let _get_requestWriteAccess_decorators;
    var LoginUrl = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_url_decorators = [(0, inspectable_1.Inspect)()];
            _get_forwardText_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_botUsername_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_requestWriteAccess_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_url_decorators, { kind: "getter", name: "url", static: false, private: false, access: { has: obj => "url" in obj, get: obj => obj.url }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_forwardText_decorators, { kind: "getter", name: "forwardText", static: false, private: false, access: { has: obj => "forwardText" in obj, get: obj => obj.forwardText }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_botUsername_decorators, { kind: "getter", name: "botUsername", static: false, private: false, access: { has: obj => "botUsername" in obj, get: obj => obj.botUsername }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_requestWriteAccess_decorators, { kind: "getter", name: "requestWriteAccess", static: false, private: false, access: { has: obj => "requestWriteAccess" in obj, get: obj => obj.requestWriteAccess }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            LoginUrl = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * An HTTP URL to be opened with user authorization data added to the query
         * string when the button is pressed. If the user refuses to provid
         * authorization data, the original URL without information about the user
         * will be opened. The data added is the same as described in Receiving
         * authorization data.
         *
         * **NOTE**: You **must** always check the hash of the received data to
         * verify the authentication and the integrity of the data as described in
         * Checking authorization.
         */
        get url() {
            return this.payload.url;
        }
        /** New text of the button in forwarded messages. */
        get forwardText() {
            return this.payload.forward_text;
        }
        /**
         * Username of a bot, which will be used for user authorization.
         * See Setting up a bot for more details. If not specified, the current
         * bot's username will be assumed. The url's domain must be the same as the
         * domain linked with the bot. See Linking your domain to the bot for more
         * details.
         */
        get botUsername() {
            return this.payload.bot_username;
        }
        /**
         * Pass `true` to request the permission for your bot to send messages to the
         * user.
         */
        get requestWriteAccess() {
            return this.payload.request_write_access;
        }
    };
    return LoginUrl = _classThis;
})();
exports.LoginUrl = LoginUrl;
