"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaskPosition = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/**
 * This object describes the position on faces where a mask should be placed
 * by default.
 */
let MaskPosition = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_point_decorators;
    let _get_xShift_decorators;
    let _get_yShift_decorators;
    let _get_scale_decorators;
    var MaskPosition = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_point_decorators = [(0, inspectable_1.Inspect)()];
            _get_xShift_decorators = [(0, inspectable_1.Inspect)()];
            _get_yShift_decorators = [(0, inspectable_1.Inspect)()];
            _get_scale_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_point_decorators, { kind: "getter", name: "point", static: false, private: false, access: { has: obj => "point" in obj, get: obj => obj.point }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_xShift_decorators, { kind: "getter", name: "xShift", static: false, private: false, access: { has: obj => "xShift" in obj, get: obj => obj.xShift }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_yShift_decorators, { kind: "getter", name: "yShift", static: false, private: false, access: { has: obj => "yShift" in obj, get: obj => obj.yShift }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_scale_decorators, { kind: "getter", name: "scale", static: false, private: false, access: { has: obj => "scale" in obj, get: obj => obj.scale }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            MaskPosition = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * The part of the face relative to which the mask should be placed.
         * One of `forehead`, `eyes`, `mouth`, or `chin`.
         */
        get point() {
            return this.payload.point;
        }
        /**
         * Shift by X-axis measured in widths of the mask scaled to the face size,
         * from left to right. For example, choosing `-1.0` will place mask just to
         * the left of the default mask position.
         */
        get xShift() {
            return this.payload.x_shift;
        }
        /**
         * Shift by Y-axis measured in heights of the mask scaled to the face size,
         * from top to bottom. For example, `1.0` will place the mask just below the
         * default mask position.
         */
        get yShift() {
            return this.payload.y_shift;
        }
        /** Mask scaling coefficient. For example, `2.0` means double size. */
        get scale() {
            return this.payload.scale;
        }
    };
    return MaskPosition = _classThis;
})();
exports.MaskPosition = MaskPosition;
