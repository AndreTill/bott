"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputLocationMessageContent = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
 *
 * [Documentation](https://core.telegram.org/bots/api/#inputlocationmessagecontent)
 */
let InputLocationMessageContent = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_latitude_decorators;
    let _get_longitude_decorators;
    let _get_horizontalAccuracy_decorators;
    let _get_livePeriod_decorators;
    let _get_heading_decorators;
    let _get_proximityAlertRadius_decorators;
    var InputLocationMessageContent = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_latitude_decorators = [(0, inspectable_1.Inspect)()];
            _get_longitude_decorators = [(0, inspectable_1.Inspect)()];
            _get_horizontalAccuracy_decorators = [(0, inspectable_1.Inspect)()];
            _get_livePeriod_decorators = [(0, inspectable_1.Inspect)()];
            _get_heading_decorators = [(0, inspectable_1.Inspect)()];
            _get_proximityAlertRadius_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_latitude_decorators, { kind: "getter", name: "latitude", static: false, private: false, access: { has: obj => "latitude" in obj, get: obj => obj.latitude }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_longitude_decorators, { kind: "getter", name: "longitude", static: false, private: false, access: { has: obj => "longitude" in obj, get: obj => obj.longitude }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_horizontalAccuracy_decorators, { kind: "getter", name: "horizontalAccuracy", static: false, private: false, access: { has: obj => "horizontalAccuracy" in obj, get: obj => obj.horizontalAccuracy }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_livePeriod_decorators, { kind: "getter", name: "livePeriod", static: false, private: false, access: { has: obj => "livePeriod" in obj, get: obj => obj.livePeriod }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_heading_decorators, { kind: "getter", name: "heading", static: false, private: false, access: { has: obj => "heading" in obj, get: obj => obj.heading }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_proximityAlertRadius_decorators, { kind: "getter", name: "proximityAlertRadius", static: false, private: false, access: { has: obj => "proximityAlertRadius" in obj, get: obj => obj.proximityAlertRadius }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            InputLocationMessageContent = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * Latitude of the location in degrees
         */
        get latitude() {
            return this.payload.latitude;
        }
        /**
         * Longitude of the location in degrees
         */
        get longitude() {
            return this.payload.longitude;
        }
        /**
         * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
         */
        get horizontalAccuracy() {
            return this.payload.horizontal_accuracy;
        }
        /**
         * *Optional*. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
         */
        get livePeriod() {
            return this.payload.live_period;
        }
        /**
         * *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         */
        get heading() {
            return this.payload.heading;
        }
        /**
         * *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         */
        get proximityAlertRadius() {
            return this.payload.proximity_alert_radius;
        }
    };
    return InputLocationMessageContent = _classThis;
})();
exports.InputLocationMessageContent = InputLocationMessageContent;
