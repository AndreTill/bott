"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatFullInfo = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const birthdate_1 = require("./birthdate");
const business_intro_1 = require("./business-intro");
const business_location_1 = require("./business-location");
const business_opening_hours_1 = require("./business-opening-hours");
const chat_1 = require("./chat");
const chat_location_1 = require("./chat-location");
const chat_permissions_1 = require("./chat-permissions");
const chat_photo_1 = require("./chat-photo");
const message_1 = require("./message");
/**
 * This object contains full information about a chat.
 *
 * [Documentation](https://core.telegram.org/bots/api/#chatfullinfo)
 */
let ChatFullInfo = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_id_decorators;
    let _get_type_decorators;
    let _get_title_decorators;
    let _get_username_decorators;
    let _get_firstName_decorators;
    let _get_lastName_decorators;
    let _get_isForum_decorators;
    let _get_accentColorId_decorators;
    let _get_maxReactionCount_decorators;
    let _get_photo_decorators;
    let _get_activeUsernames_decorators;
    let _get_birthdate_decorators;
    let _get_businessIntro_decorators;
    let _get_businessLocation_decorators;
    let _get_businessOpeningHours_decorators;
    let _get_personalChat_decorators;
    let _get_availableReactions_decorators;
    let _get_backgroundCustomEmojiId_decorators;
    let _get_profileAccentColorId_decorators;
    let _get_profileBackgroundCustomEmojiId_decorators;
    let _get_emojiStatusCustomEmojiId_decorators;
    let _get_emojiStatusExpirationDate_decorators;
    let _get_bio_decorators;
    let _get_hasPrivateForwards_decorators;
    let _get_hasRestrictedVoiceAndVideoMessages_decorators;
    let _get_joinToSendMessages_decorators;
    let _get_joinByRequest_decorators;
    let _get_description_decorators;
    let _get_inviteLink_decorators;
    let _get_pinnedMessage_decorators;
    let _get_permissions_decorators;
    let _get_slowModeDelay_decorators;
    let _get_unrestrictBoostCount_decorators;
    let _get_messageAutoDeleteTime_decorators;
    let _get_hasAggressiveAntiSpamEnabled_decorators;
    let _get_hasHiddenMembers_decorators;
    let _get_hasProtectedContent_decorators;
    let _get_hasVisibleHistory_decorators;
    let _get_stickerSetName_decorators;
    let _get_canSendPaidMedia_decorators;
    let _get_canSetStickerSet_decorators;
    let _get_customEmojiStickerSetName_decorators;
    let _get_linkedChatId_decorators;
    let _get_location_decorators;
    var ChatFullInfo = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_id_decorators = [(0, inspectable_1.Inspect)()];
            _get_type_decorators = [(0, inspectable_1.Inspect)()];
            _get_title_decorators = [(0, inspectable_1.Inspect)()];
            _get_username_decorators = [(0, inspectable_1.Inspect)()];
            _get_firstName_decorators = [(0, inspectable_1.Inspect)()];
            _get_lastName_decorators = [(0, inspectable_1.Inspect)()];
            _get_isForum_decorators = [(0, inspectable_1.Inspect)()];
            _get_accentColorId_decorators = [(0, inspectable_1.Inspect)()];
            _get_maxReactionCount_decorators = [(0, inspectable_1.Inspect)()];
            _get_photo_decorators = [(0, inspectable_1.Inspect)()];
            _get_activeUsernames_decorators = [(0, inspectable_1.Inspect)()];
            _get_birthdate_decorators = [(0, inspectable_1.Inspect)()];
            _get_businessIntro_decorators = [(0, inspectable_1.Inspect)()];
            _get_businessLocation_decorators = [(0, inspectable_1.Inspect)()];
            _get_businessOpeningHours_decorators = [(0, inspectable_1.Inspect)()];
            _get_personalChat_decorators = [(0, inspectable_1.Inspect)()];
            _get_availableReactions_decorators = [(0, inspectable_1.Inspect)()];
            _get_backgroundCustomEmojiId_decorators = [(0, inspectable_1.Inspect)()];
            _get_profileAccentColorId_decorators = [(0, inspectable_1.Inspect)()];
            _get_profileBackgroundCustomEmojiId_decorators = [(0, inspectable_1.Inspect)()];
            _get_emojiStatusCustomEmojiId_decorators = [(0, inspectable_1.Inspect)()];
            _get_emojiStatusExpirationDate_decorators = [(0, inspectable_1.Inspect)()];
            _get_bio_decorators = [(0, inspectable_1.Inspect)()];
            _get_hasPrivateForwards_decorators = [(0, inspectable_1.Inspect)()];
            _get_hasRestrictedVoiceAndVideoMessages_decorators = [(0, inspectable_1.Inspect)()];
            _get_joinToSendMessages_decorators = [(0, inspectable_1.Inspect)()];
            _get_joinByRequest_decorators = [(0, inspectable_1.Inspect)()];
            _get_description_decorators = [(0, inspectable_1.Inspect)()];
            _get_inviteLink_decorators = [(0, inspectable_1.Inspect)()];
            _get_pinnedMessage_decorators = [(0, inspectable_1.Inspect)()];
            _get_permissions_decorators = [(0, inspectable_1.Inspect)()];
            _get_slowModeDelay_decorators = [(0, inspectable_1.Inspect)()];
            _get_unrestrictBoostCount_decorators = [(0, inspectable_1.Inspect)()];
            _get_messageAutoDeleteTime_decorators = [(0, inspectable_1.Inspect)()];
            _get_hasAggressiveAntiSpamEnabled_decorators = [(0, inspectable_1.Inspect)()];
            _get_hasHiddenMembers_decorators = [(0, inspectable_1.Inspect)()];
            _get_hasProtectedContent_decorators = [(0, inspectable_1.Inspect)()];
            _get_hasVisibleHistory_decorators = [(0, inspectable_1.Inspect)()];
            _get_stickerSetName_decorators = [(0, inspectable_1.Inspect)()];
            _get_canSendPaidMedia_decorators = [(0, inspectable_1.Inspect)()];
            _get_canSetStickerSet_decorators = [(0, inspectable_1.Inspect)()];
            _get_customEmojiStickerSetName_decorators = [(0, inspectable_1.Inspect)()];
            _get_linkedChatId_decorators = [(0, inspectable_1.Inspect)()];
            _get_location_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_id_decorators, { kind: "getter", name: "id", static: false, private: false, access: { has: obj => "id" in obj, get: obj => obj.id }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_type_decorators, { kind: "getter", name: "type", static: false, private: false, access: { has: obj => "type" in obj, get: obj => obj.type }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_title_decorators, { kind: "getter", name: "title", static: false, private: false, access: { has: obj => "title" in obj, get: obj => obj.title }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_username_decorators, { kind: "getter", name: "username", static: false, private: false, access: { has: obj => "username" in obj, get: obj => obj.username }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_firstName_decorators, { kind: "getter", name: "firstName", static: false, private: false, access: { has: obj => "firstName" in obj, get: obj => obj.firstName }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_lastName_decorators, { kind: "getter", name: "lastName", static: false, private: false, access: { has: obj => "lastName" in obj, get: obj => obj.lastName }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_isForum_decorators, { kind: "getter", name: "isForum", static: false, private: false, access: { has: obj => "isForum" in obj, get: obj => obj.isForum }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_accentColorId_decorators, { kind: "getter", name: "accentColorId", static: false, private: false, access: { has: obj => "accentColorId" in obj, get: obj => obj.accentColorId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_maxReactionCount_decorators, { kind: "getter", name: "maxReactionCount", static: false, private: false, access: { has: obj => "maxReactionCount" in obj, get: obj => obj.maxReactionCount }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_photo_decorators, { kind: "getter", name: "photo", static: false, private: false, access: { has: obj => "photo" in obj, get: obj => obj.photo }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_activeUsernames_decorators, { kind: "getter", name: "activeUsernames", static: false, private: false, access: { has: obj => "activeUsernames" in obj, get: obj => obj.activeUsernames }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_birthdate_decorators, { kind: "getter", name: "birthdate", static: false, private: false, access: { has: obj => "birthdate" in obj, get: obj => obj.birthdate }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_businessIntro_decorators, { kind: "getter", name: "businessIntro", static: false, private: false, access: { has: obj => "businessIntro" in obj, get: obj => obj.businessIntro }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_businessLocation_decorators, { kind: "getter", name: "businessLocation", static: false, private: false, access: { has: obj => "businessLocation" in obj, get: obj => obj.businessLocation }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_businessOpeningHours_decorators, { kind: "getter", name: "businessOpeningHours", static: false, private: false, access: { has: obj => "businessOpeningHours" in obj, get: obj => obj.businessOpeningHours }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_personalChat_decorators, { kind: "getter", name: "personalChat", static: false, private: false, access: { has: obj => "personalChat" in obj, get: obj => obj.personalChat }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_availableReactions_decorators, { kind: "getter", name: "availableReactions", static: false, private: false, access: { has: obj => "availableReactions" in obj, get: obj => obj.availableReactions }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_backgroundCustomEmojiId_decorators, { kind: "getter", name: "backgroundCustomEmojiId", static: false, private: false, access: { has: obj => "backgroundCustomEmojiId" in obj, get: obj => obj.backgroundCustomEmojiId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_profileAccentColorId_decorators, { kind: "getter", name: "profileAccentColorId", static: false, private: false, access: { has: obj => "profileAccentColorId" in obj, get: obj => obj.profileAccentColorId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_profileBackgroundCustomEmojiId_decorators, { kind: "getter", name: "profileBackgroundCustomEmojiId", static: false, private: false, access: { has: obj => "profileBackgroundCustomEmojiId" in obj, get: obj => obj.profileBackgroundCustomEmojiId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_emojiStatusCustomEmojiId_decorators, { kind: "getter", name: "emojiStatusCustomEmojiId", static: false, private: false, access: { has: obj => "emojiStatusCustomEmojiId" in obj, get: obj => obj.emojiStatusCustomEmojiId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_emojiStatusExpirationDate_decorators, { kind: "getter", name: "emojiStatusExpirationDate", static: false, private: false, access: { has: obj => "emojiStatusExpirationDate" in obj, get: obj => obj.emojiStatusExpirationDate }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_bio_decorators, { kind: "getter", name: "bio", static: false, private: false, access: { has: obj => "bio" in obj, get: obj => obj.bio }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_hasPrivateForwards_decorators, { kind: "getter", name: "hasPrivateForwards", static: false, private: false, access: { has: obj => "hasPrivateForwards" in obj, get: obj => obj.hasPrivateForwards }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_hasRestrictedVoiceAndVideoMessages_decorators, { kind: "getter", name: "hasRestrictedVoiceAndVideoMessages", static: false, private: false, access: { has: obj => "hasRestrictedVoiceAndVideoMessages" in obj, get: obj => obj.hasRestrictedVoiceAndVideoMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_joinToSendMessages_decorators, { kind: "getter", name: "joinToSendMessages", static: false, private: false, access: { has: obj => "joinToSendMessages" in obj, get: obj => obj.joinToSendMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_joinByRequest_decorators, { kind: "getter", name: "joinByRequest", static: false, private: false, access: { has: obj => "joinByRequest" in obj, get: obj => obj.joinByRequest }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_description_decorators, { kind: "getter", name: "description", static: false, private: false, access: { has: obj => "description" in obj, get: obj => obj.description }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_inviteLink_decorators, { kind: "getter", name: "inviteLink", static: false, private: false, access: { has: obj => "inviteLink" in obj, get: obj => obj.inviteLink }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_pinnedMessage_decorators, { kind: "getter", name: "pinnedMessage", static: false, private: false, access: { has: obj => "pinnedMessage" in obj, get: obj => obj.pinnedMessage }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_permissions_decorators, { kind: "getter", name: "permissions", static: false, private: false, access: { has: obj => "permissions" in obj, get: obj => obj.permissions }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_slowModeDelay_decorators, { kind: "getter", name: "slowModeDelay", static: false, private: false, access: { has: obj => "slowModeDelay" in obj, get: obj => obj.slowModeDelay }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_unrestrictBoostCount_decorators, { kind: "getter", name: "unrestrictBoostCount", static: false, private: false, access: { has: obj => "unrestrictBoostCount" in obj, get: obj => obj.unrestrictBoostCount }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_messageAutoDeleteTime_decorators, { kind: "getter", name: "messageAutoDeleteTime", static: false, private: false, access: { has: obj => "messageAutoDeleteTime" in obj, get: obj => obj.messageAutoDeleteTime }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_hasAggressiveAntiSpamEnabled_decorators, { kind: "getter", name: "hasAggressiveAntiSpamEnabled", static: false, private: false, access: { has: obj => "hasAggressiveAntiSpamEnabled" in obj, get: obj => obj.hasAggressiveAntiSpamEnabled }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_hasHiddenMembers_decorators, { kind: "getter", name: "hasHiddenMembers", static: false, private: false, access: { has: obj => "hasHiddenMembers" in obj, get: obj => obj.hasHiddenMembers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_hasProtectedContent_decorators, { kind: "getter", name: "hasProtectedContent", static: false, private: false, access: { has: obj => "hasProtectedContent" in obj, get: obj => obj.hasProtectedContent }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_hasVisibleHistory_decorators, { kind: "getter", name: "hasVisibleHistory", static: false, private: false, access: { has: obj => "hasVisibleHistory" in obj, get: obj => obj.hasVisibleHistory }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_stickerSetName_decorators, { kind: "getter", name: "stickerSetName", static: false, private: false, access: { has: obj => "stickerSetName" in obj, get: obj => obj.stickerSetName }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_canSendPaidMedia_decorators, { kind: "getter", name: "canSendPaidMedia", static: false, private: false, access: { has: obj => "canSendPaidMedia" in obj, get: obj => obj.canSendPaidMedia }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_canSetStickerSet_decorators, { kind: "getter", name: "canSetStickerSet", static: false, private: false, access: { has: obj => "canSetStickerSet" in obj, get: obj => obj.canSetStickerSet }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_customEmojiStickerSetName_decorators, { kind: "getter", name: "customEmojiStickerSetName", static: false, private: false, access: { has: obj => "customEmojiStickerSetName" in obj, get: obj => obj.customEmojiStickerSetName }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_linkedChatId_decorators, { kind: "getter", name: "linkedChatId", static: false, private: false, access: { has: obj => "linkedChatId" in obj, get: obj => obj.linkedChatId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_location_decorators, { kind: "getter", name: "location", static: false, private: false, access: { has: obj => "location" in obj, get: obj => obj.location }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ChatFullInfo = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
         */
        get id() {
            return this.payload.id;
        }
        /**
         * Type of the chat, can be either “private”, “group”, “supergroup” or “channel”
         */
        get type() {
            return this.payload.type;
        }
        /**
         * *Optional*. Title, for supergroups, channels and group chats
         */
        get title() {
            return this.payload.title;
        }
        /**
         * *Optional*. Username, for private chats, supergroups and channels if available
         */
        get username() {
            return this.payload.username;
        }
        /**
         * *Optional*. First name of the other party in a private chat
         */
        get firstName() {
            return this.payload.first_name;
        }
        /**
         * *Optional*. Last name of the other party in a private chat
         */
        get lastName() {
            return this.payload.last_name;
        }
        /**
         * *Optional*. *True*, if the supergroup chat is a forum (has [topics](https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-in-groups) enabled)
         */
        get isForum() {
            return this.payload.is_forum;
        }
        /**
         * Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See [accent colors](https://core.telegram.org/bots/api/#accent-colors) for more details.
         */
        get accentColorId() {
            return this.payload.accent_color_id;
        }
        /**
         * The maximum number of reactions that can be set on a message in the chat
         */
        get maxReactionCount() {
            return this.payload.max_reaction_count;
        }
        /**
         * *Optional*. Chat photo
         */
        get photo() {
            return this.payload.photo ? new chat_photo_1.ChatPhoto(this.payload.photo) : undefined;
        }
        /**
         * *Optional*. If non-empty, the list of all [active chat usernames](https://telegram.org/blog/topics-in-groups-collectible-usernames#collectible-usernames); for private chats, supergroups and channels
         */
        get activeUsernames() {
            return this.payload.active_usernames;
        }
        /**
         * *Optional*. For private chats, the date of birth of the user
         */
        get birthdate() {
            return this.payload.birthdate
                ? new birthdate_1.Birthdate(this.payload.birthdate)
                : undefined;
        }
        /**
         * *Optional*. For private chats with business accounts, the intro of the business
         */
        get businessIntro() {
            return this.payload.business_intro
                ? new business_intro_1.BusinessIntro(this.payload.business_intro)
                : undefined;
        }
        /**
         * *Optional*. For private chats with business accounts, the location of the business
         */
        get businessLocation() {
            return this.payload.business_location
                ? new business_location_1.BusinessLocation(this.payload.business_location)
                : undefined;
        }
        /**
         * *Optional*. For private chats with business accounts, the opening hours of the business
         */
        get businessOpeningHours() {
            return this.payload.business_opening_hours
                ? new business_opening_hours_1.BusinessOpeningHours(this.payload.business_opening_hours)
                : undefined;
        }
        /**
         * *Optional*. For private chats, the personal channel of the user
         */
        get personalChat() {
            return this.payload.personal_chat
                ? new chat_1.Chat(this.payload.personal_chat)
                : undefined;
        }
        /**
         * *Optional*. List of available reactions allowed in the chat. If omitted, then all [emoji reactions](https://core.telegram.org/bots/api/#reactiontypeemoji) are allowed.
         */
        get availableReactions() {
            return this.payload.available_reactions;
        }
        /**
         * *Optional*. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background
         */
        get backgroundCustomEmojiId() {
            return this.payload.background_custom_emoji_id;
        }
        /**
         * *Optional*. Identifier of the accent color for the chat's profile background. See [profile accent colors](https://core.telegram.org/bots/api/#profile-accent-colors) for more details.
         */
        get profileAccentColorId() {
            return this.payload.profile_accent_color_id;
        }
        /**
         * *Optional*. Custom emoji identifier of the emoji chosen by the chat for its profile background
         */
        get profileBackgroundCustomEmojiId() {
            return this.payload.profile_background_custom_emoji_id;
        }
        /**
         * *Optional*. Custom emoji identifier of the emoji status of the chat or the other party in a private chat
         */
        get emojiStatusCustomEmojiId() {
            return this.payload.emoji_status_custom_emoji_id;
        }
        /**
         * *Optional*. Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any
         */
        get emojiStatusExpirationDate() {
            return this.payload.emoji_status_expiration_date;
        }
        /**
         * *Optional*. Bio of the other party in a private chat
         */
        get bio() {
            return this.payload.bio;
        }
        /**
         * *Optional*. *True*, if privacy settings of the other party in the private chat allows to use `tg://user?id=<user_id>` links only in chats with the user
         */
        get hasPrivateForwards() {
            return this.payload.has_private_forwards;
        }
        /**
         * *Optional*. *True*, if the privacy settings of the other party restrict sending voice and video note messages in the private chat
         */
        get hasRestrictedVoiceAndVideoMessages() {
            return this.payload.has_restricted_voice_and_video_messages;
        }
        /**
         * *Optional*. *True*, if users need to join the supergroup before they can send messages
         */
        get joinToSendMessages() {
            return this.payload.join_to_send_messages;
        }
        /**
         * *Optional*. *True*, if all users directly joining the supergroup need to be approved by supergroup administrators
         */
        get joinByRequest() {
            return this.payload.join_by_request;
        }
        /**
         * *Optional*. Description, for groups, supergroups and channel chats
         */
        get description() {
            return this.payload.description;
        }
        /**
         * *Optional*. Primary invite link, for groups, supergroups and channel chats
         */
        get inviteLink() {
            return this.payload.invite_link;
        }
        /**
         * *Optional*. The most recent pinned message (by sending date)
         */
        get pinnedMessage() {
            return this.payload.pinned_message
                ? new message_1.Message(this.payload.pinned_message)
                : undefined;
        }
        /**
         * *Optional*. Default chat member permissions, for groups and supergroups
         */
        get permissions() {
            return this.payload.permissions
                ? new chat_permissions_1.ChatPermissions(this.payload.permissions)
                : undefined;
        }
        /**
         * *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds
         */
        get slowModeDelay() {
            return this.payload.slow_mode_delay;
        }
        /**
         * *Optional*. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions
         */
        get unrestrictBoostCount() {
            return this.payload.unrestrict_boost_count;
        }
        /**
         * *Optional*. The time after which all messages sent to the chat will be automatically deleted; in seconds
         */
        get messageAutoDeleteTime() {
            return this.payload.message_auto_delete_time;
        }
        /**
         * *Optional*. *True*, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.
         */
        get hasAggressiveAntiSpamEnabled() {
            return this.payload.has_aggressive_anti_spam_enabled;
        }
        /**
         * *Optional*. *True*, if non-administrators can only get the list of bots and administrators in the chat
         */
        get hasHiddenMembers() {
            return this.payload.has_hidden_members;
        }
        /**
         * *Optional*. *True*, if messages from the chat can't be forwarded to other chats
         */
        get hasProtectedContent() {
            return this.payload.has_protected_content;
        }
        /**
         * *Optional*. *True*, if new chat members will have access to old messages; available only to chat administrators
         */
        get hasVisibleHistory() {
            return this.payload.has_visible_history;
        }
        /**
         * *Optional*. For supergroups, name of the group sticker set
         */
        get stickerSetName() {
            return this.payload.sticker_set_name;
        }
        /**
         * *Optional*. *True*, if the bot can change the group sticker set
         */
        get canSendPaidMedia() {
            return this.payload.can_send_paid_media;
        }
        /**
         * *Optional*. *True*, if the bot can change the group sticker set
         */
        get canSetStickerSet() {
            return this.payload.can_set_sticker_set;
        }
        /**
         * *Optional*. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group.
         */
        get customEmojiStickerSetName() {
            return this.payload.custom_emoji_sticker_set_name;
        }
        /**
         * *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
         */
        get linkedChatId() {
            return this.payload.linked_chat_id;
        }
        /**
         * *Optional*. For supergroups, the location to which the supergroup is connected
         */
        get location() {
            return this.payload.location
                ? new chat_location_1.ChatLocation(this.payload.location)
                : undefined;
        }
    };
    return ChatFullInfo = _classThis;
})();
exports.ChatFullInfo = ChatFullInfo;
(0, utils_1.memoizeGetters)(ChatFullInfo, [
    "photo",
    "birthdate",
    "businessIntro",
    "businessLocation",
    "businessOpeningHours",
    "personalChat",
    "pinnedMessage",
    "permissions",
    "location",
]);
