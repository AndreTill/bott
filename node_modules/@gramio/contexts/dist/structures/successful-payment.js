"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SuccessfulPayment = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const order_info_1 = require("./order-info");
/** This object contains basic information about a successful payment. */
let SuccessfulPayment = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_currency_decorators;
    let _get_totalAmount_decorators;
    let _get_invoicePayload_decorators;
    let _get_shippingOptionId_decorators;
    let _get_orderInfo_decorators;
    let _get_telegramPaymentChargeId_decorators;
    let _get_providerPaymentChargeId_decorators;
    var SuccessfulPayment = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_currency_decorators = [(0, inspectable_1.Inspect)()];
            _get_totalAmount_decorators = [(0, inspectable_1.Inspect)()];
            _get_invoicePayload_decorators = [(0, inspectable_1.Inspect)()];
            _get_shippingOptionId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_orderInfo_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_telegramPaymentChargeId_decorators = [(0, inspectable_1.Inspect)()];
            _get_providerPaymentChargeId_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_currency_decorators, { kind: "getter", name: "currency", static: false, private: false, access: { has: obj => "currency" in obj, get: obj => obj.currency }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_totalAmount_decorators, { kind: "getter", name: "totalAmount", static: false, private: false, access: { has: obj => "totalAmount" in obj, get: obj => obj.totalAmount }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_invoicePayload_decorators, { kind: "getter", name: "invoicePayload", static: false, private: false, access: { has: obj => "invoicePayload" in obj, get: obj => obj.invoicePayload }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_shippingOptionId_decorators, { kind: "getter", name: "shippingOptionId", static: false, private: false, access: { has: obj => "shippingOptionId" in obj, get: obj => obj.shippingOptionId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_orderInfo_decorators, { kind: "getter", name: "orderInfo", static: false, private: false, access: { has: obj => "orderInfo" in obj, get: obj => obj.orderInfo }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_telegramPaymentChargeId_decorators, { kind: "getter", name: "telegramPaymentChargeId", static: false, private: false, access: { has: obj => "telegramPaymentChargeId" in obj, get: obj => obj.telegramPaymentChargeId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_providerPaymentChargeId_decorators, { kind: "getter", name: "providerPaymentChargeId", static: false, private: false, access: { has: obj => "providerPaymentChargeId" in obj, get: obj => obj.providerPaymentChargeId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            SuccessfulPayment = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Three-letter ISO 4217 currency code */
        get currency() {
            return this.payload.currency;
        }
        /**
         * Total price in the smallest units of the currency
         * (integer, not float/double). For example, for a price of
         * `US$ 1.45` pass `amount = 145`. See the `exp` parameter in
         * [currencies.json](https://core.telegram.org/bots/payments/currencies.json),
         * it shows the number of digits past the decimal point for each currency
         * (2 for the majority of currencies).
         */
        get totalAmount() {
            return this.payload.total_amount;
        }
        /** Bot specified invoice payload */
        get invoicePayload() {
            return this.payload.invoice_payload;
        }
        /** Identifier of the shipping option chosen by the user */
        get shippingOptionId() {
            return this.payload.shipping_option_id;
        }
        /** Order info provided by the user */
        get orderInfo() {
            const { order_info } = this.payload;
            if (!order_info)
                return undefined;
            return new order_info_1.OrderInfo(order_info);
        }
        /** Telegram payment identifier */
        get telegramPaymentChargeId() {
            return this.payload.telegram_payment_charge_id;
        }
        /** Provider payment identifier */
        get providerPaymentChargeId() {
            return this.payload.provider_payment_charge_id;
        }
    };
    return SuccessfulPayment = _classThis;
})();
exports.SuccessfulPayment = SuccessfulPayment;
(0, utils_1.memoizeGetters)(SuccessfulPayment, ["orderInfo"]);
