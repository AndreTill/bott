"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkPreviewOptions = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/** Describes the options used for link preview generation. */
let LinkPreviewOptions = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _isDisabled_decorators;
    let _get_url_decorators;
    let _preferSmallMedia_decorators;
    let _preferLargeMedia_decorators;
    let _showAboveText_decorators;
    var LinkPreviewOptions = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _isDisabled_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _get_url_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _preferSmallMedia_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _preferLargeMedia_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _showAboveText_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            tslib_1.__esDecorate(this, null, _isDisabled_decorators, { kind: "method", name: "isDisabled", static: false, private: false, access: { has: obj => "isDisabled" in obj, get: obj => obj.isDisabled }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_url_decorators, { kind: "getter", name: "url", static: false, private: false, access: { has: obj => "url" in obj, get: obj => obj.url }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _preferSmallMedia_decorators, { kind: "method", name: "preferSmallMedia", static: false, private: false, access: { has: obj => "preferSmallMedia" in obj, get: obj => obj.preferSmallMedia }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _preferLargeMedia_decorators, { kind: "method", name: "preferLargeMedia", static: false, private: false, access: { has: obj => "preferLargeMedia" in obj, get: obj => obj.preferLargeMedia }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _showAboveText_decorators, { kind: "method", name: "showAboveText", static: false, private: false, access: { has: obj => "showAboveText" in obj, get: obj => obj.showAboveText }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            LinkPreviewOptions = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** `true`, if the link preview is disabled */
        isDisabled() {
            return this.payload.is_disabled;
        }
        /** URL to use for the link preview. If empty, then the first URL found in the message text will be used */
        get url() {
            return this.payload.url;
        }
        /** `true`, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview */
        preferSmallMedia() {
            return this.payload.prefer_small_media;
        }
        /** `true`, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview */
        preferLargeMedia() {
            return this.payload.prefer_large_media;
        }
        /** `true`, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text */
        showAboveText() {
            return this.payload.show_above_text;
        }
    };
    return LinkPreviewOptions = _classThis;
})();
exports.LinkPreviewOptions = LinkPreviewOptions;
