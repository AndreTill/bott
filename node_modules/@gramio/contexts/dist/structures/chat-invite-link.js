"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatInviteLink = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const user_1 = require("./user");
/** Represents an invite link for a chat. */
let ChatInviteLink = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_link_decorators;
    let _get_creator_decorators;
    let _get_name_decorators;
    let _isPrimary_decorators;
    let _isRevoked_decorators;
    let _get_expireDate_decorators;
    let _get_memberLimit_decorators;
    let _get_createsJoinRequest_decorators;
    let _get_pendingJoinRequestCount_decorators;
    var ChatInviteLink = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_link_decorators = [(0, inspectable_1.Inspect)()];
            _get_creator_decorators = [(0, inspectable_1.Inspect)()];
            _get_name_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _isPrimary_decorators = [(0, inspectable_1.Inspect)()];
            _isRevoked_decorators = [(0, inspectable_1.Inspect)()];
            _get_expireDate_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_memberLimit_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_createsJoinRequest_decorators = [(0, inspectable_1.Inspect)()];
            _get_pendingJoinRequestCount_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_link_decorators, { kind: "getter", name: "link", static: false, private: false, access: { has: obj => "link" in obj, get: obj => obj.link }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_creator_decorators, { kind: "getter", name: "creator", static: false, private: false, access: { has: obj => "creator" in obj, get: obj => obj.creator }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_name_decorators, { kind: "getter", name: "name", static: false, private: false, access: { has: obj => "name" in obj, get: obj => obj.name }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isPrimary_decorators, { kind: "method", name: "isPrimary", static: false, private: false, access: { has: obj => "isPrimary" in obj, get: obj => obj.isPrimary }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isRevoked_decorators, { kind: "method", name: "isRevoked", static: false, private: false, access: { has: obj => "isRevoked" in obj, get: obj => obj.isRevoked }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_expireDate_decorators, { kind: "getter", name: "expireDate", static: false, private: false, access: { has: obj => "expireDate" in obj, get: obj => obj.expireDate }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_memberLimit_decorators, { kind: "getter", name: "memberLimit", static: false, private: false, access: { has: obj => "memberLimit" in obj, get: obj => obj.memberLimit }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_createsJoinRequest_decorators, { kind: "getter", name: "createsJoinRequest", static: false, private: false, access: { has: obj => "createsJoinRequest" in obj, get: obj => obj.createsJoinRequest }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_pendingJoinRequestCount_decorators, { kind: "getter", name: "pendingJoinRequestCount", static: false, private: false, access: { has: obj => "pendingJoinRequestCount" in obj, get: obj => obj.pendingJoinRequestCount }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ChatInviteLink = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * The invite link. If the link was created by another chat administrator,
         * then the second part of the link will be replaced with `â€¦`.
         */
        get link() {
            return this.payload.invite_link;
        }
        /** Creator of the link */
        get creator() {
            return new user_1.User(this.payload.creator);
        }
        /** Invite link name */
        get name() {
            return this.payload.name;
        }
        /** `true`, if the link is primary */
        isPrimary() {
            return this.payload.is_primary;
        }
        /** `true`, if the link is revoked */
        isRevoked() {
            return this.payload.is_revoked;
        }
        /** Point in time (Unix timestamp) when the link will expire or has been expired */
        get expireDate() {
            return this.payload.expire_date;
        }
        /**
         * Maximum number of users that can be members of the chat simultaneously
         * after joining the chat via this invite link;
         * `1-99999`
         */
        get memberLimit() {
            return this.payload.member_limit;
        }
        /** `true`, if users joining the chat via the link need to be approved by chat administrators */
        get createsJoinRequest() {
            return this.payload.creates_join_request;
        }
        /** Number of pending join requests created using this link */
        get pendingJoinRequestCount() {
            return this.payload.pending_join_request_count;
        }
    };
    return ChatInviteLink = _classThis;
})();
exports.ChatInviteLink = ChatInviteLink;
(0, utils_1.memoizeGetters)(ChatInviteLink, ["creator"]);
