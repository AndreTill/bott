"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chat = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/**
 * This object represents a chat.
 *
 * [Documentation](https://core.telegram.org/bots/api/#chat)
 */
let Chat = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_id_decorators;
    let _get_type_decorators;
    let _get_title_decorators;
    let _get_username_decorators;
    let _get_firstName_decorators;
    let _get_lastName_decorators;
    let _get_isForum_decorators;
    var Chat = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_id_decorators = [(0, inspectable_1.Inspect)()];
            _get_type_decorators = [(0, inspectable_1.Inspect)()];
            _get_title_decorators = [(0, inspectable_1.Inspect)()];
            _get_username_decorators = [(0, inspectable_1.Inspect)()];
            _get_firstName_decorators = [(0, inspectable_1.Inspect)()];
            _get_lastName_decorators = [(0, inspectable_1.Inspect)()];
            _get_isForum_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_id_decorators, { kind: "getter", name: "id", static: false, private: false, access: { has: obj => "id" in obj, get: obj => obj.id }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_type_decorators, { kind: "getter", name: "type", static: false, private: false, access: { has: obj => "type" in obj, get: obj => obj.type }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_title_decorators, { kind: "getter", name: "title", static: false, private: false, access: { has: obj => "title" in obj, get: obj => obj.title }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_username_decorators, { kind: "getter", name: "username", static: false, private: false, access: { has: obj => "username" in obj, get: obj => obj.username }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_firstName_decorators, { kind: "getter", name: "firstName", static: false, private: false, access: { has: obj => "firstName" in obj, get: obj => obj.firstName }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_lastName_decorators, { kind: "getter", name: "lastName", static: false, private: false, access: { has: obj => "lastName" in obj, get: obj => obj.lastName }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_isForum_decorators, { kind: "getter", name: "isForum", static: false, private: false, access: { has: obj => "isForum" in obj, get: obj => obj.isForum }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            Chat = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
         */
        get id() {
            return this.payload.id;
        }
        /**
         * Type of the chat, can be either “private”, “group”, “supergroup” or “channel”
         */
        get type() {
            return this.payload.type;
        }
        /**
         * *Optional*. Title, for supergroups, channels and group chats
         */
        get title() {
            return this.payload.title;
        }
        /**
         * *Optional*. Username, for private chats, supergroups and channels if available
         */
        get username() {
            return this.payload.username;
        }
        /**
         * *Optional*. First name of the other party in a private chat
         */
        get firstName() {
            return this.payload.first_name;
        }
        /**
         * *Optional*. Last name of the other party in a private chat
         */
        get lastName() {
            return this.payload.last_name;
        }
        /**
         * *Optional*. *True*, if the supergroup chat is a forum (has [topics](https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-in-groups) enabled)
         */
        get isForum() {
            return this.payload.is_forum;
        }
    };
    return Chat = _classThis;
})();
exports.Chat = Chat;
