"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebAppData = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/** Contains data sent from a Web App to the bot. */
let WebAppData = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_data_decorators;
    let _get_buttonText_decorators;
    var WebAppData = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_data_decorators = [(0, inspectable_1.Inspect)()];
            _get_buttonText_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_data_decorators, { kind: "getter", name: "data", static: false, private: false, access: { has: obj => "data" in obj, get: obj => obj.data }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_buttonText_decorators, { kind: "getter", name: "buttonText", static: false, private: false, access: { has: obj => "buttonText" in obj, get: obj => obj.buttonText }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            WebAppData = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** The data. Be aware that a bad client can send arbitrary data in this field. */
        get data() {
            return this.payload.data;
        }
        /**
         * Text of the `web_app` keyboard button, from which the Web App was opened.
         * Be aware that a bad client can send arbitrary data in this field.
         */
        get buttonText() {
            return this.payload.button_text;
        }
    };
    return WebAppData = _classThis;
})();
exports.WebAppData = WebAppData;
