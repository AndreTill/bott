"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptedCredentials = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/**
 * Contains data required for decrypting and authenticatin
 * `EncryptedPassportElement`. See the Telegram Passport Documentation for a
 * complete description of the data decryption and authentication processes.
 */
let EncryptedCredentials = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_data_decorators;
    let _get_hash_decorators;
    let _get_secret_decorators;
    var EncryptedCredentials = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_data_decorators = [(0, inspectable_1.Inspect)()];
            _get_hash_decorators = [(0, inspectable_1.Inspect)()];
            _get_secret_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_data_decorators, { kind: "getter", name: "data", static: false, private: false, access: { has: obj => "data" in obj, get: obj => obj.data }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_hash_decorators, { kind: "getter", name: "hash", static: false, private: false, access: { has: obj => "hash" in obj, get: obj => obj.hash }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_secret_decorators, { kind: "getter", name: "secret", static: false, private: false, access: { has: obj => "secret" in obj, get: obj => obj.secret }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            EncryptedCredentials = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * Base64-encoded encrypted JSON-serialized data with unique user's payload,
         * data hashes and secrets required for `EncryptedPassportElement` decryption
         * and authentication
         */
        get data() {
            return this.payload.data;
        }
        /** Base64-encoded data hash for data authentication */
        get hash() {
            return this.payload.hash;
        }
        /**
         * Base64-encoded secret, encrypted with the bot's public RSA key, required
         * for data decryption
         */
        get secret() {
            return this.payload.secret;
        }
    };
    return EncryptedCredentials = _classThis;
})();
exports.EncryptedCredentials = EncryptedCredentials;
