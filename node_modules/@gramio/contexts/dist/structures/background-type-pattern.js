"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackgroundTypePattern = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const document_1 = require("./attachments/document");
const background_fill_1 = require("./background-fill");
/**
 * The background is a PNG or TGV (gzipped subset of SVG with MIME type “application/x-tgwallpattern”) pattern to be combined with the background fill chosen by the user.
 *
 * [Documentation](https://core.telegram.org/bots/api/#backgroundtypepattern)
 */
let BackgroundTypePattern = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_type_decorators;
    let _get_document_decorators;
    let _get_fill_decorators;
    let _get_intensity_decorators;
    let _get_isInverted_decorators;
    let _get_isMoving_decorators;
    var BackgroundTypePattern = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_type_decorators = [(0, inspectable_1.Inspect)()];
            _get_document_decorators = [(0, inspectable_1.Inspect)()];
            _get_fill_decorators = [(0, inspectable_1.Inspect)()];
            _get_intensity_decorators = [(0, inspectable_1.Inspect)()];
            _get_isInverted_decorators = [(0, inspectable_1.Inspect)()];
            _get_isMoving_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_type_decorators, { kind: "getter", name: "type", static: false, private: false, access: { has: obj => "type" in obj, get: obj => obj.type }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_document_decorators, { kind: "getter", name: "document", static: false, private: false, access: { has: obj => "document" in obj, get: obj => obj.document }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_fill_decorators, { kind: "getter", name: "fill", static: false, private: false, access: { has: obj => "fill" in obj, get: obj => obj.fill }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_intensity_decorators, { kind: "getter", name: "intensity", static: false, private: false, access: { has: obj => "intensity" in obj, get: obj => obj.intensity }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_isInverted_decorators, { kind: "getter", name: "isInverted", static: false, private: false, access: { has: obj => "isInverted" in obj, get: obj => obj.isInverted }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_isMoving_decorators, { kind: "getter", name: "isMoving", static: false, private: false, access: { has: obj => "isMoving" in obj, get: obj => obj.isMoving }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            BackgroundTypePattern = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * Type of the background, always “pattern”
         */
        get type() {
            return this.payload.type;
        }
        /**
         * Document with the pattern
         */
        get document() {
            return new document_1.DocumentAttachment(this.payload.document);
        }
        /**
         * The background fill that is combined with the pattern
         */
        get fill() {
            // @ts-expect-error
            return new background_fill_1.backgroundFillMap[this.payload.fill.type](this.payload.fill);
        }
        /**
         * Intensity of the pattern when it is shown above the filled background; 0-100
         */
        get intensity() {
            return this.payload.intensity;
        }
        /**
         * *Optional*. *True*, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only
         */
        get isInverted() {
            return this.payload.is_inverted;
        }
        /**
         * *Optional*. *True*, if the background moves slightly when the device is tilted
         */
        get isMoving() {
            return this.payload.is_moving;
        }
    };
    return BackgroundTypePattern = _classThis;
})();
exports.BackgroundTypePattern = BackgroundTypePattern;
(0, utils_1.memoizeGetters)(BackgroundTypePattern, ["document", "fill"]);
