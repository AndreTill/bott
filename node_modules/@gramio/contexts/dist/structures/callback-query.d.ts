import type { TelegramObjects } from "@gramio/types";
import { InaccessibleMessage } from "./inaccessible-message";
import { Message } from "./message";
import { User } from "./user";
/**
 * This object represents an incoming callback query from a callback button in
 * an inline keyboard. If the button that originated the query was attached to
 * a message sent by the bot, the field message will be present.
 * If the button was attached to a message sent via the bot (in inline mode),
 * the field inline_message_id will be present.
 * Exactly one of the fields `data` or `game_short_name` will be present.
 */
export declare class CallbackQuery {
    payload: TelegramObjects.TelegramCallbackQuery;
    constructor(payload: TelegramObjects.TelegramCallbackQuery);
    /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
    get [Symbol.toStringTag](): string;
    /** Unique identifier for this query */
    get id(): string;
    /** Sender */
    get from(): User;
    /** Sender ID */
    get senderId(): number;
    /**
     * Message sent by the bot with the callback button that originated the query
     */
    get message(): InaccessibleMessage | Message | undefined;
    /**
     * Identifier of the message sent via the bot in inline mode,
     * that originated the query.
     */
    get inlineMessageId(): string | undefined;
    /**
     * Global identifier, uniquely corresponding to the chat to which the message
     * with the callback button was sent. Useful for high scores in games.
     */
    get chatInstance(): string;
    /**
     * Data associated with the callback button.
     * Be aware that a bad client can send arbitrary data in this field.
     */
    get data(): string | undefined;
    /**
     * Short name of a Game to be returned,
     * serves as the unique identifier for the game
     */
    get gameShortName(): string | undefined;
}
