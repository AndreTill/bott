"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Update = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const callback_query_1 = require("./callback-query");
const utils_1 = require("../utils");
const chat_boost_removed_1 = require("./chat-boost-removed");
const chat_boost_updated_1 = require("./chat-boost-updated");
const chat_join_request_1 = require("./chat-join-request");
const chat_member_updated_1 = require("./chat-member-updated");
const chosen_inline_result_1 = require("./chosen-inline-result");
const inline_query_1 = require("./inline-query");
const message_1 = require("./message");
const message_reaction_count_updated_1 = require("./message-reaction-count-updated");
const message_reaction_updated_1 = require("./message-reaction-updated");
const poll_1 = require("./poll");
const poll_answer_1 = require("./poll-answer");
const pre_checkout_query_1 = require("./pre-checkout-query");
const shipping_query_1 = require("./shipping-query");
/**
 * This object represents an incoming update.
 *
 * At most **one** of the optional parameters can be present in any given
 * update.
 */
let Update = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_id_decorators;
    let _get_message_decorators;
    let _get_editedMessage_decorators;
    let _get_channelPost_decorators;
    let _get_editedChannelPost_decorators;
    let _get_messageReaction_decorators;
    let _get_messageReactionCount_decorators;
    let _get_inlineQuery_decorators;
    let _get_chosenInlineResult_decorators;
    let _get_callbackQuery_decorators;
    let _get_shippingQuery_decorators;
    let _get_preCheckoutQuery_decorators;
    let _get_poll_decorators;
    let _get_pollAnswer_decorators;
    let _get_myChatMember_decorators;
    let _get_chatMember_decorators;
    let _get_chatJoinRequest_decorators;
    let _get_chatBoost_decorators;
    let _get_removedChatBoost_decorators;
    var Update = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_id_decorators = [(0, inspectable_1.Inspect)()];
            _get_message_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_editedMessage_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_channelPost_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_editedChannelPost_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_messageReaction_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_messageReactionCount_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_inlineQuery_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_chosenInlineResult_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_callbackQuery_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_shippingQuery_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_preCheckoutQuery_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_poll_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_pollAnswer_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_myChatMember_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_chatMember_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_chatJoinRequest_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_chatBoost_decorators = [(0, inspectable_1.Inspect)()];
            _get_removedChatBoost_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_id_decorators, { kind: "getter", name: "id", static: false, private: false, access: { has: obj => "id" in obj, get: obj => obj.id }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_message_decorators, { kind: "getter", name: "message", static: false, private: false, access: { has: obj => "message" in obj, get: obj => obj.message }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_editedMessage_decorators, { kind: "getter", name: "editedMessage", static: false, private: false, access: { has: obj => "editedMessage" in obj, get: obj => obj.editedMessage }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_channelPost_decorators, { kind: "getter", name: "channelPost", static: false, private: false, access: { has: obj => "channelPost" in obj, get: obj => obj.channelPost }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_editedChannelPost_decorators, { kind: "getter", name: "editedChannelPost", static: false, private: false, access: { has: obj => "editedChannelPost" in obj, get: obj => obj.editedChannelPost }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_messageReaction_decorators, { kind: "getter", name: "messageReaction", static: false, private: false, access: { has: obj => "messageReaction" in obj, get: obj => obj.messageReaction }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_messageReactionCount_decorators, { kind: "getter", name: "messageReactionCount", static: false, private: false, access: { has: obj => "messageReactionCount" in obj, get: obj => obj.messageReactionCount }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_inlineQuery_decorators, { kind: "getter", name: "inlineQuery", static: false, private: false, access: { has: obj => "inlineQuery" in obj, get: obj => obj.inlineQuery }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_chosenInlineResult_decorators, { kind: "getter", name: "chosenInlineResult", static: false, private: false, access: { has: obj => "chosenInlineResult" in obj, get: obj => obj.chosenInlineResult }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_callbackQuery_decorators, { kind: "getter", name: "callbackQuery", static: false, private: false, access: { has: obj => "callbackQuery" in obj, get: obj => obj.callbackQuery }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_shippingQuery_decorators, { kind: "getter", name: "shippingQuery", static: false, private: false, access: { has: obj => "shippingQuery" in obj, get: obj => obj.shippingQuery }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_preCheckoutQuery_decorators, { kind: "getter", name: "preCheckoutQuery", static: false, private: false, access: { has: obj => "preCheckoutQuery" in obj, get: obj => obj.preCheckoutQuery }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_poll_decorators, { kind: "getter", name: "poll", static: false, private: false, access: { has: obj => "poll" in obj, get: obj => obj.poll }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_pollAnswer_decorators, { kind: "getter", name: "pollAnswer", static: false, private: false, access: { has: obj => "pollAnswer" in obj, get: obj => obj.pollAnswer }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_myChatMember_decorators, { kind: "getter", name: "myChatMember", static: false, private: false, access: { has: obj => "myChatMember" in obj, get: obj => obj.myChatMember }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_chatMember_decorators, { kind: "getter", name: "chatMember", static: false, private: false, access: { has: obj => "chatMember" in obj, get: obj => obj.chatMember }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_chatJoinRequest_decorators, { kind: "getter", name: "chatJoinRequest", static: false, private: false, access: { has: obj => "chatJoinRequest" in obj, get: obj => obj.chatJoinRequest }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_chatBoost_decorators, { kind: "getter", name: "chatBoost", static: false, private: false, access: { has: obj => "chatBoost" in obj, get: obj => obj.chatBoost }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_removedChatBoost_decorators, { kind: "getter", name: "removedChatBoost", static: false, private: false, access: { has: obj => "removedChatBoost" in obj, get: obj => obj.removedChatBoost }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            Update = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * The update's unique identifier.
         * Update identifiers start from a certain positive number and increase
         * sequentially. This ID becomes especially handy if you're using
         * **Webhooks**, since it allows you to ignore repeated updates or to restore
         * the correct update sequence, should they get out of order. If there are no
         * new updates for at least a week, then identifier of the next update will
         * be chosen randomly instead of sequentially.
         */
        get id() {
            return this.payload.update_id;
        }
        /**
         * New incoming message of any kind — text, photo, sticker, etc.
         */
        get message() {
            const { message } = this.payload;
            if (!message)
                return undefined;
            return new message_1.Message(message);
        }
        /** New version of a message that is known to the bot and was edited */
        get editedMessage() {
            const { edited_message } = this.payload;
            if (!edited_message)
                return undefined;
            return new message_1.Message(edited_message);
        }
        /** New incoming channel post of any kind — text, photo, sticker, etc. */
        get channelPost() {
            const { channel_post } = this.payload;
            if (!channel_post)
                return undefined;
            return new message_1.Message(channel_post);
        }
        /** New version of a channel post that is known to the bot and was edited */
        get editedChannelPost() {
            const { edited_channel_post } = this.payload;
            if (!edited_channel_post)
                return undefined;
            return new message_1.Message(edited_channel_post);
        }
        /** A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify `message_reaction` in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots. */
        get messageReaction() {
            const { message_reaction } = this.payload;
            if (!message_reaction)
                return undefined;
            return new message_reaction_updated_1.MessageReactionUpdated(message_reaction);
        }
        /** Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify `message_reaction_count` in the list of allowed_updates to receive these updates. */
        get messageReactionCount() {
            const { message_reaction_count } = this.payload;
            if (!message_reaction_count)
                return undefined;
            return new message_reaction_count_updated_1.MessageReactionCountUpdated(message_reaction_count);
        }
        /** New incoming inline query */
        get inlineQuery() {
            const { inline_query } = this.payload;
            if (!inline_query)
                return undefined;
            return new inline_query_1.InlineQuery(inline_query);
        }
        /**
         * The result of an inline query that was chosen by a user and sent to their
         * chat partner. Please see our documentation on the feedback collecting for
         * details on how to enable these updates for your bot.
         */
        get chosenInlineResult() {
            const { chosen_inline_result } = this.payload;
            if (!chosen_inline_result)
                return undefined;
            return new chosen_inline_result_1.ChosenInlineResult(chosen_inline_result);
        }
        /** New incoming callback query */
        get callbackQuery() {
            const { callback_query } = this.payload;
            if (!callback_query)
                return undefined;
            return new callback_query_1.CallbackQuery(callback_query);
        }
        /** New incoming shipping query. Only for invoices with flexible price */
        get shippingQuery() {
            const { shipping_query } = this.payload;
            if (!shipping_query)
                return undefined;
            return new shipping_query_1.ShippingQuery(shipping_query);
        }
        /**
         * New incoming pre-checkout query. Contains full information about checkout
         */
        get preCheckoutQuery() {
            const { pre_checkout_query } = this.payload;
            if (!pre_checkout_query)
                return undefined;
            return new pre_checkout_query_1.PreCheckoutQuery(pre_checkout_query);
        }
        /**
         * New poll state. Bots receive only updates about stopped polls and polls,
         * which are sent by the bot
         */
        get poll() {
            const { poll } = this.payload;
            if (!poll)
                return undefined;
            return new poll_1.Poll(poll);
        }
        /**
         * A user changed their answer in a non-anonymous poll. Bots receive new
         * votes only in polls that were sent by the bot itself.
         */
        get pollAnswer() {
            const { poll_answer } = this.payload;
            if (!poll_answer)
                return undefined;
            return new poll_answer_1.PollAnswer(poll_answer);
        }
        /** The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user. */
        get myChatMember() {
            const { my_chat_member } = this.payload;
            if (!my_chat_member)
                return undefined;
            return new chat_member_updated_1.ChatMemberUpdated(my_chat_member);
        }
        /**
         * A chat member's status was updated in a chat.
         *
         * The bot must be an administrator in the chat and must explicitly specify `chat_member` in the list of `allowed_updates` to receive these updates.
         */
        get chatMember() {
            const { chat_member } = this.payload;
            if (!chat_member)
                return undefined;
            return new chat_member_updated_1.ChatMemberUpdated(chat_member);
        }
        /** A request to join the chat has been sent. The bot must have the `can_invite_users` administrator right in the chat to receive these updates. */
        get chatJoinRequest() {
            const { chat_join_request } = this.payload;
            if (!chat_join_request)
                return undefined;
            return new chat_join_request_1.ChatJoinRequest(chat_join_request);
        }
        /** A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates. */
        get chatBoost() {
            const { chat_boost } = this.payload;
            if (!chat_boost)
                return undefined;
            return new chat_boost_updated_1.ChatBoostUpdated(chat_boost);
        }
        /** A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates. */
        get removedChatBoost() {
            const { removed_chat_boost } = this.payload;
            if (!removed_chat_boost)
                return undefined;
            return new chat_boost_removed_1.ChatBoostRemoved(removed_chat_boost);
        }
    };
    return Update = _classThis;
})();
exports.Update = Update;
(0, utils_1.memoizeGetters)(Update, [
    "message",
    "editedMessage",
    "channelPost",
    "editedChannelPost",
    "messageReaction",
    "messageReactionCount",
    "inlineQuery",
    "chosenInlineResult",
    "callbackQuery",
    "shippingQuery",
    "preCheckoutQuery",
    "poll",
    "pollAnswer",
    "chatMember",
    "myChatMember",
    "chatJoinRequest",
    "chatBoost",
    "removedChatBoost",
]);
