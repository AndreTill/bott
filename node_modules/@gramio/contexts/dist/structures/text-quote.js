"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextQuote = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const message_entity_1 = require("./message-entity");
/** This object contains information about the quoted part of a message that is replied to by the given message. */
let TextQuote = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_text_decorators;
    let _get_entities_decorators;
    let _get_position_decorators;
    let _isManual_decorators;
    var TextQuote = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_text_decorators = [(0, inspectable_1.Inspect)()];
            _get_entities_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_position_decorators = [(0, inspectable_1.Inspect)()];
            _isManual_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            tslib_1.__esDecorate(this, null, _get_text_decorators, { kind: "getter", name: "text", static: false, private: false, access: { has: obj => "text" in obj, get: obj => obj.text }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_entities_decorators, { kind: "getter", name: "entities", static: false, private: false, access: { has: obj => "entities" in obj, get: obj => obj.entities }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_position_decorators, { kind: "getter", name: "position", static: false, private: false, access: { has: obj => "position" in obj, get: obj => obj.position }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isManual_decorators, { kind: "method", name: "isManual", static: false, private: false, access: { has: obj => "isManual" in obj, get: obj => obj.isManual }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            TextQuote = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Text of the quoted part of a message that is replied to by the given message */
        get text() {
            return this.payload.text;
        }
        /** Special entities that appear in the quote. Currently, only `bold`, `italic`, `underline`, `strikethrough`, `spoiler`, and `custom_emoji` entities are kept in quotes. */
        get entities() {
            const { entities } = this.payload;
            if (!entities) {
                return undefined;
            }
            return entities.map((e) => new message_entity_1.MessageEntity(e));
        }
        /** Approximate quote position in the original message in UTF-16 code units as specified by the sender */
        get position() {
            return this.payload.position;
        }
        /** `true`, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server. */
        isManual() {
            return this.payload.is_manual;
        }
    };
    return TextQuote = _classThis;
})();
exports.TextQuote = TextQuote;
(0, utils_1.memoizeGetters)(TextQuote, ["entities"]);
