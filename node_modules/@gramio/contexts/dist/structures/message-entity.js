"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageEntity = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const user_1 = require("./user");
/**
 * This object represents one special entity in a text message.
 * For example, hashtags, usernames, URLs, etc.
 */
let MessageEntity = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_type_decorators;
    let _get_offset_decorators;
    let _get_length_decorators;
    let _get_url_decorators;
    let _get_user_decorators;
    let _get_language_decorators;
    let _get_customEmojiId_decorators;
    var MessageEntity = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_type_decorators = [(0, inspectable_1.Inspect)()];
            _get_offset_decorators = [(0, inspectable_1.Inspect)()];
            _get_length_decorators = [(0, inspectable_1.Inspect)()];
            _get_url_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_user_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_language_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_customEmojiId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_type_decorators, { kind: "getter", name: "type", static: false, private: false, access: { has: obj => "type" in obj, get: obj => obj.type }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_offset_decorators, { kind: "getter", name: "offset", static: false, private: false, access: { has: obj => "offset" in obj, get: obj => obj.offset }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_length_decorators, { kind: "getter", name: "length", static: false, private: false, access: { has: obj => "length" in obj, get: obj => obj.length }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_url_decorators, { kind: "getter", name: "url", static: false, private: false, access: { has: obj => "url" in obj, get: obj => obj.url }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_user_decorators, { kind: "getter", name: "user", static: false, private: false, access: { has: obj => "user" in obj, get: obj => obj.user }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_language_decorators, { kind: "getter", name: "language", static: false, private: false, access: { has: obj => "language" in obj, get: obj => obj.language }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_customEmojiId_decorators, { kind: "getter", name: "customEmojiId", static: false, private: false, access: { has: obj => "customEmojiId" in obj, get: obj => obj.customEmojiId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            MessageEntity = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * Type of the entity.
         *
         * Can be `mention` (`@username`), `hashtag` (`#hashtag`), `cashtag`
         * (`$USD`), `bot_command` (`/start@jobs_bot`), `url`
         * (`https://telegram.org`), `email` (`do-not-reply@telegram.org`),
         * `phone_number` (`+1-212-555-0123`), `bold` (**bold text**), `italic`
         * (_italic text_), `underline` (underlined text), `strikethrough`
         * (~~strikethrough text~~), “spoiler” (spoiler message), `code` (`monowidth string`),
         * `pre` (`monowidth block`), `text_link` (for clickable text URLs), `text_mention`
         * (for users without usernames)
         */
        get type() {
            return this.payload.type;
        }
        /** Offset in UTF-16 code units to the start of the entity */
        get offset() {
            return this.payload.offset;
        }
        /** Length of the entity in UTF-16 code units */
        get length() {
            return this.payload.length;
        }
        /**
         * For `text_link` only, url that will be opened after user taps on the text
         */
        get url() {
            return this.payload.url;
        }
        /** For `text_mention` only, the mentioned user */
        get user() {
            const { user } = this.payload;
            if (!user)
                return undefined;
            return new user_1.User(user);
        }
        /** For `pre` only, the programming language of the entity text */
        get language() {
            return this.payload.language;
        }
        /**
         * For `custom_emoji` only, unique identifier of the custom emoji.
         *
         * Use `getCustomEmojiStickers` to get full information about the sticker
         */
        get customEmojiId() {
            return this.payload.custom_emoji_id;
        }
    };
    return MessageEntity = _classThis;
})();
exports.MessageEntity = MessageEntity;
(0, utils_1.memoizeGetters)(MessageEntity, ["user"]);
