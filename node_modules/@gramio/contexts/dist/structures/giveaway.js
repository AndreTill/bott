"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Giveaway = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const chat_1 = require("./chat");
/** This object represents a message about a scheduled giveaway. */
let Giveaway = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_chats_decorators;
    let _get_winnersSelectionDate_decorators;
    let _get_winnerCount_decorators;
    let _get_onlyNewMembers_decorators;
    let _hasPublicWinners_decorators;
    let _get_prizeDescription_decorators;
    let _get_countryCodes_decorators;
    let _get_premiumSubscriptionMonthCount_decorators;
    var Giveaway = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_chats_decorators = [(0, inspectable_1.Inspect)()];
            _get_winnersSelectionDate_decorators = [(0, inspectable_1.Inspect)()];
            _get_winnerCount_decorators = [(0, inspectable_1.Inspect)()];
            _get_onlyNewMembers_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _hasPublicWinners_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _get_prizeDescription_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_countryCodes_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_premiumSubscriptionMonthCount_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_chats_decorators, { kind: "getter", name: "chats", static: false, private: false, access: { has: obj => "chats" in obj, get: obj => obj.chats }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_winnersSelectionDate_decorators, { kind: "getter", name: "winnersSelectionDate", static: false, private: false, access: { has: obj => "winnersSelectionDate" in obj, get: obj => obj.winnersSelectionDate }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_winnerCount_decorators, { kind: "getter", name: "winnerCount", static: false, private: false, access: { has: obj => "winnerCount" in obj, get: obj => obj.winnerCount }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_onlyNewMembers_decorators, { kind: "getter", name: "onlyNewMembers", static: false, private: false, access: { has: obj => "onlyNewMembers" in obj, get: obj => obj.onlyNewMembers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _hasPublicWinners_decorators, { kind: "method", name: "hasPublicWinners", static: false, private: false, access: { has: obj => "hasPublicWinners" in obj, get: obj => obj.hasPublicWinners }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_prizeDescription_decorators, { kind: "getter", name: "prizeDescription", static: false, private: false, access: { has: obj => "prizeDescription" in obj, get: obj => obj.prizeDescription }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_countryCodes_decorators, { kind: "getter", name: "countryCodes", static: false, private: false, access: { has: obj => "countryCodes" in obj, get: obj => obj.countryCodes }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_premiumSubscriptionMonthCount_decorators, { kind: "getter", name: "premiumSubscriptionMonthCount", static: false, private: false, access: { has: obj => "premiumSubscriptionMonthCount" in obj, get: obj => obj.premiumSubscriptionMonthCount }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            Giveaway = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** The list of chats which the user must join to participate in the giveaway */
        get chats() {
            return this.payload.chats.map((c) => new chat_1.Chat(c));
        }
        /** Point in time (Unix timestamp) when winners of the giveaway will be selected */
        get winnersSelectionDate() {
            return this.payload.winners_selection_date;
        }
        /** The number of users which are supposed to be selected as winners of the giveaway */
        get winnerCount() {
            return this.payload.winner_count;
        }
        /** `true`, if only users who join the chats after the giveaway started should be eligible to win */
        get onlyNewMembers() {
            return this.payload.only_new_members;
        }
        /** `true`, if the list of giveaway winners will be visible to everyone */
        hasPublicWinners() {
            return this.payload.has_public_winners;
        }
        /** Description of additional giveaway prize */
        get prizeDescription() {
            return this.payload.prize_description;
        }
        /** A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways. */
        get countryCodes() {
            return this.payload.country_codes;
        }
        /** The number of months the Telegram Premium subscription won from the giveaway will be active for */
        get premiumSubscriptionMonthCount() {
            return this.payload.premium_subscription_month_count;
        }
    };
    return Giveaway = _classThis;
})();
exports.Giveaway = Giveaway;
