"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatPhoto = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/** This object represents a chat photo. */
let ChatPhoto = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_smallFileId_decorators;
    let _get_smallFileUniqueId_decorators;
    let _get_bigFileId_decorators;
    let _get_bigFileUniqueId_decorators;
    var ChatPhoto = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_smallFileId_decorators = [(0, inspectable_1.Inspect)()];
            _get_smallFileUniqueId_decorators = [(0, inspectable_1.Inspect)()];
            _get_bigFileId_decorators = [(0, inspectable_1.Inspect)()];
            _get_bigFileUniqueId_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_smallFileId_decorators, { kind: "getter", name: "smallFileId", static: false, private: false, access: { has: obj => "smallFileId" in obj, get: obj => obj.smallFileId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_smallFileUniqueId_decorators, { kind: "getter", name: "smallFileUniqueId", static: false, private: false, access: { has: obj => "smallFileUniqueId" in obj, get: obj => obj.smallFileUniqueId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_bigFileId_decorators, { kind: "getter", name: "bigFileId", static: false, private: false, access: { has: obj => "bigFileId" in obj, get: obj => obj.bigFileId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_bigFileUniqueId_decorators, { kind: "getter", name: "bigFileUniqueId", static: false, private: false, access: { has: obj => "bigFileUniqueId" in obj, get: obj => obj.bigFileUniqueId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ChatPhoto = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * File identifier of small (`160x160`) chat photo.
         * This `file_id` can be used only for photo download and only for as long
         * as the photo is not changed.
         */
        get smallFileId() {
            return this.payload.small_file_id;
        }
        /**
         * Unique file identifier of small (`160x160`) chat photo, which is supposed
         * to be the same over time and for different bots. Can't be used to download
         * or reuse the file.
         */
        get smallFileUniqueId() {
            return this.payload.small_file_unique_id;
        }
        /**
         * File identifier of big (`640x640`) chat photo. This `file_id` can be used
         * only for photo download and only for as long as the photo is not changed.
         */
        get bigFileId() {
            return this.payload.big_file_id;
        }
        /**
         * Unique file identifier of big (`640x640`) chat photo, which is supposed
         * to be the same over time and for different bots. Can't be used to
         * download or reuse the file.
         */
        get bigFileUniqueId() {
            return this.payload.big_file_unique_id;
        }
    };
    return ChatPhoto = _classThis;
})();
exports.ChatPhoto = ChatPhoto;
