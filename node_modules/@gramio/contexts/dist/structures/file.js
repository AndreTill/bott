"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.File = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/** This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling `getFile`. */
let File = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_fileId_decorators;
    let _get_fileUniqueId_decorators;
    let _get_fileSize_decorators;
    let _get_filePath_decorators;
    var File = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_fileId_decorators = [(0, inspectable_1.Inspect)()];
            _get_fileUniqueId_decorators = [(0, inspectable_1.Inspect)()];
            _get_fileSize_decorators = [(0, inspectable_1.Inspect)()];
            _get_filePath_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_fileId_decorators, { kind: "getter", name: "fileId", static: false, private: false, access: { has: obj => "fileId" in obj, get: obj => obj.fileId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_fileUniqueId_decorators, { kind: "getter", name: "fileUniqueId", static: false, private: false, access: { has: obj => "fileUniqueId" in obj, get: obj => obj.fileUniqueId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_fileSize_decorators, { kind: "getter", name: "fileSize", static: false, private: false, access: { has: obj => "fileSize" in obj, get: obj => obj.fileSize }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_filePath_decorators, { kind: "getter", name: "filePath", static: false, private: false, access: { has: obj => "filePath" in obj, get: obj => obj.filePath }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            File = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * Identifier for this file, which can be used to download or reuse the file
         */
        get fileId() {
            return this.payload.file_id;
        }
        /**
         * Unique identifier for this file, which is supposed to be the same over
         * time and for different bots. Can't be used to download or reuse the file.
         */
        get fileUniqueId() {
            return this.payload.file_unique_id;
        }
        /** File size, if known */
        get fileSize() {
            return this.payload.file_size;
        }
        /**
         * File path.
         * Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the
         * file.
         */
        get filePath() {
            return this.payload.file_path;
        }
    };
    return File = _classThis;
})();
exports.File = File;
