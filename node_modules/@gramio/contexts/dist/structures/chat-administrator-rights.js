"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatAdministratorRights = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
/** Represents the rights of an administrator in a chat. */
let ChatAdministratorRights = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _isAnonymous_decorators;
    let _canManageChat_decorators;
    let _canDeleteMessages_decorators;
    let _canManageVideoChats_decorators;
    let _canRestrictMembers_decorators;
    let _canPromoteMembers_decorators;
    let _canChangeInfo_decorators;
    let _canInviteUsers_decorators;
    let _canPostMessages_decorators;
    let _canEditMessages_decorators;
    let _canPinMessages_decorators;
    let _canPostStories_decorators;
    let _canEditStories_decorators;
    let _canDeleteStories_decorators;
    let _canManageTopics_decorators;
    var ChatAdministratorRights = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _isAnonymous_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canManageChat_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canDeleteMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canManageVideoChats_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canRestrictMembers_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canPromoteMembers_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canChangeInfo_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canInviteUsers_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canPostMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canEditMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canPinMessages_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canPostStories_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canEditStories_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canDeleteStories_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            _canManageTopics_decorators = [(0, inspectable_1.Inspect)({ compute: true })];
            tslib_1.__esDecorate(this, null, _isAnonymous_decorators, { kind: "method", name: "isAnonymous", static: false, private: false, access: { has: obj => "isAnonymous" in obj, get: obj => obj.isAnonymous }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canManageChat_decorators, { kind: "method", name: "canManageChat", static: false, private: false, access: { has: obj => "canManageChat" in obj, get: obj => obj.canManageChat }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canDeleteMessages_decorators, { kind: "method", name: "canDeleteMessages", static: false, private: false, access: { has: obj => "canDeleteMessages" in obj, get: obj => obj.canDeleteMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canManageVideoChats_decorators, { kind: "method", name: "canManageVideoChats", static: false, private: false, access: { has: obj => "canManageVideoChats" in obj, get: obj => obj.canManageVideoChats }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canRestrictMembers_decorators, { kind: "method", name: "canRestrictMembers", static: false, private: false, access: { has: obj => "canRestrictMembers" in obj, get: obj => obj.canRestrictMembers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canPromoteMembers_decorators, { kind: "method", name: "canPromoteMembers", static: false, private: false, access: { has: obj => "canPromoteMembers" in obj, get: obj => obj.canPromoteMembers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canChangeInfo_decorators, { kind: "method", name: "canChangeInfo", static: false, private: false, access: { has: obj => "canChangeInfo" in obj, get: obj => obj.canChangeInfo }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canInviteUsers_decorators, { kind: "method", name: "canInviteUsers", static: false, private: false, access: { has: obj => "canInviteUsers" in obj, get: obj => obj.canInviteUsers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canPostMessages_decorators, { kind: "method", name: "canPostMessages", static: false, private: false, access: { has: obj => "canPostMessages" in obj, get: obj => obj.canPostMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canEditMessages_decorators, { kind: "method", name: "canEditMessages", static: false, private: false, access: { has: obj => "canEditMessages" in obj, get: obj => obj.canEditMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canPinMessages_decorators, { kind: "method", name: "canPinMessages", static: false, private: false, access: { has: obj => "canPinMessages" in obj, get: obj => obj.canPinMessages }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canPostStories_decorators, { kind: "method", name: "canPostStories", static: false, private: false, access: { has: obj => "canPostStories" in obj, get: obj => obj.canPostStories }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canEditStories_decorators, { kind: "method", name: "canEditStories", static: false, private: false, access: { has: obj => "canEditStories" in obj, get: obj => obj.canEditStories }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canDeleteStories_decorators, { kind: "method", name: "canDeleteStories", static: false, private: false, access: { has: obj => "canDeleteStories" in obj, get: obj => obj.canDeleteStories }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _canManageTopics_decorators, { kind: "method", name: "canManageTopics", static: false, private: false, access: { has: obj => "canManageTopics" in obj, get: obj => obj.canManageTopics }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            ChatAdministratorRights = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** `true`, if the user's presence in the chat is hidden */
        isAnonymous() {
            return this.payload.is_anonymous;
        }
        /** `true`, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege */
        canManageChat() {
            return this.payload.can_manage_chat;
        }
        /** `true`, if the administrator can delete messages of other users */
        canDeleteMessages() {
            return this.payload.can_delete_messages;
        }
        /** `true`, if the administrator can manage video chats */
        canManageVideoChats() {
            return this.payload.can_manage_video_chats;
        }
        /** `true`, if the administrator can restrict, ban or unban chat members */
        canRestrictMembers() {
            return this.payload.can_restrict_members;
        }
        /** `true`, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user) */
        canPromoteMembers() {
            return this.payload.can_promote_members;
        }
        /** `true`, if the user is allowed to change the chat title, photo and other settings */
        canChangeInfo() {
            return this.payload.can_change_info;
        }
        /** `true`, if the user is allowed to invite new users to the chat */
        canInviteUsers() {
            return this.payload.can_invite_users;
        }
        /** `true`, if the administrator can post in the channel; channels only */
        canPostMessages() {
            return this.payload.can_post_messages;
        }
        /** `true`, if the administrator can edit messages of other users and can pin messages; channels only */
        canEditMessages() {
            return this.payload.can_edit_messages;
        }
        /** `true`, if the user is allowed to pin messages; groups and supergroups only */
        canPinMessages() {
            return this.payload.can_pin_messages;
        }
        /** `true`, if the administrator can post stories in the channel; channels only */
        canPostStories() {
            return this.payload.can_post_stories;
        }
        /** `true`, if the administrator can edit stories posted by other users; channels only */
        canEditStories() {
            return this.payload.can_edit_stories;
        }
        /** `true`, if the administrator can delete stories posted by other users; channels only */
        canDeleteStories() {
            return this.payload.can_delete_stories;
        }
        /** `true`, if the user is allowed to create, rename, close, and reopen forum topics; supergroups only */
        canManageTopics() {
            return this.payload.can_manage_topics;
        }
    };
    return ChatAdministratorRights = _classThis;
})();
exports.ChatAdministratorRights = ChatAdministratorRights;
