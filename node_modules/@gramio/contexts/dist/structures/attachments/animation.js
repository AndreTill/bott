"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimationAttachment = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const photo_size_1 = require("../photo-size");
const utils_1 = require("../../utils");
const file_attachment_1 = require("./file-attachment");
/**
 * This object represents an animation file
 * (GIF or H.264/MPEG-4 AVC video without sound).
 */
// TODO: extended: ['fileId', 'fileUniqueId']
let AnimationAttachment = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = file_attachment_1.FileAttachment;
    let _instanceExtraInitializers = [];
    let _get_width_decorators;
    let _get_height_decorators;
    let _get_duration_decorators;
    let _get_thumbnail_decorators;
    let _get_fileName_decorators;
    let _get_mimeType_decorators;
    let _get_fileSize_decorators;
    var AnimationAttachment = class extends _classSuper {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _get_width_decorators = [(0, inspectable_1.Inspect)()];
            _get_height_decorators = [(0, inspectable_1.Inspect)()];
            _get_duration_decorators = [(0, inspectable_1.Inspect)()];
            _get_thumbnail_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_fileName_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_mimeType_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_fileSize_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_width_decorators, { kind: "getter", name: "width", static: false, private: false, access: { has: obj => "width" in obj, get: obj => obj.width }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_height_decorators, { kind: "getter", name: "height", static: false, private: false, access: { has: obj => "height" in obj, get: obj => obj.height }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_duration_decorators, { kind: "getter", name: "duration", static: false, private: false, access: { has: obj => "duration" in obj, get: obj => obj.duration }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_thumbnail_decorators, { kind: "getter", name: "thumbnail", static: false, private: false, access: { has: obj => "thumbnail" in obj, get: obj => obj.thumbnail }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_fileName_decorators, { kind: "getter", name: "fileName", static: false, private: false, access: { has: obj => "fileName" in obj, get: obj => obj.fileName }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_mimeType_decorators, { kind: "getter", name: "mimeType", static: false, private: false, access: { has: obj => "mimeType" in obj, get: obj => obj.mimeType }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_fileSize_decorators, { kind: "getter", name: "fileSize", static: false, private: false, access: { has: obj => "fileSize" in obj, get: obj => obj.fileSize }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            AnimationAttachment = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        attachmentType = (tslib_1.__runInitializers(this, _instanceExtraInitializers), "animation");
        /** Video width as defined by sender */
        get width() {
            return this.payload.width;
        }
        /** Video height as defined by sender */
        get height() {
            return this.payload.height;
        }
        /** Duration of the video in seconds as defined by sender */
        get duration() {
            return this.payload.duration;
        }
        /** Animation thumbnail as defined by sender */
        get thumbnail() {
            const { thumbnail } = this.payload;
            if (!thumbnail)
                return undefined;
            return new photo_size_1.PhotoSize(thumbnail);
        }
        /** Original animation filename as defined by sender */
        get fileName() {
            return this.payload.file_name;
        }
        /** MIME type of the file as defined by sender */
        get mimeType() {
            return this.payload.mime_type;
        }
        /** File size */
        get fileSize() {
            return this.payload.file_size;
        }
    };
    return AnimationAttachment = _classThis;
})();
exports.AnimationAttachment = AnimationAttachment;
(0, utils_1.memoizeGetters)(AnimationAttachment, ["thumbnail"]);
