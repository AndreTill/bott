"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassportData = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const encrypted_credentials_1 = require("./encrypted-credentials");
const encrypted_passport_element_1 = require("./encrypted-passport-element");
/**
 * Contains information about Telegram Passport data shared with the bot by the
 * user.
 */
let PassportData = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_data_decorators;
    let _get_credentials_decorators;
    var PassportData = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_data_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_credentials_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_data_decorators, { kind: "getter", name: "data", static: false, private: false, access: { has: obj => "data" in obj, get: obj => obj.data }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_credentials_decorators, { kind: "getter", name: "credentials", static: false, private: false, access: { has: obj => "credentials" in obj, get: obj => obj.credentials }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            PassportData = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /**
         * Array with information about documents and other Telegram Passport
         * elements that was shared with the bot
         */
        get data() {
            const { data } = this.payload;
            if (!data)
                return undefined;
            return data.map((element) => new encrypted_passport_element_1.EncryptedPassportElement(element));
        }
        /** Encrypted credentials required to decrypt the data */
        get credentials() {
            return new encrypted_credentials_1.EncryptedCredentials(this.payload.credentials);
        }
    };
    return PassportData = _classThis;
})();
exports.PassportData = PassportData;
(0, utils_1.memoizeGetters)(PassportData, ["credentials"]);
