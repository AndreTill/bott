"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const chat_1 = require("./chat");
const chat_shared_1 = require("./chat-shared");
const contact_1 = require("./contact");
const dice_1 = require("./dice");
const external_reply_info_1 = require("./external-reply-info");
const forum_topic_closed_1 = require("./forum-topic-closed");
const forum_topic_created_1 = require("./forum-topic-created");
const forum_topic_edited_1 = require("./forum-topic-edited");
const forum_topic_reopened_1 = require("./forum-topic-reopened");
const game_1 = require("./game");
const general_forum_topic_hidden_1 = require("./general-forum-topic-hidden");
const general_forum_topic_unhidden_1 = require("./general-forum-topic-unhidden");
const inaccessible_message_1 = require("./inaccessible-message");
const inline_keyboard_markup_1 = require("./inline-keyboard-markup");
const invoice_1 = require("./invoice");
const link_preview_options_1 = require("./link-preview-options");
const location_1 = require("./location");
const message_auto_delete_timer_changed_1 = require("./message-auto-delete-timer-changed");
const message_entity_1 = require("./message-entity");
const index_1 = require("./message-origin/index");
const passport_data_1 = require("./passport-data");
const photo_size_1 = require("./photo-size");
const poll_1 = require("./poll");
const proximity_alert_triggered_1 = require("./proximity-alert-triggered");
const successful_payment_1 = require("./successful-payment");
const text_quote_1 = require("./text-quote");
const user_1 = require("./user");
const users_shared_1 = require("./users-shared");
const venue_1 = require("./venue");
const video_chat_ended_1 = require("./video-chat-ended");
const video_chat_participants_invited_1 = require("./video-chat-participants-invited");
const video_chat_scheduled_1 = require("./video-chat-scheduled");
const video_chat_started_1 = require("./video-chat-started");
const web_app_data_1 = require("./web-app-data");
const write_access_allowed_1 = require("./write-access-allowed");
const index_2 = require("./attachments/index");
const utils_1 = require("../utils");
const chat_background_1 = require("./chat-background");
const chat_boost_added_1 = require("./chat-boost-added");
const giveaway_1 = require("./giveaway");
const giveaway_completed_1 = require("./giveaway-completed");
const giveaway_created_1 = require("./giveaway-created");
const giveaway_winners_1 = require("./giveaway-winners");
const story_1 = require("./story");
/** This object represents a message. */
let Message = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_id_decorators;
    let _get_threadId_decorators;
    let _get_from_decorators;
    let _get_senderChat_decorators;
    let _get_senderBoostCount_decorators;
    let _get_senderBusinessBot_decorators;
    let _get_createdAt_decorators;
    let _get_businessConnectionId_decorators;
    let _get_chat_decorators;
    let _get_forwardOrigin_decorators;
    let _isTopicMessage_decorators;
    let _isAutomaticForward_decorators;
    let _get_replyMessage_decorators;
    let _get_replyStory_decorators;
    let _get_externalReply_decorators;
    let _get_quote_decorators;
    let _get_viaBot_decorators;
    let _get_updatedAt_decorators;
    let _hasProtectedContent_decorators;
    let _isFromOffline_decorators;
    let _get_mediaGroupId_decorators;
    let _get_authorSignature_decorators;
    let _get_text_decorators;
    let _get_entities_decorators;
    let _get_linkPreviewOptions_decorators;
    let _get_effectId_decorators;
    let _get_animation_decorators;
    let _get_audio_decorators;
    let _get_document_decorators;
    let _get_photo_decorators;
    let _get_sticker_decorators;
    let _get_story_decorators;
    let _get_video_decorators;
    let _get_videoNote_decorators;
    let _get_voice_decorators;
    let _get_caption_decorators;
    let _get_captionEntities_decorators;
    let _isShowCaptionAboveMedia_decorators;
    let _hasMediaSpoiler_decorators;
    let _get_contact_decorators;
    let _get_dice_decorators;
    let _get_game_decorators;
    let _get_poll_decorators;
    let _get_venue_decorators;
    let _get_location_decorators;
    let _get_replyMarkup_decorators;
    let _get_connectedWebsite_decorators;
    let _get_passportData_decorators;
    let _get_newChatMembers_decorators;
    let _get_leftChatMember_decorators;
    let _get_newChatTitle_decorators;
    let _get_newChatPhoto_decorators;
    let _get_deleteChatPhoto_decorators;
    let _get_groupChatCreated_decorators;
    let _get_supergroupChatCreated_decorators;
    let _get_messageAutoDeleteTimerChanged_decorators;
    let _get_channelChatCreated_decorators;
    let _get_migrateToChatId_decorators;
    let _get_migrateFromChatId_decorators;
    let _get_pinnedMessage_decorators;
    let _get_invoice_decorators;
    let _get_successfulPayment_decorators;
    let _get_usersShared_decorators;
    let _get_chatShared_decorators;
    let _get_proximityAlertTriggered_decorators;
    let _get_writeAccessAllowed_decorators;
    let _get_chatBoostAdded_decorators;
    let _get_chatBackgroundSet_decorators;
    let _get_forumTopicCreated_decorators;
    let _get_forumTopicEdited_decorators;
    let _get_forumTopicClosed_decorators;
    let _get_forumTopicReopened_decorators;
    let _get_generalForumTopicHidden_decorators;
    let _get_generalForumTopicUnhidden_decorators;
    let _get_giveaway_decorators;
    let _get_giveawayCreated_decorators;
    let _get_giveawayCompleted_decorators;
    let _get_giveawayWinners_decorators;
    let _get_videoChatScheduled_decorators;
    let _get_videoChatStarted_decorators;
    let _get_videoChatEnded_decorators;
    let _get_videoChatParticipantsInvited_decorators;
    let _get_webAppData_decorators;
    var Message = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_id_decorators = [(0, inspectable_1.Inspect)()];
            _get_threadId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_from_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_senderChat_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_senderBoostCount_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_senderBusinessBot_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_createdAt_decorators = [(0, inspectable_1.Inspect)()];
            _get_businessConnectionId_decorators = [(0, inspectable_1.Inspect)()];
            _get_chat_decorators = [(0, inspectable_1.Inspect)()];
            _get_forwardOrigin_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _isTopicMessage_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _isAutomaticForward_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _get_replyMessage_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_replyStory_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_externalReply_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_quote_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_viaBot_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_updatedAt_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _hasProtectedContent_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _isFromOffline_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _get_mediaGroupId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_authorSignature_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_text_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_entities_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_linkPreviewOptions_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_effectId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_animation_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_audio_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_document_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_photo_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_sticker_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_story_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_video_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_videoNote_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_voice_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_caption_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_captionEntities_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _isShowCaptionAboveMedia_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _hasMediaSpoiler_decorators = [(0, inspectable_1.Inspect)({ compute: true, nullable: false })];
            _get_contact_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_dice_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_game_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_poll_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_venue_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_location_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_replyMarkup_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_connectedWebsite_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_passportData_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_newChatMembers_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_leftChatMember_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_newChatTitle_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_newChatPhoto_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_deleteChatPhoto_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_groupChatCreated_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_supergroupChatCreated_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_messageAutoDeleteTimerChanged_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_channelChatCreated_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_migrateToChatId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_migrateFromChatId_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_pinnedMessage_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_invoice_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_successfulPayment_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_usersShared_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_chatShared_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_proximityAlertTriggered_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_writeAccessAllowed_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_chatBoostAdded_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_chatBackgroundSet_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_forumTopicCreated_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_forumTopicEdited_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_forumTopicClosed_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_forumTopicReopened_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_generalForumTopicHidden_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_generalForumTopicUnhidden_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_giveaway_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_giveawayCreated_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_giveawayCompleted_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_giveawayWinners_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_videoChatScheduled_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_videoChatStarted_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_videoChatEnded_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_videoChatParticipantsInvited_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_webAppData_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            tslib_1.__esDecorate(this, null, _get_id_decorators, { kind: "getter", name: "id", static: false, private: false, access: { has: obj => "id" in obj, get: obj => obj.id }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_threadId_decorators, { kind: "getter", name: "threadId", static: false, private: false, access: { has: obj => "threadId" in obj, get: obj => obj.threadId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_from_decorators, { kind: "getter", name: "from", static: false, private: false, access: { has: obj => "from" in obj, get: obj => obj.from }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_senderChat_decorators, { kind: "getter", name: "senderChat", static: false, private: false, access: { has: obj => "senderChat" in obj, get: obj => obj.senderChat }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_senderBoostCount_decorators, { kind: "getter", name: "senderBoostCount", static: false, private: false, access: { has: obj => "senderBoostCount" in obj, get: obj => obj.senderBoostCount }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_senderBusinessBot_decorators, { kind: "getter", name: "senderBusinessBot", static: false, private: false, access: { has: obj => "senderBusinessBot" in obj, get: obj => obj.senderBusinessBot }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_createdAt_decorators, { kind: "getter", name: "createdAt", static: false, private: false, access: { has: obj => "createdAt" in obj, get: obj => obj.createdAt }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_businessConnectionId_decorators, { kind: "getter", name: "businessConnectionId", static: false, private: false, access: { has: obj => "businessConnectionId" in obj, get: obj => obj.businessConnectionId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_chat_decorators, { kind: "getter", name: "chat", static: false, private: false, access: { has: obj => "chat" in obj, get: obj => obj.chat }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_forwardOrigin_decorators, { kind: "getter", name: "forwardOrigin", static: false, private: false, access: { has: obj => "forwardOrigin" in obj, get: obj => obj.forwardOrigin }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isTopicMessage_decorators, { kind: "method", name: "isTopicMessage", static: false, private: false, access: { has: obj => "isTopicMessage" in obj, get: obj => obj.isTopicMessage }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isAutomaticForward_decorators, { kind: "method", name: "isAutomaticForward", static: false, private: false, access: { has: obj => "isAutomaticForward" in obj, get: obj => obj.isAutomaticForward }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_replyMessage_decorators, { kind: "getter", name: "replyMessage", static: false, private: false, access: { has: obj => "replyMessage" in obj, get: obj => obj.replyMessage }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_replyStory_decorators, { kind: "getter", name: "replyStory", static: false, private: false, access: { has: obj => "replyStory" in obj, get: obj => obj.replyStory }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_externalReply_decorators, { kind: "getter", name: "externalReply", static: false, private: false, access: { has: obj => "externalReply" in obj, get: obj => obj.externalReply }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_quote_decorators, { kind: "getter", name: "quote", static: false, private: false, access: { has: obj => "quote" in obj, get: obj => obj.quote }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_viaBot_decorators, { kind: "getter", name: "viaBot", static: false, private: false, access: { has: obj => "viaBot" in obj, get: obj => obj.viaBot }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_updatedAt_decorators, { kind: "getter", name: "updatedAt", static: false, private: false, access: { has: obj => "updatedAt" in obj, get: obj => obj.updatedAt }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _hasProtectedContent_decorators, { kind: "method", name: "hasProtectedContent", static: false, private: false, access: { has: obj => "hasProtectedContent" in obj, get: obj => obj.hasProtectedContent }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isFromOffline_decorators, { kind: "method", name: "isFromOffline", static: false, private: false, access: { has: obj => "isFromOffline" in obj, get: obj => obj.isFromOffline }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_mediaGroupId_decorators, { kind: "getter", name: "mediaGroupId", static: false, private: false, access: { has: obj => "mediaGroupId" in obj, get: obj => obj.mediaGroupId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_authorSignature_decorators, { kind: "getter", name: "authorSignature", static: false, private: false, access: { has: obj => "authorSignature" in obj, get: obj => obj.authorSignature }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_text_decorators, { kind: "getter", name: "text", static: false, private: false, access: { has: obj => "text" in obj, get: obj => obj.text }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_entities_decorators, { kind: "getter", name: "entities", static: false, private: false, access: { has: obj => "entities" in obj, get: obj => obj.entities }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_linkPreviewOptions_decorators, { kind: "getter", name: "linkPreviewOptions", static: false, private: false, access: { has: obj => "linkPreviewOptions" in obj, get: obj => obj.linkPreviewOptions }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_effectId_decorators, { kind: "getter", name: "effectId", static: false, private: false, access: { has: obj => "effectId" in obj, get: obj => obj.effectId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_animation_decorators, { kind: "getter", name: "animation", static: false, private: false, access: { has: obj => "animation" in obj, get: obj => obj.animation }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_audio_decorators, { kind: "getter", name: "audio", static: false, private: false, access: { has: obj => "audio" in obj, get: obj => obj.audio }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_document_decorators, { kind: "getter", name: "document", static: false, private: false, access: { has: obj => "document" in obj, get: obj => obj.document }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_photo_decorators, { kind: "getter", name: "photo", static: false, private: false, access: { has: obj => "photo" in obj, get: obj => obj.photo }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_sticker_decorators, { kind: "getter", name: "sticker", static: false, private: false, access: { has: obj => "sticker" in obj, get: obj => obj.sticker }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_story_decorators, { kind: "getter", name: "story", static: false, private: false, access: { has: obj => "story" in obj, get: obj => obj.story }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_video_decorators, { kind: "getter", name: "video", static: false, private: false, access: { has: obj => "video" in obj, get: obj => obj.video }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_videoNote_decorators, { kind: "getter", name: "videoNote", static: false, private: false, access: { has: obj => "videoNote" in obj, get: obj => obj.videoNote }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_voice_decorators, { kind: "getter", name: "voice", static: false, private: false, access: { has: obj => "voice" in obj, get: obj => obj.voice }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_caption_decorators, { kind: "getter", name: "caption", static: false, private: false, access: { has: obj => "caption" in obj, get: obj => obj.caption }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_captionEntities_decorators, { kind: "getter", name: "captionEntities", static: false, private: false, access: { has: obj => "captionEntities" in obj, get: obj => obj.captionEntities }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _isShowCaptionAboveMedia_decorators, { kind: "method", name: "isShowCaptionAboveMedia", static: false, private: false, access: { has: obj => "isShowCaptionAboveMedia" in obj, get: obj => obj.isShowCaptionAboveMedia }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _hasMediaSpoiler_decorators, { kind: "method", name: "hasMediaSpoiler", static: false, private: false, access: { has: obj => "hasMediaSpoiler" in obj, get: obj => obj.hasMediaSpoiler }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_contact_decorators, { kind: "getter", name: "contact", static: false, private: false, access: { has: obj => "contact" in obj, get: obj => obj.contact }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_dice_decorators, { kind: "getter", name: "dice", static: false, private: false, access: { has: obj => "dice" in obj, get: obj => obj.dice }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_game_decorators, { kind: "getter", name: "game", static: false, private: false, access: { has: obj => "game" in obj, get: obj => obj.game }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_poll_decorators, { kind: "getter", name: "poll", static: false, private: false, access: { has: obj => "poll" in obj, get: obj => obj.poll }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_venue_decorators, { kind: "getter", name: "venue", static: false, private: false, access: { has: obj => "venue" in obj, get: obj => obj.venue }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_location_decorators, { kind: "getter", name: "location", static: false, private: false, access: { has: obj => "location" in obj, get: obj => obj.location }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_replyMarkup_decorators, { kind: "getter", name: "replyMarkup", static: false, private: false, access: { has: obj => "replyMarkup" in obj, get: obj => obj.replyMarkup }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_connectedWebsite_decorators, { kind: "getter", name: "connectedWebsite", static: false, private: false, access: { has: obj => "connectedWebsite" in obj, get: obj => obj.connectedWebsite }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_passportData_decorators, { kind: "getter", name: "passportData", static: false, private: false, access: { has: obj => "passportData" in obj, get: obj => obj.passportData }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_newChatMembers_decorators, { kind: "getter", name: "newChatMembers", static: false, private: false, access: { has: obj => "newChatMembers" in obj, get: obj => obj.newChatMembers }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_leftChatMember_decorators, { kind: "getter", name: "leftChatMember", static: false, private: false, access: { has: obj => "leftChatMember" in obj, get: obj => obj.leftChatMember }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_newChatTitle_decorators, { kind: "getter", name: "newChatTitle", static: false, private: false, access: { has: obj => "newChatTitle" in obj, get: obj => obj.newChatTitle }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_newChatPhoto_decorators, { kind: "getter", name: "newChatPhoto", static: false, private: false, access: { has: obj => "newChatPhoto" in obj, get: obj => obj.newChatPhoto }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_deleteChatPhoto_decorators, { kind: "getter", name: "deleteChatPhoto", static: false, private: false, access: { has: obj => "deleteChatPhoto" in obj, get: obj => obj.deleteChatPhoto }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_groupChatCreated_decorators, { kind: "getter", name: "groupChatCreated", static: false, private: false, access: { has: obj => "groupChatCreated" in obj, get: obj => obj.groupChatCreated }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_supergroupChatCreated_decorators, { kind: "getter", name: "supergroupChatCreated", static: false, private: false, access: { has: obj => "supergroupChatCreated" in obj, get: obj => obj.supergroupChatCreated }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_messageAutoDeleteTimerChanged_decorators, { kind: "getter", name: "messageAutoDeleteTimerChanged", static: false, private: false, access: { has: obj => "messageAutoDeleteTimerChanged" in obj, get: obj => obj.messageAutoDeleteTimerChanged }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_channelChatCreated_decorators, { kind: "getter", name: "channelChatCreated", static: false, private: false, access: { has: obj => "channelChatCreated" in obj, get: obj => obj.channelChatCreated }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_migrateToChatId_decorators, { kind: "getter", name: "migrateToChatId", static: false, private: false, access: { has: obj => "migrateToChatId" in obj, get: obj => obj.migrateToChatId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_migrateFromChatId_decorators, { kind: "getter", name: "migrateFromChatId", static: false, private: false, access: { has: obj => "migrateFromChatId" in obj, get: obj => obj.migrateFromChatId }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_pinnedMessage_decorators, { kind: "getter", name: "pinnedMessage", static: false, private: false, access: { has: obj => "pinnedMessage" in obj, get: obj => obj.pinnedMessage }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_invoice_decorators, { kind: "getter", name: "invoice", static: false, private: false, access: { has: obj => "invoice" in obj, get: obj => obj.invoice }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_successfulPayment_decorators, { kind: "getter", name: "successfulPayment", static: false, private: false, access: { has: obj => "successfulPayment" in obj, get: obj => obj.successfulPayment }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_usersShared_decorators, { kind: "getter", name: "usersShared", static: false, private: false, access: { has: obj => "usersShared" in obj, get: obj => obj.usersShared }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_chatShared_decorators, { kind: "getter", name: "chatShared", static: false, private: false, access: { has: obj => "chatShared" in obj, get: obj => obj.chatShared }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_proximityAlertTriggered_decorators, { kind: "getter", name: "proximityAlertTriggered", static: false, private: false, access: { has: obj => "proximityAlertTriggered" in obj, get: obj => obj.proximityAlertTriggered }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_writeAccessAllowed_decorators, { kind: "getter", name: "writeAccessAllowed", static: false, private: false, access: { has: obj => "writeAccessAllowed" in obj, get: obj => obj.writeAccessAllowed }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_chatBoostAdded_decorators, { kind: "getter", name: "chatBoostAdded", static: false, private: false, access: { has: obj => "chatBoostAdded" in obj, get: obj => obj.chatBoostAdded }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_chatBackgroundSet_decorators, { kind: "getter", name: "chatBackgroundSet", static: false, private: false, access: { has: obj => "chatBackgroundSet" in obj, get: obj => obj.chatBackgroundSet }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_forumTopicCreated_decorators, { kind: "getter", name: "forumTopicCreated", static: false, private: false, access: { has: obj => "forumTopicCreated" in obj, get: obj => obj.forumTopicCreated }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_forumTopicEdited_decorators, { kind: "getter", name: "forumTopicEdited", static: false, private: false, access: { has: obj => "forumTopicEdited" in obj, get: obj => obj.forumTopicEdited }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_forumTopicClosed_decorators, { kind: "getter", name: "forumTopicClosed", static: false, private: false, access: { has: obj => "forumTopicClosed" in obj, get: obj => obj.forumTopicClosed }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_forumTopicReopened_decorators, { kind: "getter", name: "forumTopicReopened", static: false, private: false, access: { has: obj => "forumTopicReopened" in obj, get: obj => obj.forumTopicReopened }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_generalForumTopicHidden_decorators, { kind: "getter", name: "generalForumTopicHidden", static: false, private: false, access: { has: obj => "generalForumTopicHidden" in obj, get: obj => obj.generalForumTopicHidden }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_generalForumTopicUnhidden_decorators, { kind: "getter", name: "generalForumTopicUnhidden", static: false, private: false, access: { has: obj => "generalForumTopicUnhidden" in obj, get: obj => obj.generalForumTopicUnhidden }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_giveaway_decorators, { kind: "getter", name: "giveaway", static: false, private: false, access: { has: obj => "giveaway" in obj, get: obj => obj.giveaway }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_giveawayCreated_decorators, { kind: "getter", name: "giveawayCreated", static: false, private: false, access: { has: obj => "giveawayCreated" in obj, get: obj => obj.giveawayCreated }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_giveawayCompleted_decorators, { kind: "getter", name: "giveawayCompleted", static: false, private: false, access: { has: obj => "giveawayCompleted" in obj, get: obj => obj.giveawayCompleted }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_giveawayWinners_decorators, { kind: "getter", name: "giveawayWinners", static: false, private: false, access: { has: obj => "giveawayWinners" in obj, get: obj => obj.giveawayWinners }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_videoChatScheduled_decorators, { kind: "getter", name: "videoChatScheduled", static: false, private: false, access: { has: obj => "videoChatScheduled" in obj, get: obj => obj.videoChatScheduled }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_videoChatStarted_decorators, { kind: "getter", name: "videoChatStarted", static: false, private: false, access: { has: obj => "videoChatStarted" in obj, get: obj => obj.videoChatStarted }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_videoChatEnded_decorators, { kind: "getter", name: "videoChatEnded", static: false, private: false, access: { has: obj => "videoChatEnded" in obj, get: obj => obj.videoChatEnded }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_videoChatParticipantsInvited_decorators, { kind: "getter", name: "videoChatParticipantsInvited", static: false, private: false, access: { has: obj => "videoChatParticipantsInvited" in obj, get: obj => obj.videoChatParticipantsInvited }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_webAppData_decorators, { kind: "getter", name: "webAppData", static: false, private: false, access: { has: obj => "webAppData" in obj, get: obj => obj.webAppData }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            Message = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Unique message identifier inside this chat */
        get id() {
            return this.payload.message_id;
        }
        /** Unique identifier of a message thread to which the message belongs; for supergroups only */
        get threadId() {
            return this.payload.message_thread_id;
        }
        /** Sender, empty for messages sent to channels */
        get from() {
            const { from } = this.payload;
            if (!from)
                return undefined;
            return new user_1.User(from);
        }
        /**
         * Sender of the message, sent on behalf of a chat.
         * The channel itself for channel messages.
         * The supergroup itself for messages from anonymous group administrators.
         * The linked channel for messages automatically forwarded to the discussion group
         */
        get senderChat() {
            const { sender_chat } = this.payload;
            if (!sender_chat)
                return undefined;
            return new chat_1.Chat(sender_chat);
        }
        /** If the sender of the message boosted the chat, the number of boosts added by the user */
        get senderBoostCount() {
            return this.payload.sender_boost_count;
        }
        /** The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account. */
        get senderBusinessBot() {
            return this.payload.sender_business_bot
                ? new user_1.User(this.payload.sender_business_bot)
                : undefined;
        }
        /** Date the message was sent in Unix time */
        get createdAt() {
            return this.payload.date;
        }
        /** Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier. */
        get businessConnectionId() {
            return this.payload.business_connection_id;
        }
        /** Conversation the message belongs to */
        get chat() {
            return new chat_1.Chat(this.payload.chat);
        }
        /** Information about the original message for forwarded messages */
        get forwardOrigin() {
            if (!this.payload.forward_origin)
                return undefined;
            // TODO: simplify
            if (this.payload.forward_origin.type === "user") {
                return new index_1.MessageOriginUser(this.payload.forward_origin);
            }
            if (this.payload.forward_origin.type === "chat") {
                return new index_1.MessageOriginChat(this.payload.forward_origin);
            }
            if (this.payload.forward_origin.type === "channel") {
                return new index_1.MessageOriginChannel(this.payload.forward_origin);
            }
            if (this.payload.forward_origin.type === "hidden_user") {
                return new index_1.MessageOriginHiddenUser(this.payload.forward_origin);
            }
            throw new TypeError("unknown message origin type");
        }
        /** `true`, if the message is sent to a forum topic */
        isTopicMessage() {
            return this.payload.is_topic_message;
        }
        /** `true`, if the message is a channel post that was automatically forwarded to the connected discussion group */
        isAutomaticForward() {
            return this.payload.is_automatic_forward;
        }
        /** For replies, the original message */
        get replyMessage() {
            const { reply_to_message } = this.payload;
            if (!reply_to_message)
                return undefined;
            return new Message(reply_to_message);
        }
        /**  For replies to a story, the original story */
        get replyStory() {
            const { reply_to_story } = this.payload;
            if (!reply_to_story)
                return undefined;
            return new story_1.Story(reply_to_story);
        }
        /** Information about the message that is being replied to, which may come from another chat or forum topic */
        get externalReply() {
            const { external_reply } = this.payload;
            if (!external_reply)
                return undefined;
            return new external_reply_info_1.ExternalReplyInfo(external_reply);
        }
        /** For replies that quote part of the original message, the quoted part of the message */
        get quote() {
            const { quote } = this.payload;
            if (!quote)
                return undefined;
            return new text_quote_1.TextQuote(quote);
        }
        /** Bot through which the message was sent */
        get viaBot() {
            const { via_bot } = this.payload;
            if (!via_bot)
                return undefined;
            return new user_1.User(via_bot);
        }
        /** Date the message was last edited in Unix time */
        get updatedAt() {
            return this.payload.edit_date;
        }
        /** `true`, if the message can't be forwarded */
        hasProtectedContent() {
            return this.payload.has_protected_content;
        }
        /** `true`, True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message */
        isFromOffline() {
            return this.payload.is_from_offline;
        }
        /** The unique identifier of a media message group this message belongs to */
        get mediaGroupId() {
            return this.payload.media_group_id;
        }
        /**
         * Signature of the post author for messages in channels,
         * or the custom title of an anonymous group administrator
         */
        get authorSignature() {
            return this.payload.author_signature;
        }
        /**
         * For text messages, the actual UTF-8 text of the message, 0-4096 characters
         */
        get text() {
            return this.payload.text;
        }
        /**
         * For text messages, special entities like usernames, URLs, bot commands,
         * etc. that appear in the text
         */
        get entities() {
            const { entities } = this.payload;
            if (!entities)
                return undefined;
            return entities.map((entity) => new message_entity_1.MessageEntity(entity));
        }
        /** Options used for link preview generation for the message, if it is a text message and link preview options were changed */
        get linkPreviewOptions() {
            const { link_preview_options } = this.payload;
            if (!link_preview_options)
                return undefined;
            return new link_preview_options_1.LinkPreviewOptions(link_preview_options);
        }
        /** Unique identifier of the message effect added to the message */
        get effectId() {
            return this.payload.effect_id;
        }
        /**
         * Message is an animation, information about the animation. For backward
         * compatibility, when this field is set, the `document` field will also be set
         */
        get animation() {
            const { animation } = this.payload;
            if (!animation)
                return undefined;
            return new index_2.AnimationAttachment(animation);
        }
        /** Message is an audio file, information about the file */
        get audio() {
            const { audio } = this.payload;
            if (!audio)
                return undefined;
            return new index_2.AudioAttachment(audio);
        }
        /** Message is a general file, information about the file */
        get document() {
            const { document } = this.payload;
            if (!document)
                return undefined;
            return new index_2.DocumentAttachment(document);
        }
        /** Message is a photo, available sizes of the photo */
        get photo() {
            const { photo } = this.payload;
            if (!photo)
                return undefined;
            return photo.map((size) => new photo_size_1.PhotoSize(size));
        }
        /** Message is a sticker, information about the sticker */
        get sticker() {
            const { sticker } = this.payload;
            if (!sticker)
                return undefined;
            return new index_2.StickerAttachment(sticker);
        }
        /** Message is a forwarded story */
        get story() {
            const { story } = this.payload;
            if (!story)
                return undefined;
            return new index_2.StoryAttachment(story);
        }
        /** Message is a video, information about the video */
        get video() {
            const { video } = this.payload;
            if (!video)
                return undefined;
            return new index_2.VideoAttachment(video);
        }
        /** Message is a video note, information about the video message */
        get videoNote() {
            const { video_note } = this.payload;
            if (!video_note)
                return undefined;
            return new index_2.VideoNoteAttachment(video_note);
        }
        /** Message is a voice message, information about the file */
        get voice() {
            const { voice } = this.payload;
            if (!voice)
                return undefined;
            return new index_2.VoiceAttachment(voice);
        }
        /**
         * Caption for the animation, audio, document, photo, video or voice,
         * 0-1024 characters
         */
        get caption() {
            return this.payload.caption;
        }
        /**
         * For messages with a caption, special entities like usernames, URLs, bot
         * commands, etc. that appear in the caption
         */
        get captionEntities() {
            const { caption_entities } = this.payload;
            if (!caption_entities)
                return undefined;
            return caption_entities.map((entity) => new message_entity_1.MessageEntity(entity));
        }
        /**
         * True, if the caption must be shown above the message media
         */
        isShowCaptionAboveMedia() {
            return !!this.payload.show_caption_above_media;
        }
        /** `true`, if the message media is covered by a spoiler animation */
        hasMediaSpoiler() {
            return this.payload.has_media_spoiler;
        }
        /** Message is a shared contact, information about the contact */
        get contact() {
            const { contact } = this.payload;
            if (!contact)
                return undefined;
            return new contact_1.Contact(contact);
        }
        /** Message is a dice with random value from 1 to 6 */
        get dice() {
            const { dice } = this.payload;
            if (!dice)
                return undefined;
            return new dice_1.Dice(dice);
        }
        /** Message is a game, information about the game */
        get game() {
            const { game } = this.payload;
            if (!game)
                return undefined;
            return new game_1.Game(game);
        }
        /** Message is a native poll, information about the poll */
        get poll() {
            const { poll } = this.payload;
            if (!poll)
                return undefined;
            return new poll_1.Poll(poll);
        }
        /**
         * Message is a venue, information about the venue.
         * For backward compatibility, when this field is set,
         * the `location` field will also be set
         */
        get venue() {
            const { venue } = this.payload;
            if (!venue)
                return undefined;
            return new venue_1.Venue(venue);
        }
        /** Message is a shared location, information about the location */
        get location() {
            const { location } = this.payload;
            if (!location)
                return undefined;
            return new location_1.Location(location);
        }
        /**
         * Inline keyboard attached to the message.
         *
         * `login_url` buttons are represented as ordinary `url` buttons.
         */
        get replyMarkup() {
            const { reply_markup } = this.payload;
            if (!reply_markup || !("inline_keyboard" in reply_markup))
                return undefined;
            return new inline_keyboard_markup_1.InlineKeyboardMarkup(reply_markup);
        }
        /** The domain name of the website on which the user has logged in. */
        get connectedWebsite() {
            return this.payload.connected_website;
        }
        /** Telegram Passport data */
        get passportData() {
            const { passport_data } = this.payload;
            if (!passport_data)
                return undefined;
            return new passport_data_1.PassportData(passport_data);
        }
        // Events
        /**
         * New members that were added to the group or supergroup and information
         * about them (the bot itself may be one of these members)
         */
        get newChatMembers() {
            const { new_chat_members } = this.payload;
            if (!new_chat_members)
                return undefined;
            return new_chat_members.map((member) => new user_1.User(member));
        }
        /**
         * A member was removed from the group, information about them (this member
         * may be the bot itself)
         */
        get leftChatMember() {
            const { left_chat_member } = this.payload;
            if (!left_chat_member)
                return undefined;
            return new user_1.User(left_chat_member);
        }
        /** A chat title was changed to this value */
        get newChatTitle() {
            return this.payload.new_chat_title;
        }
        /** A chat photo was change to this value */
        get newChatPhoto() {
            const { new_chat_photo } = this.payload;
            if (!new_chat_photo)
                return undefined;
            return new_chat_photo.map((size) => new photo_size_1.PhotoSize(size));
        }
        /** Service message: the chat photo was deleted */
        get deleteChatPhoto() {
            return this.payload.delete_chat_photo;
        }
        /** Service message: the group has been created */
        get groupChatCreated() {
            return this.payload.group_chat_created;
        }
        /**
         * Service message: the supergroup has been created. This field can't be
         * received in a message coming through updates, because bot can't be a
         * member of a supergroup when it is created. It can only be found in
         * `replyMessage` if someone replies to a very first message in a
         * directly created supergroup.
         */
        get supergroupChatCreated() {
            return this.payload.supergroup_chat_created;
        }
        /** Service message: auto-delete timer settings changed in the chat */
        get messageAutoDeleteTimerChanged() {
            const { message_auto_delete_timer_changed } = this.payload;
            if (!message_auto_delete_timer_changed)
                return undefined;
            return new message_auto_delete_timer_changed_1.MessageAutoDeleteTimerChanged(message_auto_delete_timer_changed);
        }
        /**
         * Service message: the channel has been created. This field can't be
         * received in a message coming through updates, because bot can't be a
         * member of a channel when it is created. It can only be found in
         * `replyMessage` if someone replies to a very first message in a channel.
         */
        get channelChatCreated() {
            return this.payload.channel_chat_created;
        }
        /**
         * The group has been migrated to a supergroup with the specified identifier.
         * This number may be greater than 32 bits and some programming languages may
         * have difficulty/silent defects in interpreting it. But it is smaller than
         * 52 bits, so a signed 64 bit integer or double-precision float type are
         * safe for storing this identifier.
         */
        get migrateToChatId() {
            return this.payload.migrate_to_chat_id;
        }
        /**
         * The supergroup has been migrated from a group with the specified
         * identifier. This number may be greater than 32 bits and some programming
         * languages may have difficulty/silent defects in interpreting it. But it is
         * smaller than 52 bits, so a signed 64 bit integer or double-precision float
         * type are safe for storing this identifier.
         */
        get migrateFromChatId() {
            return this.payload.migrate_from_chat_id;
        }
        /**
         * Specified message was pinned. Note that the Message object in this field
         * will not contain further `replyMessage` fields even if it is itself a
         * reply.
         */
        get pinnedMessage() {
            const { pinned_message } = this.payload;
            if (!pinned_message)
                return undefined;
            if (pinned_message.date === 0) {
                return new inaccessible_message_1.InaccessibleMessage(pinned_message);
            }
            return new Message(pinned_message);
        }
        /** Message is an invoice for a payment, information about the invoice */
        get invoice() {
            const { invoice } = this.payload;
            if (!invoice)
                return undefined;
            return new invoice_1.Invoice(invoice);
        }
        /**
         * Message is a service message about a successful payment,
         * information about the payment.
         */
        get successfulPayment() {
            const { successful_payment } = this.payload;
            if (!successful_payment)
                return undefined;
            return new successful_payment_1.SuccessfulPayment(successful_payment);
        }
        /** Service message: a user was shared with the bot */
        get usersShared() {
            const { users_shared } = this.payload;
            if (!users_shared)
                return undefined;
            return new users_shared_1.UsersShared(users_shared);
        }
        /** Service message: a chat was shared with the bot */
        get chatShared() {
            const { chat_shared } = this.payload;
            if (!chat_shared)
                return undefined;
            return new chat_shared_1.ChatShared(chat_shared);
        }
        /**
         * Service message.
         * A user in the chat triggered another user's proximity alert
         * while sharing Live Location.
         */
        get proximityAlertTriggered() {
            const { proximity_alert_triggered } = this.payload;
            if (!proximity_alert_triggered)
                return undefined;
            return new proximity_alert_triggered_1.ProximityAlertTriggered(proximity_alert_triggered);
        }
        /** Service message: the user allowed the bot added to the attachment menu to write messages */
        get writeAccessAllowed() {
            const { write_access_allowed } = this.payload;
            if (!write_access_allowed)
                return undefined;
            return new write_access_allowed_1.WriteAccessAllowed(write_access_allowed);
        }
        /** Service message: chat boost added */
        get chatBoostAdded() {
            const { boost_added } = this.payload;
            if (!boost_added)
                return undefined;
            return new chat_boost_added_1.ChatBoostAdded(boost_added);
        }
        /** Service message: chat background set */
        get chatBackgroundSet() {
            const { chat_background_set } = this.payload;
            if (!chat_background_set)
                return undefined;
            return new chat_background_1.ChatBackground(chat_background_set);
        }
        /** Service message: forum topic created */
        get forumTopicCreated() {
            const { forum_topic_created } = this.payload;
            if (!forum_topic_created)
                return undefined;
            return new forum_topic_created_1.ForumTopicCreated(forum_topic_created);
        }
        /** Service message: forum topic edited */
        get forumTopicEdited() {
            const { forum_topic_edited } = this.payload;
            if (!forum_topic_edited)
                return undefined;
            return new forum_topic_edited_1.ForumTopicEdited(forum_topic_edited);
        }
        /** Service message: forum topic closed */
        get forumTopicClosed() {
            const { forum_topic_closed } = this.payload;
            if (!forum_topic_closed)
                return undefined;
            return new forum_topic_closed_1.ForumTopicClosed(forum_topic_closed);
        }
        /** Service message: forum topic reopened */
        get forumTopicReopened() {
            const { forum_topic_reopened } = this.payload;
            if (!forum_topic_reopened)
                return undefined;
            return new forum_topic_reopened_1.ForumTopicReopened(forum_topic_reopened);
        }
        /** Service message: the 'General' forum topic hidden */
        get generalForumTopicHidden() {
            const { general_forum_topic_hidden } = this.payload;
            if (!general_forum_topic_hidden)
                return undefined;
            return new general_forum_topic_hidden_1.GeneralForumTopicHidden(general_forum_topic_hidden);
        }
        /** Service message: the 'General' forum topic unhidden */
        get generalForumTopicUnhidden() {
            const { general_forum_topic_unhidden } = this.payload;
            if (!general_forum_topic_unhidden)
                return undefined;
            return new general_forum_topic_unhidden_1.GeneralForumTopicUnhidden(general_forum_topic_unhidden);
        }
        /** The message is a scheduled giveaway message */
        get giveaway() {
            const { giveaway } = this.payload;
            if (!giveaway)
                return undefined;
            return new giveaway_1.Giveaway(giveaway);
        }
        /** Service message: a scheduled giveaway was created */
        get giveawayCreated() {
            const { giveaway_created } = this.payload;
            if (!giveaway_created)
                return undefined;
            return new giveaway_created_1.GiveawayCreated(giveaway_created);
        }
        /** Service message: a giveaway without public winners was completed */
        get giveawayCompleted() {
            const { giveaway_completed } = this.payload;
            if (!giveaway_completed)
                return undefined;
            return new giveaway_completed_1.GiveawayCompleted(giveaway_completed);
        }
        /** A giveaway with public winners was completed */
        get giveawayWinners() {
            const { giveaway_winners } = this.payload;
            if (!giveaway_winners)
                return undefined;
            return new giveaway_winners_1.GiveawayWinners(giveaway_winners);
        }
        /** Service message: video chat scheduled */
        get videoChatScheduled() {
            const { video_chat_scheduled } = this.payload;
            if (!video_chat_scheduled)
                return undefined;
            return new video_chat_scheduled_1.VideoChatScheduled(video_chat_scheduled);
        }
        /** Service message: video chat started */
        get videoChatStarted() {
            const { video_chat_started } = this.payload;
            if (!video_chat_started)
                return undefined;
            return new video_chat_started_1.VideoChatStarted(video_chat_started);
        }
        /** Service message: video chat ended */
        get videoChatEnded() {
            const { video_chat_ended } = this.payload;
            if (!video_chat_ended)
                return undefined;
            return new video_chat_ended_1.VideoChatEnded(video_chat_ended);
        }
        /** Service message: new participants invited to a video chat */
        get videoChatParticipantsInvited() {
            const { video_chat_participants_invited } = this.payload;
            if (!video_chat_participants_invited)
                return undefined;
            return new video_chat_participants_invited_1.VideoChatParticipantsInvited(video_chat_participants_invited);
        }
        /** Service message: data sent by a Web App */
        get webAppData() {
            const { web_app_data } = this.payload;
            if (!web_app_data)
                return undefined;
            return new web_app_data_1.WebAppData(web_app_data);
        }
    };
    return Message = _classThis;
})();
exports.Message = Message;
(0, utils_1.memoizeGetters)(Message, [
    "from",
    "senderChat",
    "chat",
    "forwardOrigin",
    "replyMessage",
    "externalReply",
    "quote",
    "viaBot",
    "entities",
    "linkPreviewOptions",
    "animation",
    "audio",
    "document",
    "sticker",
    "story",
    "video",
    "videoNote",
    "voice",
    "captionEntities",
    "contact",
    "dice",
    "game",
    "poll",
    "venue",
    "location",
    "replyMarkup",
    "passportData",
    "newChatMembers",
    "leftChatMember",
    "newChatPhoto",
    "messageAutoDeleteTimerChanged",
    "pinnedMessage",
    "invoice",
    "successfulPayment",
    "usersShared",
    "chatShared",
    "proximityAlertTriggered",
    "writeAccessAllowed",
    "forumTopicClosed",
    "forumTopicCreated",
    "forumTopicEdited",
    "forumTopicReopened",
    "generalForumTopicHidden",
    "generalForumTopicUnhidden",
    "giveaway",
    "giveawayCompleted",
    "giveawayCreated",
    "giveawayWinners",
    "videoChatEnded",
    "videoChatParticipantsInvited",
    "videoChatScheduled",
    "videoChatStarted",
    "webAppData",
]);
