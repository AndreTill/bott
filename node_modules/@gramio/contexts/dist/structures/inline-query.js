"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineQuery = void 0;
const tslib_1 = require("tslib");
const inspectable_1 = require("inspectable");
const utils_1 = require("../utils");
const location_1 = require("./location");
const user_1 = require("./user");
/**
 * This object represents an incoming inline query.
 * When the user sends an empty query, your bot could return some default or
 * trending results.
 */
let InlineQuery = (() => {
    let _classDecorators = [(0, inspectable_1.Inspectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _instanceExtraInitializers = [];
    let _get_id_decorators;
    let _get_from_decorators;
    let _get_location_decorators;
    let _get_query_decorators;
    let _get_offset_decorators;
    var InlineQuery = class {
        static { _classThis = this; }
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _get_id_decorators = [(0, inspectable_1.Inspect)()];
            _get_from_decorators = [(0, inspectable_1.Inspect)()];
            _get_location_decorators = [(0, inspectable_1.Inspect)({ nullable: false })];
            _get_query_decorators = [(0, inspectable_1.Inspect)()];
            _get_offset_decorators = [(0, inspectable_1.Inspect)()];
            tslib_1.__esDecorate(this, null, _get_id_decorators, { kind: "getter", name: "id", static: false, private: false, access: { has: obj => "id" in obj, get: obj => obj.id }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_from_decorators, { kind: "getter", name: "from", static: false, private: false, access: { has: obj => "from" in obj, get: obj => obj.from }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_location_decorators, { kind: "getter", name: "location", static: false, private: false, access: { has: obj => "location" in obj, get: obj => obj.location }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_query_decorators, { kind: "getter", name: "query", static: false, private: false, access: { has: obj => "query" in obj, get: obj => obj.query }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(this, null, _get_offset_decorators, { kind: "getter", name: "offset", static: false, private: false, access: { has: obj => "offset" in obj, get: obj => obj.offset }, metadata: _metadata }, null, _instanceExtraInitializers);
            tslib_1.__esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
            InlineQuery = _classThis = _classDescriptor.value;
            if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
            tslib_1.__runInitializers(_classThis, _classExtraInitializers);
        }
        payload = tslib_1.__runInitializers(this, _instanceExtraInitializers);
        constructor(payload) {
            this.payload = payload;
        }
        /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
        get [Symbol.toStringTag]() {
            return this.constructor.name;
        }
        /** Unique identifier for this query */
        get id() {
            return this.payload.id;
        }
        /** Sender */
        get from() {
            return new user_1.User(this.payload.from);
        }
        /** Sender location, only for bots that request user location */
        get location() {
            const { location } = this.payload;
            if (!location)
                return undefined;
            return new location_1.Location(location);
        }
        /** Text of the query (up to 256 characters) */
        get query() {
            return this.payload.query;
        }
        /** Offset of the results to be returned, can be controlled by the bot */
        get offset() {
            return this.payload.offset;
        }
    };
    return InlineQuery = _classThis;
})();
exports.InlineQuery = InlineQuery;
(0, utils_1.memoizeGetters)(InlineQuery, ["from", "location"]);
