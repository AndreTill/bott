import type { TelegramObjects } from "@gramio/types";
import { Chat } from "./chat";
import { ChatShared } from "./chat-shared";
import { Contact } from "./contact";
import { Dice } from "./dice";
import { ExternalReplyInfo } from "./external-reply-info";
import { ForumTopicClosed } from "./forum-topic-closed";
import { ForumTopicCreated } from "./forum-topic-created";
import { ForumTopicEdited } from "./forum-topic-edited";
import { ForumTopicReopened } from "./forum-topic-reopened";
import { Game } from "./game";
import { GeneralForumTopicHidden } from "./general-forum-topic-hidden";
import { GeneralForumTopicUnhidden } from "./general-forum-topic-unhidden";
import { InaccessibleMessage } from "./inaccessible-message";
import { InlineKeyboardMarkup } from "./inline-keyboard-markup";
import { Invoice } from "./invoice";
import { LinkPreviewOptions } from "./link-preview-options";
import { Location } from "./location";
import { MessageAutoDeleteTimerChanged } from "./message-auto-delete-timer-changed";
import { MessageEntity } from "./message-entity";
import { MessageOriginChannel, MessageOriginChat, MessageOriginHiddenUser, MessageOriginUser } from "./message-origin/index";
import { PassportData } from "./passport-data";
import { PhotoSize } from "./photo-size";
import { Poll } from "./poll";
import { ProximityAlertTriggered } from "./proximity-alert-triggered";
import { SuccessfulPayment } from "./successful-payment";
import { TextQuote } from "./text-quote";
import { User } from "./user";
import { UsersShared } from "./users-shared";
import { Venue } from "./venue";
import { VideoChatEnded } from "./video-chat-ended";
import { VideoChatParticipantsInvited } from "./video-chat-participants-invited";
import { VideoChatScheduled } from "./video-chat-scheduled";
import { VideoChatStarted } from "./video-chat-started";
import { WebAppData } from "./web-app-data";
import { WriteAccessAllowed } from "./write-access-allowed";
import { AnimationAttachment, AudioAttachment, DocumentAttachment, StickerAttachment, StoryAttachment, VideoAttachment, VideoNoteAttachment, VoiceAttachment } from "./attachments/index";
import { ChatBackground } from "./chat-background";
import { ChatBoostAdded } from "./chat-boost-added";
import { Giveaway } from "./giveaway";
import { GiveawayCompleted } from "./giveaway-completed";
import { GiveawayCreated } from "./giveaway-created";
import { GiveawayWinners } from "./giveaway-winners";
import { Story } from "./story";
/** This object represents a message. */
export declare class Message {
    payload: TelegramObjects.TelegramMessage;
    constructor(payload: TelegramObjects.TelegramMessage);
    /** [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) */
    get [Symbol.toStringTag](): string;
    /** Unique message identifier inside this chat */
    get id(): number;
    /** Unique identifier of a message thread to which the message belongs; for supergroups only */
    get threadId(): number | undefined;
    /** Sender, empty for messages sent to channels */
    get from(): User | undefined;
    /**
     * Sender of the message, sent on behalf of a chat.
     * The channel itself for channel messages.
     * The supergroup itself for messages from anonymous group administrators.
     * The linked channel for messages automatically forwarded to the discussion group
     */
    get senderChat(): Chat | undefined;
    /** If the sender of the message boosted the chat, the number of boosts added by the user */
    get senderBoostCount(): number | undefined;
    /** The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account. */
    get senderBusinessBot(): User | undefined;
    /** Date the message was sent in Unix time */
    get createdAt(): number;
    /** Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier. */
    get businessConnectionId(): string | undefined;
    /** Conversation the message belongs to */
    get chat(): Chat;
    /** Information about the original message for forwarded messages */
    get forwardOrigin(): MessageOriginUser | MessageOriginChat | MessageOriginChannel | MessageOriginHiddenUser | undefined;
    /** `true`, if the message is sent to a forum topic */
    isTopicMessage(): boolean | undefined;
    /** `true`, if the message is a channel post that was automatically forwarded to the connected discussion group */
    isAutomaticForward(): boolean | undefined;
    /** For replies, the original message */
    get replyMessage(): Omit<Message, "replyMessage"> | undefined;
    /**  For replies to a story, the original story */
    get replyStory(): Story | undefined;
    /** Information about the message that is being replied to, which may come from another chat or forum topic */
    get externalReply(): ExternalReplyInfo | undefined;
    /** For replies that quote part of the original message, the quoted part of the message */
    get quote(): TextQuote | undefined;
    /** Bot through which the message was sent */
    get viaBot(): User | undefined;
    /** Date the message was last edited in Unix time */
    get updatedAt(): number | undefined;
    /** `true`, if the message can't be forwarded */
    hasProtectedContent(): true | undefined;
    /** `true`, True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message */
    isFromOffline(): true | undefined;
    /** The unique identifier of a media message group this message belongs to */
    get mediaGroupId(): string | undefined;
    /**
     * Signature of the post author for messages in channels,
     * or the custom title of an anonymous group administrator
     */
    get authorSignature(): string | undefined;
    /**
     * For text messages, the actual UTF-8 text of the message, 0-4096 characters
     */
    get text(): string | undefined;
    /**
     * For text messages, special entities like usernames, URLs, bot commands,
     * etc. that appear in the text
     */
    get entities(): MessageEntity[] | undefined;
    /** Options used for link preview generation for the message, if it is a text message and link preview options were changed */
    get linkPreviewOptions(): LinkPreviewOptions | undefined;
    /** Unique identifier of the message effect added to the message */
    get effectId(): string | undefined;
    /**
     * Message is an animation, information about the animation. For backward
     * compatibility, when this field is set, the `document` field will also be set
     */
    get animation(): AnimationAttachment | undefined;
    /** Message is an audio file, information about the file */
    get audio(): AudioAttachment | undefined;
    /** Message is a general file, information about the file */
    get document(): DocumentAttachment | undefined;
    /** Message is a photo, available sizes of the photo */
    get photo(): PhotoSize[] | undefined;
    /** Message is a sticker, information about the sticker */
    get sticker(): StickerAttachment | undefined;
    /** Message is a forwarded story */
    get story(): StoryAttachment | undefined;
    /** Message is a video, information about the video */
    get video(): VideoAttachment | undefined;
    /** Message is a video note, information about the video message */
    get videoNote(): VideoNoteAttachment | undefined;
    /** Message is a voice message, information about the file */
    get voice(): VoiceAttachment | undefined;
    /**
     * Caption for the animation, audio, document, photo, video or voice,
     * 0-1024 characters
     */
    get caption(): string | undefined;
    /**
     * For messages with a caption, special entities like usernames, URLs, bot
     * commands, etc. that appear in the caption
     */
    get captionEntities(): MessageEntity[] | undefined;
    /**
     * True, if the caption must be shown above the message media
     */
    isShowCaptionAboveMedia(): boolean;
    /** `true`, if the message media is covered by a spoiler animation */
    hasMediaSpoiler(): true | undefined;
    /** Message is a shared contact, information about the contact */
    get contact(): Contact | undefined;
    /** Message is a dice with random value from 1 to 6 */
    get dice(): Dice | undefined;
    /** Message is a game, information about the game */
    get game(): Game | undefined;
    /** Message is a native poll, information about the poll */
    get poll(): Poll | undefined;
    /**
     * Message is a venue, information about the venue.
     * For backward compatibility, when this field is set,
     * the `location` field will also be set
     */
    get venue(): Venue | undefined;
    /** Message is a shared location, information about the location */
    get location(): Location | undefined;
    /**
     * Inline keyboard attached to the message.
     *
     * `login_url` buttons are represented as ordinary `url` buttons.
     */
    get replyMarkup(): InlineKeyboardMarkup | undefined;
    /** The domain name of the website on which the user has logged in. */
    get connectedWebsite(): string | undefined;
    /** Telegram Passport data */
    get passportData(): PassportData | undefined;
    /**
     * New members that were added to the group or supergroup and information
     * about them (the bot itself may be one of these members)
     */
    get newChatMembers(): User[] | undefined;
    /**
     * A member was removed from the group, information about them (this member
     * may be the bot itself)
     */
    get leftChatMember(): User | undefined;
    /** A chat title was changed to this value */
    get newChatTitle(): string | undefined;
    /** A chat photo was change to this value */
    get newChatPhoto(): PhotoSize[] | undefined;
    /** Service message: the chat photo was deleted */
    get deleteChatPhoto(): boolean | undefined;
    /** Service message: the group has been created */
    get groupChatCreated(): boolean | undefined;
    /**
     * Service message: the supergroup has been created. This field can't be
     * received in a message coming through updates, because bot can't be a
     * member of a supergroup when it is created. It can only be found in
     * `replyMessage` if someone replies to a very first message in a
     * directly created supergroup.
     */
    get supergroupChatCreated(): boolean | undefined;
    /** Service message: auto-delete timer settings changed in the chat */
    get messageAutoDeleteTimerChanged(): MessageAutoDeleteTimerChanged | undefined;
    /**
     * Service message: the channel has been created. This field can't be
     * received in a message coming through updates, because bot can't be a
     * member of a channel when it is created. It can only be found in
     * `replyMessage` if someone replies to a very first message in a channel.
     */
    get channelChatCreated(): boolean | undefined;
    /**
     * The group has been migrated to a supergroup with the specified identifier.
     * This number may be greater than 32 bits and some programming languages may
     * have difficulty/silent defects in interpreting it. But it is smaller than
     * 52 bits, so a signed 64 bit integer or double-precision float type are
     * safe for storing this identifier.
     */
    get migrateToChatId(): number | undefined;
    /**
     * The supergroup has been migrated from a group with the specified
     * identifier. This number may be greater than 32 bits and some programming
     * languages may have difficulty/silent defects in interpreting it. But it is
     * smaller than 52 bits, so a signed 64 bit integer or double-precision float
     * type are safe for storing this identifier.
     */
    get migrateFromChatId(): number | undefined;
    /**
     * Specified message was pinned. Note that the Message object in this field
     * will not contain further `replyMessage` fields even if it is itself a
     * reply.
     */
    get pinnedMessage(): InaccessibleMessage | Omit<Message, "replyMessage"> | undefined;
    /** Message is an invoice for a payment, information about the invoice */
    get invoice(): Invoice | undefined;
    /**
     * Message is a service message about a successful payment,
     * information about the payment.
     */
    get successfulPayment(): SuccessfulPayment | undefined;
    /** Service message: a user was shared with the bot */
    get usersShared(): UsersShared | undefined;
    /** Service message: a chat was shared with the bot */
    get chatShared(): ChatShared | undefined;
    /**
     * Service message.
     * A user in the chat triggered another user's proximity alert
     * while sharing Live Location.
     */
    get proximityAlertTriggered(): ProximityAlertTriggered | undefined;
    /** Service message: the user allowed the bot added to the attachment menu to write messages */
    get writeAccessAllowed(): WriteAccessAllowed | undefined;
    /** Service message: chat boost added */
    get chatBoostAdded(): ChatBoostAdded | undefined;
    /** Service message: chat background set */
    get chatBackgroundSet(): ChatBackground | undefined;
    /** Service message: forum topic created */
    get forumTopicCreated(): ForumTopicCreated | undefined;
    /** Service message: forum topic edited */
    get forumTopicEdited(): ForumTopicEdited | undefined;
    /** Service message: forum topic closed */
    get forumTopicClosed(): ForumTopicClosed | undefined;
    /** Service message: forum topic reopened */
    get forumTopicReopened(): ForumTopicReopened | undefined;
    /** Service message: the 'General' forum topic hidden */
    get generalForumTopicHidden(): GeneralForumTopicHidden | undefined;
    /** Service message: the 'General' forum topic unhidden */
    get generalForumTopicUnhidden(): GeneralForumTopicUnhidden | undefined;
    /** The message is a scheduled giveaway message */
    get giveaway(): Giveaway | undefined;
    /** Service message: a scheduled giveaway was created */
    get giveawayCreated(): GiveawayCreated | undefined;
    /** Service message: a giveaway without public winners was completed */
    get giveawayCompleted(): GiveawayCompleted | undefined;
    /** A giveaway with public winners was completed */
    get giveawayWinners(): GiveawayWinners | undefined;
    /** Service message: video chat scheduled */
    get videoChatScheduled(): VideoChatScheduled | undefined;
    /** Service message: video chat started */
    get videoChatStarted(): VideoChatStarted | undefined;
    /** Service message: video chat ended */
    get videoChatEnded(): VideoChatEnded | undefined;
    /** Service message: new participants invited to a video chat */
    get videoChatParticipantsInvited(): VideoChatParticipantsInvited | undefined;
    /** Service message: data sent by a Web App */
    get webAppData(): WebAppData | undefined;
}
