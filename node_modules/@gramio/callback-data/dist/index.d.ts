/**
 * @module
 *
 * Library for easily manage callback-data
 */
import type { AddField, Field, Prettify } from "./types";
/**
 * Class-helper that construct schema and serialize/deserialize with {@link CallbackData.pack} and {@link CallbackData.unpack} methods
 *
 * @example
 * ```typescript
 * const someData = new CallbackData("example").number("id");
 *
 * new Bot()
 *     .command("start", (context) =>
 *         context.send("some", {
 *             reply_markup: new InlineKeyboard().text(
 *                 "example",
 *                 someData.pack({
 *                     id: 1,
 *                 })
 *             ),
 *         })
 *     )
 *     .callbackQuery(someData, (context) => {
 *         context.queryData; // is type-safe
 *     });
 * ```
 */
export declare class CallbackData<Schema extends Record<string, any> = Record<never, never>> {
    /** `id` for identify the CallbackData */
    id: string;
    /** Schema used for serialize/deserialize with {@link CallbackData.pack} and {@link CallbackData.unpack} methods */
    schema: Record<string, Field>;
    /** Pass the `id` with which you can identify the CallbackData */
    constructor(id: string);
    /**
     * Add `string` property to schema
     * @param key Name of property
     */
    string<Key extends string>(key: Key): CallbackData<Prettify<Schema & AddField<string, Key>>>;
    /**
     * Add `number` property to schema
     * @param key Name of property
     */
    number<Key extends string>(key: Key): CallbackData<Prettify<Schema & AddField<number, Key>>>;
    /**
     * Add `boolean` property to schema
     * @param key Name of property
     */
    boolean<Key extends string>(key: Key): CallbackData<Prettify<Schema & AddField<boolean, Key>>>;
    /**
     * Method that return {@link RegExp} to match this {@link CallbackData}
     */
    regexp(): RegExp;
    /**
     * A method for [`serializing`](https://developer.mozilla.org/en-US/docs/Glossary/Serialization) **object data** defined by **schema** into a **string**
     * @param data Object defined by schema
     *
     * @example
     * ```ts
     * const someData = new CallbackData("example").number("id");
     *
     * context.send("some", {
     * 	reply_markup: new InlineKeyboard().text(
     * 		"example",
     * 		someData.pack({
     * 			id: 1,
     * 		}),
     * 	),
     * });
     * ```
     */
    pack(data: Schema): string;
    /**
     * A method for [`deserializing`](https://developer.mozilla.org/en-US/docs/Glossary/Deserialization) data **object** by **schema** from a **string**
     * @param data String with data (please check that this string matched by {@link CallbackData.regexp})
     */
    unpack(data: string): Schema;
}
