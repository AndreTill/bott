import { Storage } from '@gramio/storage';
import { ContextType, BotLike, MaybePromise, Plugin, DeriveDefinitions } from 'gramio';

/**
 * @module
 *
 * Session plugin for GramIO.
 */

type Events = [
    "message",
    "callback_query",
    "channel_post",
    "chat_join_request",
    "chosen_inline_result",
    "inline_query",
    "web_app_data",
    "successful_payment",
    "video_chat_started",
    "video_chat_ended",
    "video_chat_scheduled",
    "video_chat_participants_invited",
    "passport_data",
    "new_chat_title",
    "new_chat_photo",
    "pinned_message",
    "poll_answer",
    "pre_checkout_query",
    "proximity_alert_triggered",
    "shipping_query",
    "group_chat_created",
    "delete_chat_photo",
    "location",
    "invoice",
    "message_auto_delete_timer_changed",
    "migrate_from_chat_id",
    "migrate_to_chat_id",
    "new_chat_members",
    "chat_shared"
][number];
/** Options types from {@link session} plugin */
interface SessionOptions<Data = unknown, Key extends string | undefined = "session"> {
    /**
     * The key that will be added to the context
     * @default "session"
     * */
    key?: Key;
    /**
     * The {@link Storage} in which to store the session
     *
     * [Documentation](https://gramio.dev/storages/)
     */
    storage?: Storage;
    /**
     * A function that allows you to specify which key will be used to identify the session in the storage
     * @default (context) => `${context.senderId}`
     */
    getSessionKey?: (context: ContextType<BotLike, Events>) => MaybePromise<string>;
    /** Specify which data will exist while there has not been an record in the repository yet
     *
     * To **type** a session data, you need to specify the type as the `ReturnType` of the initial function.
     *
     * ```ts
     * interface MySessionData {
     *     apple: number;
     *     some?: "maybe-empty";
     * }
     *
     * bot.extend(
     *     session({
     *         key: "sessionKey",
     *         initial: (): MySessionData => ({ apple: 1 }),
     *     })
     * );
     * ```
     */
    initial?: (context: ContextType<BotLike, Events>) => MaybePromise<Data>;
}
/**
 * Session plugin
 * @example
 * ```ts
 * import { Bot } from "gramio";
 * import { session } from "@gramio/session";
 *
 * const bot = new Bot(process.env.token!)
 *     .extend(
 *         session({
 *             key: "sessionKey",
 *             initial: () => ({ apple: 1 }),
 *         })
 *     )
 *     .on("message", (context) => {
 *         context.send(`üçè apple count is ${++context.sessionKey.apple}`);
 *     })
 *     .onStart(console.log);
 *
 * bot.start();
```
 */
declare function session<Data = unknown, Key extends string = "session">(options?: SessionOptions<Data, Key>): Plugin<{}, DeriveDefinitions & {
    [K in Events]: Awaited<{
        [key in Key extends string ? Key : "session"]: Data;
    }>;
}>;

export { type SessionOptions, session };
