"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaUpload = void 0;
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = require("node:path");
const utils_1 = require("./utils");
/**
 * Class-helper with static methods for file uploading.
 *
 * [Documentation](https://gramio.dev/files/media-upload.html)
 */
class MediaUpload {
    /**
     * Method for uploading Media File by local path.
     */
    static async path(path, filename) {
        const buffer = await promises_1.default.readFile(path);
        return new File([buffer], filename ?? (0, node_path_1.basename)(path));
    }
    /**
     * Method for uploading Media File by Readable stream.
     */
    static async stream(stream, filename = "file.stream") {
        const buffer = await (0, utils_1.convertStreamToBuffer)(stream);
        return new File([buffer], filename);
    }
    /**
     * Method for uploading Media File by Buffer or ArrayBuffer.
     */
    static buffer(buffer, filename = "file.buffer") {
        return new File([new Blob([buffer])], filename);
    }
    /**
     * Method for uploading Media File by URL (also with fetch options).
     */
    static async url(url, filename, options) {
        const res = await fetch(url, options);
        const buffer = await res.arrayBuffer();
        return new File([new Blob([buffer])], filename ??
            (typeof url === "string" ? (0, node_path_1.basename)(url) : (0, node_path_1.basename)(url.pathname)));
    }
    /**
     * Method for uploading Media File by text content.
     */
    static text(text, filename = "text.txt") {
        return new File([text], filename);
    }
}
exports.MediaUpload = MediaUpload;
