'use strict';

var node_util = require('node:util');

const inspectable = (klass, { serialize = () => ({}), stringify = (instance, payload, context) => `${context.stylize(klass.name, 'special')} ${context.inspect(payload)}`, } = {}) => {
    Object.defineProperty(klass.prototype, node_util.inspect.custom, {
        value(depth, inspectContext) {
            const context = {
                stylize: inspectContext.stylize,
                inspect: (payload, options) => node_util.inspect(payload, {
                    ...inspectContext,
                    compact: options?.compact ?? false,
                }),
            };
            const payload = serialize(this);
            return stringify(this, payload, context);
        },
    });
};

const kInspectProperties = Symbol('kInspectProperties');
const Inspectable = (options = {}) => (klass, context) => {
    inspectable(klass, {
        ...options,
        serialize(instance) {
            const payload = (options.serialize?.(instance) ?? {});
            const metadata = (context.metadata?.[kInspectProperties] || []);
            for (const { property, options: propertyOptions } of metadata) {
                let value = instance[property];
                if (typeof value === 'function' && propertyOptions.compute) {
                    value = value.call(instance);
                }
                if (!propertyOptions.nullable && !value) {
                    continue;
                }
                payload[propertyOptions.as] = value;
            }
            return payload;
        },
    });
};
const normalizeInspectOptions = (property, options) => ({
    compute: options.compute ?? false,
    nullable: options.nullable ?? true,
    as: options.as ?? property,
});
const Inspect = (options = {}) => (target, context) => {
    const property = context.name;
    const metadata = (context.metadata?.[kInspectProperties] || []);
    if (metadata.length === 0) {
        // biome-ignore lint/style/noNonNullAssertion: context.metadata is readonly
        context.metadata[kInspectProperties] = metadata;
    }
    metadata.push({
        property,
        options: normalizeInspectOptions(property, options),
    });
};

exports.Inspect = Inspect;
exports.Inspectable = Inspectable;
exports.inspectable = inspectable;
exports.kInspectProperties = kInspectProperties;
