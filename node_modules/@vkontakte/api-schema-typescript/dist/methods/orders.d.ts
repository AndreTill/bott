/**
 * This is auto-generated file, don't modify this file manually
 */
import { OrdersAmount } from '../objects/orders/OrdersAmount';
import { OrdersOrder } from '../objects/orders/OrdersOrder';
import { OrdersSubscription } from '../objects/orders/OrdersSubscription';
/**
 * orders.cancelSubscription
 */
export interface OrdersCancelSubscriptionParams {
    user_id: number;
    subscription_id: number;
    pending_cancel?: 0 | 1;
}
/**
 * Result
 */
export declare type OrdersCancelSubscriptionResponse = 0 | 1;
/**
 * orders.changeState
 *
 * Changes order status.
 */
export interface OrdersChangeStateParams {
    /**
     * order ID.
     */
    order_id: number;
    /**
     * action to be done with the order. Available actions: *cancel - to cancel unconfirmed order. *charge - to confirm unconfirmed order. Applies only if processing of [vk.com/dev/payments_status|order_change_state] notification failed. *refund - to cancel confirmed order.
     */
    action: 'cancel' | 'charge' | 'refund';
    /**
     * internal ID of the order in the application.
     */
    app_order_id?: number;
    /**
     * if this parameter is set to 1, this method returns a list of test mode orders. By default - 0.
     */
    test_mode?: 0 | 1;
}
export declare type OrdersChangeStateResponse = string;
/**
 * orders.get
 *
 * Returns a list of orders.
 */
export interface OrdersGetParams {
    offset?: number;
    /**
     * number of returned orders.
     */
    count?: number;
    /**
     * if this parameter is set to 1, this method returns a list of test mode orders. By default - 0.
     */
    test_mode?: 0 | 1;
}
export declare type OrdersGetResponse = OrdersOrder[];
/**
 * orders.getAmount
 */
export interface OrdersGetAmountParams {
    user_id: number;
    votes: string;
}
export declare type OrdersGetAmountResponse = OrdersAmount[];
/**
 * orders.getById
 *
 * Returns information about orders by their IDs.
 */
export interface OrdersGetByIdParams {
    /**
     * order ID.
     */
    order_id?: number;
    /**
     * order IDs (when information about several orders is requested).
     */
    order_ids?: string;
    /**
     * if this parameter is set to 1, this method returns a list of test mode orders. By default - 0.
     */
    test_mode?: 0 | 1;
}
export declare type OrdersGetByIdResponse = OrdersOrder[];
/**
 * orders.getUserSubscriptionById
 */
export interface OrdersGetUserSubscriptionByIdParams {
    user_id: number;
    subscription_id: number;
}
export declare type OrdersGetUserSubscriptionByIdResponse = OrdersSubscription;
/**
 * orders.getUserSubscriptions
 */
export interface OrdersGetUserSubscriptionsParams {
    user_id: number;
}
export interface OrdersGetUserSubscriptionsResponse {
    /**
     * Total number
     */
    count?: number;
    items?: OrdersSubscription[];
}
